diff --git a/History.md b/History.md
index 35de5711ca..2b64dd5f34 100644
--- a/History.md
+++ b/History.md
@@ -1,7 +1,12 @@
 unreleased
 ==========
 
+  * Add `res.sendStatus`
+  * Invoke callback for sendfile when client aborts
+    - Applies to `res.sendFile`, `res.sendfile`, and `res.download`
+    - `err` will be populated with request aborted error
   * Support IP address host in `req.subdomains`
+  * Use `etag` to generate `ETag` headers
   * deps: accepts@~1.1.0
     - update `mime-types`
   * deps: cookie-signature@1.0.5
diff --git a/lib/response.js b/lib/response.js
index 27b62853e1..879dd98a2b 100644
--- a/lib/response.js
+++ b/lib/response.js
@@ -6,6 +6,7 @@ var deprecate = require('depd')('express');
 var escapeHtml = require('escape-html');
 var http = require('http');
 var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
 var path = require('path');
 var mixin = require('utils-merge');
 var sign = require('cookie-signature').sign;
@@ -302,6 +303,30 @@ res.jsonp = function jsonp(obj) {
   return this.send(body);
 };
 
+/**
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
 /**
  * Transfer the file at the given `path`.
  *
@@ -344,8 +369,8 @@ res.jsonp = function jsonp(obj) {
  */
 
 res.sendFile = function sendFile(path, options, fn) {
-  var done;
   var req = this.req;
+  var res = this;
   var next = req.next;
 
   if (!path) {
@@ -364,59 +389,20 @@ res.sendFile = function sendFile(path, options, fn) {
     throw new TypeError('path must be absolute or specify root to res.sendFile');
   }
 
-  // socket errors
-  req.socket.on('error', onerror);
-
-  // errors
-  function onerror(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-
-    // callback available
-    if (fn) return fn(err);
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function onstream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', onerror);
-  }
-
-  // transfer
+  // create file stream
   var pathname = encodeURI(path);
   var file = send(req, pathname, options);
-  file.on('error', onerror);
-  file.on('directory', next);
-  file.on('stream', onstream);
 
-  if (options.headers) {
-    // set headers on successful transfer
-    file.on('headers', function headers(res) {
-      var obj = options.headers;
-      var keys = Object.keys(obj);
-
-      for (var i = 0; i < keys.length; i++) {
-        var k = keys[i];
-        res.setHeader(k, obj[k]);
-      }
-    });
-  }
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
 
-  // pipe
-  file.pipe(this);
-  this.on('finish', cleanup);
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
 };
 
 /**
@@ -461,71 +447,31 @@ res.sendFile = function sendFile(path, options, fn) {
  */
 
 res.sendfile = function(path, options, fn){
-  options = options || {};
-  var self = this;
-  var req = self.req;
-  var next = this.req.next;
-  var done;
-
+  var req = this.req;
+  var res = this;
+  var next = req.next;
 
   // support function as second arg
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
     fn = options;
     options = {};
   }
 
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-
-    // callback available
-    if (fn) return fn(err);
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
+  options = options || {};
 
-  // transfer
+  // create file stream
   var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
 
-  if (options.headers) {
-    // set headers on successful transfer
-    file.on('headers', function headers(res) {
-      var obj = options.headers;
-      var keys = Object.keys(obj);
-
-      for (var i = 0; i < keys.length; i++) {
-        var k = keys[i];
-        res.setHeader(k, obj[k]);
-      }
-    });
-  }
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
 
-  // pipe
-  file.pipe(this);
-  this.on('finish', cleanup);
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
 };
 
 res.sendfile = deprecate.function(res.sendfile,
@@ -953,3 +899,69 @@ res.render = function(view, options, fn){
   // render
   app.render(view, options, fn);
 };
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (done) return;
+      done = true;
+
+      // response finished before end of file
+      var err = new Error('Request aborted');
+      err.code = 'ECONNABORT';
+      callback(err);
+    });
+  }
+
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('directory', ondirectory);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}
diff --git a/lib/utils.js b/lib/utils.js
index 9f9fdfd6d0..8dd29664cb 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -3,9 +3,8 @@
  */
 
 var mime = require('send').mime;
-var crc32 = require('buffer-crc32');
-var crypto = require('crypto');
 var basename = require('path').basename;
+var etag = require('etag');
 var proxyaddr = require('proxy-addr');
 var qs = require('qs');
 var querystring = require('querystring');
@@ -20,17 +19,12 @@ var typer = require('media-typer');
  * @api private
  */
 
-exports.etag = function etag(body, encoding){
-  if (body.length === 0) {
-    // fast-path empty body
-    return '"1B2M2Y8AsgTpgAmY7PhCfg=="'
-  }
+exports.etag = function (body, encoding) {
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body
 
-  var hash = crypto
-    .createHash('md5')
-    .update(body, encoding)
-    .digest('base64')
-  return '"' + hash + '"'
+  return etag(buf, {weak: false})
 };
 
 /**
@@ -43,16 +37,11 @@ exports.etag = function etag(body, encoding){
  */
 
 exports.wetag = function wetag(body, encoding){
-  if (body.length === 0) {
-    // fast-path empty body
-    return 'W/"0-0"'
-  }
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body
 
-  var buf = Buffer.isBuffer(body)
-    ? body
-    : new Buffer(body, encoding)
-  var len = buf.length
-  return 'W/"' + len.toString(16) + '-' + crc32.unsigned(buf) + '"'
+  return etag(buf, {weak: true})
 };
 
 /**
diff --git a/package.json b/package.json
index 9cdc28a0ff..d8dfc88652 100644
--- a/package.json
+++ b/package.json
@@ -33,10 +33,12 @@
     "debug": "~2.0.0",
     "depd": "0.4.4",
     "escape-html": "1.0.1",
+    "etag": "~1.3.0",
     "finalhandler": "0.2.0",
     "fresh": "0.2.4",
     "media-typer": "0.3.0",
     "methods": "1.1.0",
+    "on-finished": "~2.1.0",
     "parseurl": "~1.3.0",
     "path-to-regexp": "0.1.3",
     "proxy-addr": "1.0.1",