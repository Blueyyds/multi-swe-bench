diff --git a/History.md b/History.md
index 40a5ed7e4b..bfd7e58afa 100644
--- a/History.md
+++ b/History.md
@@ -1,3 +1,45 @@
+5.x
+===
+
+This incorporates all changes after 4.13.1 up to 4.14.0.
+
+5.0.0-alpha.2 / 2015-07-06
+==========================
+
+This is the second Express 5.0 alpha release, based off 4.13.1 and includes
+changes from 5.0.0-alpha.1.
+
+  * remove:
+    - `app.param(fn)`
+    - `req.param()` -- use `req.params`, `req.body`, or `req.query` instead
+  * change:
+    - `res.render` callback is always async, even for sync view engines
+    - The leading `:` character in `name` for `app.param(name, fn)` is no longer removed
+    - Use `router` module for routing
+    - Use `path-is-absolute` module for absolute path detection
+
+5.0.0-alpha.1 / 2014-11-06
+==========================
+
+This is the first Express 5.0 alpha release, based off 4.10.1.
+
+  * remove:
+    - `app.del` - use `app.delete`
+    - `req.acceptsCharset` - use `req.acceptsCharsets`
+    - `req.acceptsEncoding` - use `req.acceptsEncodings`
+    - `req.acceptsLanguage` - use `req.acceptsLanguages`
+    - `res.json(obj, status)` signature - use `res.json(status, obj)`
+    - `res.jsonp(obj, status)` signature - use `res.jsonp(status, obj)`
+    - `res.send(body, status)` signature - use `res.send(status, body)`
+    - `res.send(status)` signature - use `res.sendStatus(status)`
+    - `res.sendfile` - use `res.sendFile` instead
+    - `express.query` middleware
+  * change:
+    - `req.host` now returns host (`hostname:port`) - use `req.hostname` for only hostname
+    - `req.query` is now a getter instead of a plain property
+  * add:
+    - `app.router` is a reference to the base router
+
 4.14.0 / 2016-06-16
 ===================
 
diff --git a/examples/search/index.js b/examples/search/index.js
index d614ac2407..5775eb0ece 100644
--- a/examples/search/index.js
+++ b/examples/search/index.js
@@ -38,10 +38,10 @@ app.get('/', function(req, res){
  * GET search for :query.
  */
 
-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
   var query = req.params.query;
   db.smembers(query, function(err, vals){
-    if (err) return res.send(500);
+    if (err) return next(err);
     res.send(vals);
   });
 });
diff --git a/examples/static-files/index.js b/examples/static-files/index.js
index c3b1659d86..3353cfa1e3 100644
--- a/examples/static-files/index.js
+++ b/examples/static-files/index.js
@@ -3,6 +3,7 @@
  */
 
 var express = require('../..');
+var path = require('path');
 var logger = require('morgan');
 var app = express();
 
@@ -16,7 +17,7 @@ app.use(logger('dev'));
 // that you pass it. In this case "GET /js/app.js"
 // will look for "./public/js/app.js".
 
-app.use(express.static(__dirname + '/public'));
+app.use(express.static(path.join(__dirname, 'public')));
 
 // if you wanted to "prefix" you may use
 // the mounting feature of Connect, for example
@@ -24,13 +25,13 @@ app.use(express.static(__dirname + '/public'));
 // The mount-path "/static" is simply removed before
 // passing control to the express.static() middleware,
 // thus it serves the file correctly by ignoring "/static"
-app.use('/static', express.static(__dirname + '/public'));
+app.use('/static', express.static(path.join(__dirname, 'public')));
 
 // if for some reason you want to serve files from
 // several directories, you can use express.static()
 // multiple times! Here we're passing "./public/css",
 // this will allow "GET /style.css" instead of "GET /css/style.css":
-app.use(express.static(__dirname + '/public/css'));
+app.use(express.static(path.join(__dirname, 'public', 'css')));
 
 app.listen(3000);
 console.log('listening on port 3000');
@@ -38,3 +39,4 @@ console.log('try:');
 console.log('  GET /hello.txt');
 console.log('  GET /js/app.js');
 console.log('  GET /css/style.css');
+
diff --git a/lib/application.js b/lib/application.js
index 0ee4def389..136e435baa 100644
--- a/lib/application.js
+++ b/lib/application.js
@@ -14,20 +14,17 @@
  */
 
 var finalhandler = require('finalhandler');
-var Router = require('./router');
 var methods = require('methods');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
 var debug = require('debug')('express:application');
 var View = require('./view');
 var http = require('http');
 var compileETag = require('./utils').compileETag;
 var compileQueryParser = require('./utils').compileQueryParser;
 var compileTrust = require('./utils').compileTrust;
-var deprecate = require('depd')('express');
 var flatten = require('array-flatten');
 var merge = require('utils-merge');
 var resolve = require('path').resolve;
+var Router = require('router');
 var slice = Array.prototype.slice;
 
 /**
@@ -54,11 +51,29 @@ var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
  */
 
 app.init = function init() {
+  var router = null;
+
   this.cache = {};
   this.engines = {};
   this.settings = {};
 
   this.defaultConfiguration();
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
 };
 
 /**
@@ -117,32 +132,6 @@ app.defaultConfiguration = function defaultConfiguration() {
   if (env === 'production') {
     this.enable('view cache');
   }
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
 };
 
 /**
@@ -155,22 +144,31 @@ app.lazyrouter = function lazyrouter() {
  */
 
 app.handle = function handle(req, res, callback) {
-  var router = this._router;
-
   // final handler
   var done = callback || finalhandler(req, res, {
     env: this.get('env'),
     onerror: logerror.bind(this)
   });
 
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
   }
 
-  router.handle(req, res, done);
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
 };
 
 /**
@@ -209,9 +207,8 @@ app.use = function use(fn) {
     throw new TypeError('app.use() requires middleware functions');
   }
 
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
 
   fns.forEach(function (fn) {
     // non-express app
@@ -251,8 +248,7 @@ app.use = function use(fn) {
  */
 
 app.route = function route(path) {
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
 };
 
 /**
@@ -318,8 +314,6 @@ app.engine = function engine(ext, fn) {
  */
 
 app.param = function param(name, fn) {
-  this.lazyrouter();
-
   if (Array.isArray(name)) {
     for (var i = 0; i < name.length; i++) {
       this.param(name[i], fn);
@@ -328,7 +322,7 @@ app.param = function param(name, fn) {
     return this;
   }
 
-  this._router.param(name, fn);
+  this.router.param(name, fn);
 
   return this;
 };
@@ -475,9 +469,7 @@ methods.forEach(function(method){
       return this.set(path);
     }
 
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
     route[method].apply(route, slice.call(arguments, 1));
     return this;
   };
@@ -494,9 +486,7 @@ methods.forEach(function(method){
  */
 
 app.all = function all(path) {
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
   var args = slice.call(arguments, 1);
 
   for (var i = 0; i < methods.length; i++) {
@@ -506,10 +496,6 @@ app.all = function all(path) {
   return this;
 };
 
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');
-
 /**
  * Render the given view `name` name with `options`
  * and a callback accepting an error and the
diff --git a/lib/express.js b/lib/express.js
index 540c8be6f4..ff62644c53 100644
--- a/lib/express.js
+++ b/lib/express.js
@@ -15,8 +15,7 @@
 var EventEmitter = require('events').EventEmitter;
 var mixin = require('merge-descriptors');
 var proto = require('./application');
-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
 var req = require('./request');
 var res = require('./response');
 
@@ -59,14 +58,13 @@ exports.response = res;
  * Expose constructors.
  */
 
-exports.Route = Route;
+exports.Route = Router.Route;
 exports.Router = Router;
 
 /**
  * Expose middleware
  */
 
-exports.query = require('./middleware/query');
 exports.static = require('serve-static');
 
 /**
@@ -93,6 +91,7 @@ exports.static = require('serve-static');
   'limit',
   'multipart',
   'staticCache',
+  'query',
 ].forEach(function (name) {
   Object.defineProperty(exports, name, {
     get: function () {
diff --git a/lib/request.js b/lib/request.js
index 557d050ffb..9df73d35ac 100644
--- a/lib/request.js
+++ b/lib/request.js
@@ -14,7 +14,6 @@
  */
 
 var accepts = require('accepts');
-var deprecate = require('depd')('express');
 var isIP = require('net').isIP;
 var typeis = require('type-is');
 var http = require('http');
@@ -141,9 +140,6 @@ req.acceptsEncodings = function(){
   return accept.encodings.apply(accept, arguments);
 };
 
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
 /**
  * Check if the given `charset`s are acceptable,
  * otherwise you should respond with 406 "Not Acceptable".
@@ -158,9 +154,6 @@ req.acceptsCharsets = function(){
   return accept.charsets.apply(accept, arguments);
 };
 
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
 /**
  * Check if the given `lang`s are acceptable,
  * otherwise you should respond with 406 "Not Acceptable".
@@ -175,9 +168,6 @@ req.acceptsLanguages = function(){
   return accept.languages.apply(accept, arguments);
 };
 
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
-
 /**
  * Parse Range header field, capping to the given `size`.
  *
@@ -210,38 +200,27 @@ req.range = function range(size, options) {
 };
 
 /**
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {"id":12}
- *  - Checks query string params, ex: ?id=12
+ * Parse the query string of `req.url`.
  *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
+ * This uses the "query parser" setting to parse the raw
+ * string into an object.
  *
- * @param {String} name
- * @param {Mixed} [defaultValue]
  * @return {String}
- * @public
+ * @api public
  */
 
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
 
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
 
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
+  var querystring = parse(this).query;
 
-  return defaultValue;
-};
+  return queryparse(querystring);
+});
 
 /**
  * Check if the incoming request contains the "Content-Type"
@@ -399,7 +378,7 @@ defineGetter(req, 'path', function path() {
 });
 
 /**
- * Parse the "Host" header field to a hostname.
+ * Parse the "Host" header field to a host.
  *
  * When the "trust proxy" setting trusts the socket
  * address, the "X-Forwarded-Host" header field will
@@ -409,14 +388,31 @@ defineGetter(req, 'path', function path() {
  * @public
  */
 
-defineGetter(req, 'hostname', function hostname(){
+defineGetter(req, 'host', function host(){
   var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
+  var val = this.get('X-Forwarded-Host');
 
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
   }
 
+  return val || undefined;
+});
+
+/**
+ * Parse the "Host" header field to a hostname.
+ *
+ * When the "trust proxy" setting trusts the socket
+ * address, the "X-Forwarded-Host" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'hostname', function hostname(){
+  var host = this.host;
+
   if (!host) return;
 
   // IPv6 literal support
@@ -430,12 +426,6 @@ defineGetter(req, 'hostname', function hostname(){
     : host;
 });
 
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));
-
 /**
  * Check if the request is fresh, aka
  * Last-Modified and/or the ETag
diff --git a/lib/response.js b/lib/response.js
index 6128f450a9..6ab5122331 100644
--- a/lib/response.js
+++ b/lib/response.js
@@ -17,9 +17,9 @@ var deprecate = require('depd')('express');
 var encodeUrl = require('encodeurl');
 var escapeHtml = require('escape-html');
 var http = require('http');
-var isAbsolute = require('./utils').isAbsolute;
 var onFinished = require('on-finished');
 var path = require('path');
+var pathIsAbsolute = require('path-is-absolute');
 var merge = require('utils-merge');
 var sign = require('cookie-signature').sign;
 var normalizeType = require('./utils').normalizeType;
@@ -107,29 +107,11 @@ res.send = function send(body) {
   // settings
   var app = this.app;
 
-  // allow status / body
+  // support res.send(status, body)
   if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statusCodes[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
   }
 
   switch (typeof chunk) {
@@ -223,17 +205,11 @@ res.send = function send(body) {
 res.json = function json(obj) {
   var val = obj;
 
-  // allow status / body
+  // support res.json(status, obj)
   if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
   }
 
   // settings
@@ -265,17 +241,11 @@ res.json = function json(obj) {
 res.jsonp = function jsonp(obj) {
   var val = obj;
 
-  // allow status / body
+  // support res.jsonp(status, obj)
   if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
   }
 
   // settings
@@ -400,7 +370,7 @@ res.sendFile = function sendFile(path, options, callback) {
     opts = {};
   }
 
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
     throw new TypeError('path must be absolute or specify root to res.sendFile');
   }
 
@@ -420,78 +390,6 @@ res.sendFile = function sendFile(path, options, callback) {
   });
 };
 
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
 /**
  * Transfer the file at the given `path` as an attachment.
  *
@@ -500,7 +398,7 @@ res.sendfile = deprecate.function(res.sendfile,
  * when the data transfer is complete, or when an error has
  * ocurred. Be sure to check `res.headersSent` if you plan to respond.
  *
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
  *
  * @public
  */
diff --git a/lib/router/layer.js b/lib/router/layer.js
index fe9210cb9d..e9ca5c70b4 100644
--- a/lib/router/layer.js
+++ b/lib/router/layer.js
@@ -23,132 +23,134 @@ var debug = require('debug')('express:router:layer');
 
 var hasOwnProperty = Object.prototype.hasOwnProperty;
 
-/**
- * Module exports.
- * @public
- */
+class _Layer {
+  constructor(path, options, fn) {
+    debug('new %s', path);
+    var opts = options || {};
 
-module.exports = Layer;
+    this.handle = fn;
+    this.name = fn.name || '<anonymous>';
+    this.params = undefined;
+    this.path = undefined;
+    this.regexp = pathRegexp(path, this.keys = [], opts);
 
-function Layer(path, options, fn) {
-  if (!(this instanceof Layer)) {
-    return new Layer(path, options, fn);
+    if (path === '/' && opts.end === false) {
+      this.regexp.fast_slash = true;
+    }
   }
 
-  debug('new %s', path);
-  var opts = options || {};
-
-  this.handle = fn;
-  this.name = fn.name || '<anonymous>';
-  this.params = undefined;
-  this.path = undefined;
-  this.regexp = pathRegexp(path, this.keys = [], opts);
+  /**
+   * Handle the error for the layer.
+   *
+   * @param {Error} error
+   * @param {Request} req
+   * @param {Response} res
+   * @param {function} next
+   * @api private
+   */
+
+  handle_error(error, req, res, next) {
+    var fn = this.handle;
+
+    if (fn.length !== 4) {
+      // not a standard error handler
+      return next(error);
+    }
 
-  if (path === '/' && opts.end === false) {
-    this.regexp.fast_slash = true;
+    try {
+      fn(error, req, res, next);
+    } catch (err) {
+      next(err);
+    }
   }
-}
-
-/**
- * Handle the error for the layer.
- *
- * @param {Error} error
- * @param {Request} req
- * @param {Response} res
- * @param {function} next
- * @api private
- */
-
-Layer.prototype.handle_error = function handle_error(error, req, res, next) {
-  var fn = this.handle;
 
-  if (fn.length !== 4) {
-    // not a standard error handler
-    return next(error);
-  }
+  /**
+   * Handle the request for the layer.
+   *
+   * @param {Request} req
+   * @param {Response} res
+   * @param {function} next
+   * @api private
+   */
+
+  handle_request(req, res, next) {
+    var fn = this.handle;
+
+    if (fn.length > 3) {
+      // not a standard request handler
+      return next();
+    }
 
-  try {
-    fn(error, req, res, next);
-  } catch (err) {
-    next(err);
+    try {
+      fn(req, res, next);
+    } catch (err) {
+      next(err);
+    }
   }
-};
 
-/**
- * Handle the request for the layer.
- *
- * @param {Request} req
- * @param {Response} res
- * @param {function} next
- * @api private
- */
+  /**
+   * Check if this route matches `path`, if so
+   * populate `.params`.
+   *
+   * @param {String} path
+   * @return {Boolean}
+   * @api private
+   */
+
+  match(path) {
+    if (path == null) {
+      // no path, nothing matches
+      this.params = undefined;
+      this.path = undefined;
+      return false;
+    }
 
-Layer.prototype.handle_request = function handle(req, res, next) {
-  var fn = this.handle;
+    if (this.regexp.fast_slash) {
+      // fast path non-ending match for / (everything matches)
+      this.params = {};
+      this.path = '';
+      return true;
+    }
 
-  if (fn.length > 3) {
-    // not a standard request handler
-    return next();
-  }
+    var m = this.regexp.exec(path);
 
-  try {
-    fn(req, res, next);
-  } catch (err) {
-    next(err);
-  }
-};
+    if (!m) {
+      this.params = undefined;
+      this.path = undefined;
+      return false;
+    }
 
-/**
- * Check if this route matches `path`, if so
- * populate `.params`.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
+    // store values
+    this.params = {};
+    this.path = m[0];
 
-Layer.prototype.match = function match(path) {
-  if (path == null) {
-    // no path, nothing matches
-    this.params = undefined;
-    this.path = undefined;
-    return false;
-  }
+    var keys = this.keys;
+    var params = this.params;
 
-  if (this.regexp.fast_slash) {
-    // fast path non-ending match for / (everything matches)
-    this.params = {};
-    this.path = '';
-    return true;
-  }
+    for (var i = 1; i < m.length; i++) {
+      var key = keys[i - 1];
+      var prop = key.name;
+      var val = decode_param(m[i]);
 
-  var m = this.regexp.exec(path);
+      if (val !== undefined || !(hasOwnProperty.call(params, prop))) {
+        params[prop] = val;
+      }
+    }
 
-  if (!m) {
-    this.params = undefined;
-    this.path = undefined;
-    return false;
+    return true;
   }
 
-  // store values
-  this.params = {};
-  this.path = m[0];
-
-  var keys = this.keys;
-  var params = this.params;
+}
 
-  for (var i = 1; i < m.length; i++) {
-    var key = keys[i - 1];
-    var prop = key.name;
-    var val = decode_param(m[i]);
+/**
+ * To allow the use of Layer with or without 'new'
+ */
 
-    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {
-      params[prop] = val;
-    }
+function Layer(path, options, fn) {
+  if (!(this instanceof _Layer)) {
+    return new _Layer(path, options, fn);
   }
-
-  return true;
-};
+}
 
 /**
  * Decode param value.
@@ -174,3 +176,11 @@ function decode_param(val) {
     throw err;
   }
 }
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = Layer;
+
diff --git a/lib/router/route.js b/lib/router/route.js
index 2788d7b735..493fe07376 100644
--- a/lib/router/route.js
+++ b/lib/router/route.js
@@ -26,13 +26,6 @@ var methods = require('methods');
 var slice = Array.prototype.slice;
 var toString = Object.prototype.toString;
 
-/**
- * Module exports.
- * @public
- */
-
-module.exports = Route;
-
 /**
  * Initialize `Route` with the given `path`,
  *
@@ -40,148 +33,151 @@ module.exports = Route;
  * @public
  */
 
-function Route(path) {
-  this.path = path;
-  this.stack = [];
+class Route {
+  constructor(path) {
+    this.path = path;
+    this.stack = [];
 
-  debug('new %s', path);
-
-  // route handlers for various http methods
-  this.methods = {};
-}
+    debug('new %s', path);
 
-/**
- * Determine if the route handles a given method.
- * @private
- */
-
-Route.prototype._handles_method = function _handles_method(method) {
-  if (this.methods._all) {
-    return true;
+    // route handlers for various http methods
+    this.methods = {};
   }
 
-  var name = method.toLowerCase();
+  /**
+   * Determine if the route handles a given method.
+   * @private
+   */
 
-  if (name === 'head' && !this.methods['head']) {
-    name = 'get';
-  }
+  _handles_method(method) {
+    if (this.methods._all) {
+      return true;
+    }
 
-  return Boolean(this.methods[name]);
-};
+    var name = method.toLowerCase();
 
-/**
- * @return {Array} supported HTTP methods
- * @private
- */
-
-Route.prototype._options = function _options() {
-  var methods = Object.keys(this.methods);
+    if (name === 'head' && !this.methods['head']) {
+      name = 'get';
+    }
 
-  // append automatic head
-  if (this.methods.get && !this.methods.head) {
-    methods.push('head');
+    return Boolean(this.methods[name]);
   }
 
-  for (var i = 0; i < methods.length; i++) {
-    // make upper case
-    methods[i] = methods[i].toUpperCase();
-  }
+  /**
+   * @return {Array} supported HTTP methods
+   * @private
+   */
 
-  return methods;
-};
+  _options() {
+    var methods = Object.keys(this.methods);
 
-/**
- * dispatch req, res into this route
- * @private
- */
+    // append automatic head
+    if (this.methods.get && !this.methods.head) {
+      methods.push('head');
+    }
 
-Route.prototype.dispatch = function dispatch(req, res, done) {
-  var idx = 0;
-  var stack = this.stack;
-  if (stack.length === 0) {
-    return done();
-  }
+    for (var i = 0; i < methods.length; i++) {
+      // make upper case
+      methods[i] = methods[i].toUpperCase();
+    }
 
-  var method = req.method.toLowerCase();
-  if (method === 'head' && !this.methods['head']) {
-    method = 'get';
+    return methods;
   }
 
-  req.route = this;
+  /**
+   * dispatch req, res into this route
+   * @private
+   */
 
-  next();
-
-  function next(err) {
-    if (err && err === 'route') {
+  dispatch(req, res, done) {
+    var idx = 0;
+    var stack = this.stack;
+    if (stack.length === 0) {
       return done();
     }
 
-    var layer = stack[idx++];
-    if (!layer) {
-      return done(err);
+    var method = req.method.toLowerCase();
+    if (method === 'head' && !this.methods['head']) {
+      method = 'get';
     }
 
-    if (layer.method && layer.method !== method) {
-      return next(err);
-    }
+    req.route = this;
+
+    next();
+
+    function next(err) {
+      if (err && err === 'route') {
+        return done();
+      }
+
+      var layer = stack[idx++];
+      if (!layer) {
+        return done(err);
+      }
+
+      if (layer.method && layer.method !== method) {
+        return next(err);
+      }
 
-    if (err) {
-      layer.handle_error(err, req, res, next);
-    } else {
-      layer.handle_request(req, res, next);
+      if (err) {
+        layer.handle_error(err, req, res, next);
+      } else {
+        layer.handle_request(req, res, next);
+      }
     }
   }
-};
 
-/**
- * Add a handler for all HTTP verbs to this route.
- *
- * Behaves just like middleware and can respond or call `next`
- * to continue processing.
- *
- * You can use multiple `.all` call to add multiple handlers.
- *
- *   function check_something(req, res, next){
- *     next();
- *   };
- *
- *   function validate_user(req, res, next){
- *     next();
- *   };
- *
- *   route
- *   .all(validate_user)
- *   .all(check_something)
- *   .get(function(req, res, next){
- *     res.send('hello world');
- *   });
- *
- * @param {function} handler
- * @return {Route} for chaining
- * @api public
- */
+  /**
+   * Add a handler for all HTTP verbs to this route.
+   *
+   * Behaves just like middleware and can respond or call `next`
+   * to continue processing.
+   *
+   * You can use multiple `.all` call to add multiple handlers.
+   *
+   *   function check_something(req, res, next){
+   *     next();
+   *   };
+   *
+   *   function validate_user(req, res, next){
+   *     next();
+   *   };
+   *
+   *   route
+   *   .all(validate_user)
+   *   .all(check_something)
+   *   .get(function(req, res, next){
+   *     res.send('hello world');
+   *   });
+   *
+   * @param {function} handler
+   * @return {Route} for chaining
+   * @api public
+   */
+
+  all() {
+    var handles = flatten(slice.call(arguments));
 
-Route.prototype.all = function all() {
-  var handles = flatten(slice.call(arguments));
+    for (var i = 0; i < handles.length; i++) {
+      var handle = handles[i];
 
-  for (var i = 0; i < handles.length; i++) {
-    var handle = handles[i];
+      if (typeof handle !== 'function') {
+        var type = toString.call(handle);
+        var msg = 'Route.all() requires callback functions but got a ' + type;
+        throw new TypeError(msg);
+      }
 
-    if (typeof handle !== 'function') {
-      var type = toString.call(handle);
-      var msg = 'Route.all() requires callback functions but got a ' + type;
-      throw new TypeError(msg);
-    }
+      var layer = Layer('/', {}, handle);
+      layer.method = undefined;
 
-    var layer = Layer('/', {}, handle);
-    layer.method = undefined;
+      this.methods._all = true;
+      this.stack.push(layer);
+    }
 
-    this.methods._all = true;
-    this.stack.push(layer);
+    return this;
   }
 
-  return this;
-};
+}
 
 methods.forEach(function(method){
   Route.prototype[method] = function(){
@@ -208,3 +204,12 @@ methods.forEach(function(method){
     return this;
   };
 });
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = Route;
+
+
diff --git a/lib/utils.js b/lib/utils.js
index f418c5807c..078e0fd59d 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -12,13 +12,10 @@
  * @api private
  */
 
-var contentDisposition = require('content-disposition');
-var contentType = require('content-type');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
 var mime = require('send').mime;
-var basename = require('path').basename;
+var contentType = require('content-type');
 var etag = require('etag');
+var flatten = require('array-flatten');
 var proxyaddr = require('proxy-addr');
 var qs = require('qs');
 var querystring = require('querystring');
@@ -57,31 +54,6 @@ exports.wetag = function wetag(body, encoding){
   return etag(buf, {weak: true});
 };
 
-/**
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
 /**
  * Normalize the given `type`, for example "html" becomes "text/html".
  *
@@ -114,18 +86,6 @@ exports.normalizeTypes = function(types){
   return ret;
 };
 
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-
 /**
  * Parse accept params `str` returning an
  * object with `.value`, `.quality` and `.params`.
@@ -206,7 +166,6 @@ exports.compileQueryParser = function compileQueryParser(val) {
       fn = querystring.parse;
       break;
     case false:
-      fn = newObject;
       break;
     case 'extended':
       fn = parseExtendedQueryString;
@@ -286,14 +245,3 @@ function parseExtendedQueryString(str) {
     allowPrototypes: true
   });
 }
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}
diff --git a/lib/view.js b/lib/view.js
index 52415d4c28..4146b071e3 100644
--- a/lib/view.js
+++ b/lib/view.js
@@ -29,13 +29,6 @@ var extname = path.extname;
 var join = path.join;
 var resolve = path.resolve;
 
-/**
- * Module exports.
- * @public
- */
-
-module.exports = View;
-
 /**
  * Initialize a new `View` with the given `name`.
  *
@@ -50,109 +43,112 @@ module.exports = View;
  * @public
  */
 
-function View(name, options) {
-  var opts = options || {};
+class View {
+  constructor(name, options) {
+    var opts = options || {};
 
-  this.defaultEngine = opts.defaultEngine;
-  this.ext = extname(name);
-  this.name = name;
-  this.root = opts.root;
+    this.defaultEngine = opts.defaultEngine;
+    this.ext = extname(name);
+    this.name = name;
+    this.root = opts.root;
 
-  if (!this.ext && !this.defaultEngine) {
-    throw new Error('No default engine was specified and no extension was provided.');
-  }
+    if (!this.ext && !this.defaultEngine) {
+      throw new Error('No default engine was specified and no extension was provided.');
+    }
 
-  var fileName = name;
+    var fileName = name;
 
-  if (!this.ext) {
-    // get extension from default engine name
-    this.ext = this.defaultEngine[0] !== '.'
-      ? '.' + this.defaultEngine
-      : this.defaultEngine;
+    if (!this.ext) {
+      // get extension from default engine name
+      this.ext = this.defaultEngine[0] !== '.'
+        ? '.' + this.defaultEngine
+        : this.defaultEngine;
 
-    fileName += this.ext;
-  }
+      fileName += this.ext;
+    }
 
-  if (!opts.engines[this.ext]) {
-    // load engine
-    opts.engines[this.ext] = require(this.ext.substr(1)).__express;
-  }
+    if (!opts.engines[this.ext]) {
+      // load engine
+      opts.engines[this.ext] = require(this.ext.substr(1)).__express;
+    }
 
-  // store loaded engine
-  this.engine = opts.engines[this.ext];
+    // store loaded engine
+    this.engine = opts.engines[this.ext];
 
-  // lookup path
-  this.path = this.lookup(fileName);
-}
+    // lookup path
+    this.path = this.lookup(fileName);
+  }
 
-/**
- * Lookup view by the given `name`
- *
- * @param {string} name
- * @private
- */
+  /**
+   * Lookup view by the given `name`
+   *
+   * @param {string} name
+   * @private
+   */
+
+  lookup(name) {
+    var path;
+    var roots = [].concat(this.root);
 
-View.prototype.lookup = function lookup(name) {
-  var path;
-  var roots = [].concat(this.root);
+    debug('lookup "%s"', name);
 
-  debug('lookup "%s"', name);
+    for (var i = 0; i < roots.length && !path; i++) {
+      var root = roots[i];
 
-  for (var i = 0; i < roots.length && !path; i++) {
-    var root = roots[i];
+      // resolve the path
+      var loc = resolve(root, name);
+      var dir = dirname(loc);
+      var file = basename(loc);
 
-    // resolve the path
-    var loc = resolve(root, name);
-    var dir = dirname(loc);
-    var file = basename(loc);
+      // resolve the file
+      path = this.resolve(dir, file);
+    }
 
-    // resolve the file
-    path = this.resolve(dir, file);
+    return path;
   }
 
-  return path;
-};
+  /**
+   * Render with the given options.
+   *
+   * @param {object} options
+   * @param {function} callback
+   * @private
+   */
+
+  render(options, callback) {
+    debug('render "%s"', this.path);
+    this.engine(this.path, options, callback);
+  }
 
-/**
- * Render with the given options.
- *
- * @param {object} options
- * @param {function} callback
- * @private
- */
+  /**
+   * Resolve the file within the given directory.
+   *
+   * @param {string} dir
+   * @param {string} file
+   * @private
+   */
 
-View.prototype.render = function render(options, callback) {
-  debug('render "%s"', this.path);
-  this.engine(this.path, options, callback);
-};
+  resolve(dir, file) {
+    var ext = this.ext;
 
-/**
- * Resolve the file within the given directory.
- *
- * @param {string} dir
- * @param {string} file
- * @private
- */
+    // <path>.<ext>
+    var path = join(dir, file);
+    var stat = tryStat(path);
 
-View.prototype.resolve = function resolve(dir, file) {
-  var ext = this.ext;
+    if (stat && stat.isFile()) {
+      return path;
+    }
 
-  // <path>.<ext>
-  var path = join(dir, file);
-  var stat = tryStat(path);
+    // <path>/index.<ext>
+    path = join(dir, basename(file, ext), 'index' + ext);
+    stat = tryStat(path);
 
-  if (stat && stat.isFile()) {
-    return path;
+    if (stat && stat.isFile()) {
+      return path;
+    }
   }
 
-  // <path>/index.<ext>
-  path = join(dir, basename(file, ext), 'index' + ext);
-  stat = tryStat(path);
-
-  if (stat && stat.isFile()) {
-    return path;
-  }
-};
+}
 
 /**
  * Return a stat, maybe.
@@ -171,3 +167,11 @@ function tryStat(path) {
     return undefined;
   }
 }
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = View;
+
diff --git a/package.json b/package.json
index 57dd160288..1ecc060b78 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "express",
   "description": "Fast, unopinionated, minimalist web framework",
-  "version": "4.14.0",
+  "version": "5.0.0-alpha.2",
   "author": "TJ Holowaychuk <tj@vision-media.ca>",
   "contributors": [
     "Aaron Heckmann <aaron.heckmann+github@gmail.com>",
@@ -28,7 +28,7 @@
   ],
   "dependencies": {
     "accepts": "~1.3.3",
-    "array-flatten": "1.1.1",
+    "array-flatten": "2.0.0",
     "content-disposition": "0.5.1",
     "content-type": "~1.0.2",
     "cookie": "0.3.1",
@@ -44,10 +44,12 @@
     "methods": "~1.1.2",
     "on-finished": "~2.3.0",
     "parseurl": "~1.3.1",
+    "path-is-absolute": "1.0.0",
     "path-to-regexp": "0.1.7",
     "proxy-addr": "~1.1.2",
     "qs": "6.2.0",
     "range-parser": "~1.2.0",
+    "router": "~1.1.3",
     "send": "0.14.1",
     "serve-static": "~1.11.1",
     "type-is": "~1.6.13",
