diff --git a/History.md b/History.md
index 7834fffc0d..7963f07a81 100644
--- a/History.md
+++ b/History.md
@@ -1,3 +1,24 @@
+unreleased
+==========
+
+  * Add `res.append(field, val)` to append headers
+  * Deprecate leading `:` in `name` for `app.param(name, fn)`
+  * Deprecate `req.param()` -- use `req.params`, `req.body`, or `req.query` instead
+  * Deprecate `app.param(fn)`
+  * Fix `OPTIONS` responses to include the `HEAD` method properly
+  * Fix `res.sendFile` not always detecting aborted connection
+  * Match routes iteratively to prevent stack overflows
+  * deps: accepts@~1.2.2
+    - deps: mime-types@~2.0.7
+    - deps: negotiator@0.5.0
+  * deps: send@0.11.0
+    - deps: debug@~2.1.1
+    - deps: etag@~1.5.1
+    - deps: ms@0.7.0
+    - deps: on-finished@~2.2.0
+  * deps: serve-static@~1.8.0
+    - deps: send@0.11.0
+
 4.10.8 / 2015-01-13
 ===================
 
@@ -636,6 +657,37 @@
    - `app.route()` - Proxy to the app's `Router#route()` method to create a new route
    - Router & Route - public API
 
+3.19.0 / 2015-01-09
+===================
+
+  * Fix `OPTIONS` responses to include the `HEAD` method property
+  * Use `readline` for prompt in `express(1)`
+  * deps: commander@2.6.0
+  * deps: connect@2.28.1
+    - deps: body-parser@~1.10.1
+    - deps: compression@~1.3.0
+    - deps: connect-timeout@~1.5.0
+    - deps: csurf@~1.6.4
+    - deps: debug@~2.1.1
+    - deps: errorhandler@~1.3.2
+    - deps: express-session@~1.10.1
+    - deps: finalhandler@0.3.3
+    - deps: method-override@~2.3.1
+    - deps: morgan@~1.5.1
+    - deps: serve-favicon@~2.2.0
+    - deps: serve-index@~1.6.0
+    - deps: serve-static@~1.8.0
+    - deps: type-is@~1.5.5
+  * deps: debug@~2.1.1
+  * deps: methods@~1.1.1
+  * deps: proxy-addr@~1.0.5
+    - deps: ipaddr.js@0.1.6
+  * deps: send@0.11.0
+    - deps: debug@~2.1.1
+    - deps: etag@~1.5.1
+    - deps: ms@0.7.0
+    - deps: on-finished@~2.2.0
+
 3.18.6 / 2014-12-12
 ===================
 
diff --git a/lib/request.js b/lib/request.js
index 36ce193868..5cd3900ee0 100644
--- a/lib/request.js
+++ b/lib/request.js
@@ -200,13 +200,20 @@ req.range = function(size){
  * @api public
  */
 
-req.param = function(name, defaultValue){
+req.param = function param(name, defaultValue) {
   var params = this.params || {};
   var body = this.body || {};
   var query = this.query || {};
+
+  var args = arguments.length === 1
+    ? 'name'
+    : 'name, default';
+  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
+
   if (null != params[name] && params.hasOwnProperty(name)) return params[name];
   if (null != body[name]) return body[name];
   if (null != query[name]) return query[name];
+
   return defaultValue;
 };
 
diff --git a/lib/response.js b/lib/response.js
index 87d1dc5d0a..50c313eb46 100644
--- a/lib/response.js
+++ b/lib/response.js
@@ -636,6 +636,35 @@ res.attachment = function attachment(filename) {
   return this;
 };
 
+/**
+ * Append additional header `field` with value `val`.
+ *
+ * Example:
+ *
+ *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
+ *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
+ *    res.append('Warning', '199 Miscellaneous warning');
+ *
+ * @param {String} field
+ * @param {String|Array} val
+ * @return {ServerResponse} for chaining
+ * @api public
+ */
+
+res.append = function append(field, val) {
+  var prev = this.get(field);
+  var value = val;
+
+  if (prev) {
+    // concat the new and prev vals
+    value = Array.isArray(prev) ? prev.concat(val)
+      : Array.isArray(val) ? [prev].concat(val)
+      : [prev, val];
+  }
+
+  return this.set(field, value);
+};
+
 /**
  * Set header `field` to `val`, or pass
  * an object of header fields.
@@ -907,7 +936,17 @@ res.render = function(view, options, fn){
 // pipe the send file stream
 function sendfile(res, file, options, callback) {
   var done = false;
-  var streaming = false;
+  var streaming;
+
+  // request aborted
+  function onaborted() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('Request aborted');
+    err.code = 'ECONNABORT';
+    callback(err);
+  }
 
   // directory
   function ondirectory() {
@@ -921,7 +960,6 @@ function sendfile(res, file, options, callback) {
 
   // errors
   function onerror(err) {
-    if (!err) return;
     if (done) return;
     done = true;
     callback(err);
@@ -936,7 +974,7 @@ function sendfile(res, file, options, callback) {
 
   // file
   function onfile() {
-    onFinished(res, onfinish);
+    streaming = false;
   }
 
   // finished
@@ -945,18 +983,14 @@ function sendfile(res, file, options, callback) {
     if (done) return;
 
     setImmediate(function () {
-      if (done) return;
-      done = true;
-
-      if (!streaming) {
-        callback();
+      if (streaming !== false && !done) {
+        onaborted();
         return;
       }
 
-      // response finished before end of file
-      var err = new Error('Request aborted');
-      err.code = 'ECONNABORT';
-      callback(err);
+      if (done) return;
+      done = true;
+      callback();
     });
   }
 
@@ -970,7 +1004,7 @@ function sendfile(res, file, options, callback) {
   file.on('error', onerror);
   file.on('file', onfile);
   file.on('stream', onstream);
-  onFinished(res, onerror);
+  onFinished(res, onfinish);
 
   if (options.headers) {
     // set headers on successful transfer
diff --git a/lib/router/index.js b/lib/router/index.js
index 37e3083fb7..209f881b1e 100644
--- a/lib/router/index.js
+++ b/lib/router/index.js
@@ -8,6 +8,7 @@ var Layer = require('./layer');
 var methods = require('methods');
 var mixin = require('utils-merge');
 var debug = require('debug')('express:router');
+var deprecate = require('depd')('express');
 var parseUrl = require('parseurl');
 var utils = require('../utils');
 
@@ -81,9 +82,10 @@ var proto = module.exports = function(options) {
  * @api public
  */
 
-proto.param = function(name, fn){
+proto.param = function param(name, fn) {
   // param logic
-  if ('function' == typeof name) {
+  if (typeof name === 'function') {
+    deprecate('router.param(fn): Refactor to use path params');
     this._params.push(name);
     return;
   }
@@ -94,6 +96,7 @@ proto.param = function(name, fn){
   var ret;
 
   if (name[0] === ':') {
+    deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');
     name = name.substr(1);
   }
 
@@ -167,74 +170,104 @@ proto.handle = function(req, res, done) {
       ? null
       : err;
 
-    var layer = stack[idx++];
-
+    // remove added slash
     if (slashAdded) {
       req.url = req.url.substr(1);
       slashAdded = false;
     }
 
+    // restore altered req.url
     if (removed.length !== 0) {
       req.baseUrl = parentUrl;
       req.url = protohost + removed + req.url.substr(protohost.length);
       removed = '';
     }
 
-    if (!layer) {
+    // no more matching layers
+    if (idx >= stack.length) {
       setImmediate(done, layerError);
       return;
     }
 
-    self.match_layer(layer, req, res, function (err, path) {
-      if (err || path === undefined) {
-        return next(layerError || err);
+    // get pathname of request
+    var path = getPathname(req);
+
+    if (path == null) {
+      return done(layerError);
+    }
+
+    // find next matching layer
+    var layer;
+    var match;
+    var route;
+
+    while (match !== true && idx < stack.length) {
+      layer = stack[idx++];
+      match = matchLayer(layer, path);
+      route = layer.route;
+
+      if (typeof match !== 'boolean') {
+        // hold on to layerError
+        layerError = layerError || match;
       }
 
-      // route object and not middleware
-      var route = layer.route;
+      if (match !== true) {
+        continue;
+      }
 
-      // if final route, then we support options
-      if (route) {
-        // we don't run any routes with error first
-        if (layerError) {
-          return next(layerError);
-        }
-
-        var method = req.method;
-        var has_method = route._handles_method(method);
-
-        // build up automatic options response
-        if (!has_method && method === 'OPTIONS') {
-          appendMethods(options, route._options());
-        }
-
-        // don't even bother
-        if (!has_method && method !== 'HEAD') {
-          return next();
-        }
-
-        // we can now dispatch to the route
-        req.route = route;
+      if (!route) {
+        // process non-route handlers normally
+        continue;
       }
 
-      // Capture one-time layer values
-      req.params = self.mergeParams
-        ? mergeParams(layer.params, parentParams)
-        : layer.params;
-      var layerPath = layer.path;
+      if (layerError) {
+        // routes do not match with a pending error
+        match = false;
+        continue;
+      }
 
-      // this should be done for the layer
-      self.process_params(layer, paramcalled, req, res, function (err) {
-        if (err) {
-          return next(layerError || err);
-        }
+      var method = req.method;
+      var has_method = route._handles_method(method);
 
-        if (route) {
-          return layer.handle_request(req, res, next);
-        }
+      // build up automatic options response
+      if (!has_method && method === 'OPTIONS') {
+        appendMethods(options, route._options());
+      }
+
+      // don't even bother matching route
+      if (!has_method && method !== 'HEAD') {
+        match = false;
+        continue;
+      }
+    }
 
-        trim_prefix(layer, layerError, layerPath, path);
-      });
+    // no match
+    if (match !== true) {
+      return done(layerError);
+    }
+
+    // store route for dispatch on change
+    if (route) {
+      req.route = route;
+    }
+
+    // Capture one-time layer values
+    req.params = self.mergeParams
+      ? mergeParams(layer.params, parentParams)
+      : layer.params;
+    var layerPath = layer.path;
+
+    // this should be done for the layer
+    self.process_params(layer, paramcalled, req, res, function (err) {
+      if (err) {
+        return next(layerError || err);
+      }
+
+      if (route) {
+        return layer.handle_request(req, res, next);
+      }
+
+      trim_prefix(layer, layerError, layerPath, path);
     });
   }
 
@@ -271,29 +304,6 @@ proto.handle = function(req, res, done) {
   }
 };
 
-/**
- * Match request to a layer.
- *
- * @api private
- */
-
-proto.match_layer = function match_layer(layer, req, res, done) {
-  var error = null;
-  var path;
-
-  try {
-    path = parseUrl(req).pathname;
-
-    if (!layer.match(path)) {
-      path = undefined;
-    }
-  } catch (err) {
-    error = err;
-  }
-
-  done(error, path);
-};
-
 /**
  * Process any parameters for the layer.
  *
@@ -500,6 +510,15 @@ function appendMethods(list, addition) {
   }
 }
 
+// get pathname of request
+function getPathname(req) {
+  try {
+    return parseUrl(req).pathname;
+  } catch (err) {
+    return undefined;
+  }
+}
+
 // get type for error message
 function gettype(obj) {
   var type = typeof obj;
@@ -513,6 +532,22 @@ function gettype(obj) {
     .replace(objectRegExp, '$1');
 }
 
+/**
+ * Match path to a layer.
+ *
+ * @param {Layer} layer
+ * @param {string} path
+ * @private
+ */
+
+function matchLayer(layer, path) {
+  try {
+    return layer.match(path);
+  } catch (err) {
+    return err;
+  }
+}
+
 // merge params with parent params
 function mergeParams(params, parent) {
   if (typeof parent !== 'object' || !parent) {
diff --git a/lib/router/route.js b/lib/router/route.js
index 903d1a5e21..6213b82170 100644
--- a/lib/router/route.js
+++ b/lib/router/route.js
@@ -52,10 +52,20 @@ Route.prototype._handles_method = function _handles_method(method) {
  * @api private
  */
 
-Route.prototype._options = function(){
-  return Object.keys(this.methods).map(function(method) {
-    return method.toUpperCase();
-  });
+Route.prototype._options = function _options() {
+  var methods = Object.keys(this.methods);
+
+  // append automatic head
+  if (this.methods.get && !this.methods.head) {
+    methods.push('head');
+  }
+
+  for (var i = 0; i < methods.length; i++) {
+    // make upper case
+    methods[i] = methods[i].toUpperCase();
+  }
+
+  return methods;
 };
 
 /**
diff --git a/package.json b/package.json
index 7eba07aec6..c8ae6f04ae 100644
--- a/package.json
+++ b/package.json
@@ -27,7 +27,7 @@
     "api"
   ],
   "dependencies": {
-    "accepts": "~1.1.4",
+    "accepts": "~1.2.2",
     "content-disposition": "0.5.0",
     "cookie-signature": "1.0.5",
     "debug": "~2.1.1",
@@ -37,15 +37,15 @@
     "finalhandler": "0.3.3",
     "fresh": "0.2.4",
     "media-typer": "0.3.0",
-    "methods": "1.1.1",
+    "methods": "~1.1.1",
     "on-finished": "~2.2.0",
     "parseurl": "~1.3.0",
     "path-to-regexp": "0.1.3",
     "proxy-addr": "~1.0.5",
     "qs": "2.3.3",
     "range-parser": "~1.0.2",
-    "send": "0.10.1",
-    "serve-static": "~1.7.2",
+    "send": "0.11.0",
+    "serve-static": "~1.8.0",
     "type-is": "~1.5.5",
     "vary": "~1.0.0",
     "cookie": "0.1.2",
@@ -54,18 +54,18 @@
   },
   "devDependencies": {
     "after": "0.8.1",
+    "ejs": "2.0.8",
     "istanbul": "0.3.5",
-    "mocha": "~2.0.0",
-    "should": "~4.3.1",
+    "mocha": "~2.1.0",
+    "should": "~4.4.4",
     "supertest": "~0.15.0",
-    "ejs": "~1.0.0",
     "marked": "0.3.2",
     "hjs": "~0.0.6",
     "body-parser": "~1.10.1",
     "connect-redis": "~2.1.0",
     "cookie-parser": "~1.3.3",
-    "express-session": "~1.9.2",
-    "jade": "~1.8.2",
+    "express-session": "~1.10.1",
+    "jade": "~1.9.0",
     "method-override": "~2.3.1",
     "morgan": "~1.5.1",
     "multiparty": "~4.1.0",