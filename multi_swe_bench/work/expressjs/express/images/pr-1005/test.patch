diff --git a/test/express.test.js b/test/express.test.js
index 36b4804bd5..b3227bb370 100644
--- a/test/express.test.js
+++ b/test/express.test.js
@@ -3,7 +3,7 @@
  * Module dependencies.
  */
 
-var express = require('express')
+var express = require('../')
   , connect = require('connect')
   , assert = require('assert')
   , should = require('should')
@@ -37,22 +37,22 @@ module.exports = {
   
   'test basic server': function(){
     var server = express.createServer();
-
+  
     server.get('/', function(req, res){
       server.set('env').should.equal('test');
       res.writeHead(200, {});
       res.end('wahoo');
     });
-
+  
     server.put('/user/:id', function(req, res){
       res.writeHead(200, {});
       res.end('updated user ' + req.params.id)
     });
-
+  
     server.del('/something', function(req, res){
       res.send('Destroyed');
     });
-
+  
     server.delete('/something/else', function(req, res){
       res.send('Destroyed');
     });
@@ -61,7 +61,7 @@ module.exports = {
       req.staff = { id: req.params.id };
       next();
     });
-
+  
     server.get('/staff/:id', function(req, res){
       res.send('GET Staff ' + req.staff.id);
     });
@@ -73,7 +73,7 @@ module.exports = {
     server.all('*', function(req, res){
       res.send('requested ' + req.url);
     });
-
+  
     assert.response(server,
       { url: '/' },
       { body: 'wahoo' });
@@ -81,15 +81,15 @@ module.exports = {
     assert.response(server,
       { url: '/user/12', method: 'PUT' },
       { body: 'updated user 12' });
-
+  
     assert.response(server,
       { url: '/something', method: 'DELETE' },
       { body: 'Destroyed' });
-
+  
     assert.response(server,
       { url: '/something/else', method: 'DELETE' },
       { body: 'Destroyed' });
-
+  
     assert.response(server,
       { url: '/staff/12' },
       { body: 'GET Staff 12' });
@@ -105,17 +105,17 @@ module.exports = {
   
   'test constructor middleware': function(beforeExit){
       var calls = [];
-
+  
       function one(req, res, next){
         calls.push('one');
         next();
       }
-
+  
       function two(req, res, next){
         calls.push('two');
         next();
       }
-
+  
       var app = express.createServer(one, two);
       app.get('/', function(req, res){
         res.writeHead(200, {});
@@ -144,14 +144,14 @@ module.exports = {
     assert.response(app,
       { url: '/' },
       { body: 'Internal Server Error' });
-
+  
     // Custom handler
     var app = express.createServer();
     
     app.error(function(err, req, res){
       res.send('Shit: ' + err.message, 500);
     });
-
+  
     app.get('/', function(req, res, next){
       next(new Error('broken'));
     });
@@ -174,7 +174,7 @@ module.exports = {
     app.error(function(err, req, res, next){
       res.send(err.message, 500);
     });
-
+  
     app.get('/', function(req, res, next){
       throw new Error('broken');
     });
@@ -220,7 +220,7 @@ module.exports = {
   
   'test #use()': function(){
     var app = express.createServer();
-
+  
     app.get('/users', function(req, res, next){
       next(new Error('fail!!'));
     });
@@ -244,13 +244,13 @@ module.exports = {
     }).configure('production', function(){
       calls.push('production');
     });
-
+  
     should.equal(ret, server, 'Test #configure() returns server for chaining');
-
+  
     assert.response(server,
         { url: '/' },
         { body: 'Cannot GET /' });
-
+  
     beforeExit(function(){
       calls.should.eql(['any', 'dev']);
     });
@@ -258,7 +258,7 @@ module.exports = {
   
   'test #configure() immediate call': function(){
     var app = express.createServer();
-
+  
     app.configure(function(){
       app.use(connect.bodyParser());
     });
@@ -266,18 +266,17 @@ module.exports = {
     app.post('/', function(req, res){
       res.send(req.param('name') || 'nope');
     });
-
+  
     assert.response(app,
       { url: '/', method: 'POST', data: 'name=tj', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }},
       { body: 'tj' });
   },
-
+    
   'test #configure() precedence': function(){
     var app = express.createServer();
-
+  
     app.configure(function(){
       app.use(function(req, res, next){
-        res.writeHead(200, {});
         res.write('first');
         next();
       });
@@ -291,28 +290,28 @@ module.exports = {
       res.write(' route ');
       next();
     });
-
+  
     assert.response(app,
       { url: '/' },
       { body: 'first route last' });
   },
-
+  
   'test #configure() multiple envs': function(){
     var app = express.createServer();
     app.set('env', 'prod');
     var calls = [];
-
+  
     app.configure('stage', 'prod', function(){
       calls.push('stage/prod');
     });
-
+  
     app.configure('prod', function(){
       calls.push('prod');
     });
-
+  
     calls.should.eql(['stage/prod', 'prod']);
   },
-
+  
   'test #set()': function(){
     var app = express.createServer();
     var ret = app.set('title', 'My App').set('something', 'else');
@@ -320,7 +319,7 @@ module.exports = {
     app.set('title').should.equal('My App');
     app.set('something').should.equal('else');
   },
-
+  
   'test .settings': function(){
     var app = express.createServer();
     app.set('title', 'My App');
@@ -352,56 +351,67 @@ module.exports = {
     var app = express.createServer();
     
     app.use(connect.bodyParser());
-
+  
     assert.equal(2, app.stack.length);
     
     app.post('/', function(req, res){
       res.send(JSON.stringify(req.body || ''));
     });
     app.get('/', function(){
-
+  
     });
     assert.equal(3, app.stack.length);
-
+  
     assert.response(app,
       { url: '/', method: 'POST', data: 'name=tj', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }},
       { body: '{"name":"tj"}' });
   },
   
+  'test "basepath" setting': function(){
+    var app = express.createServer();
+  
+    app.set('basepath', '/shop');
+  
+    app.get('/redirect', function(req, res){
+      res.redirect('/cart');
+    });
+  
+    assert.response(app,
+      { url: '/redirect', headers: { Host: 'foo.com' }},
+      { headers: { Location: 'http://foo.com/shop/cart' }});
+  },
+  
   'test mounting': function(){
     var called
       , app = express.createServer()
       , blog = express.createServer()
       , map = express.createServer()
       , reg = connect.createServer();
-
-    map.set('home', '/map');
     
     map.mounted(function(parent){
       called = true;
       assert.equal(this, map, 'mounted() is not in context of the child app');
       assert.equal(app, parent, 'mounted() was not called with parent app');
     });
-
+  
     reg.use(function(req, res){ res.end('hey'); });
     app.use('/regular', reg);
-
+  
     app.use('/blog', blog);
     app.use('/contact', map);
     blog.route.should.equal('/blog');
     map.route.should.equal('/contact');
     should.equal(true, called);
-
+  
     app.set("test", "parent setting");
     blog.set('test').should.equal('parent setting');
     
     app.get('/', function(req, res){
-      app.set('home').should.equal('/');
-      blog.set('home').should.equal('/blog');
-      map.set('home').should.equal('/contact/map');
+      blog.set('basepath').should.equal('/blog');
+      map.set('basepath').should.equal('/contact');
       res.send('main app');
     });
-
+  
     blog.get('/', function(req, res){
       res.send('blog index');
     });
@@ -426,26 +436,26 @@ module.exports = {
       { url: '/regular' },
       { body: 'hey' });
   },
-
+  
   'test .app property after returning control to parent': function() {
     var app = express.createServer()
       , blog = express.createServer();
-
+  
     // Mounted servers did not restore `req.app` and `res.app` when
     // passing control back to parent via `out()` in `#handle()`.
-
+  
     blog.get('/', function(req, res, next){
       req.app.should.equal(blog);
       res.app.should.equal(blog);
       next();
     });
-
+  
     app.use(blog);
-
+  
     app.use(function(req, res, next) {
       res.send((res.app === app) ? 'restored' : 'not-restored');
     });
-
+  
     assert.response(app,
       { url: '/' },
       { body: 'restored' }
@@ -456,23 +466,23 @@ module.exports = {
     function handle(req, res) {
       res.send('got ' + req.string);
     }
-
+  
     var app = express.createServer();
-
+  
     app.get('/', function(req, res, next){
       req.string = '/';
       next();
     }, handle);
-
+  
     app.get('/another', function(req, res, next){
       req.string = '/another';
       next();
     }, handle);
-
+  
     assert.response(app,
       { url: '/' },
       { body: 'got /' });
-
+  
     assert.response(app,
       { url: '/another' },
       { body: 'got /another' });
@@ -480,11 +490,11 @@ module.exports = {
   
   'invalid chars': function(){
     var app = express.createServer();
-
+  
     app.get('/:name', function(req, res, next){
       res.send('invalid');
     });
-
+  
     assert.response(app,
       { url: '/%a0' },
       { status: 500 });
diff --git a/test/fixtures/magic.jade b/test/fixtures/magic.jade
index f99a8d456f..b81d7ad423 100644
--- a/test/fixtures/magic.jade
+++ b/test/fixtures/magic.jade
@@ -3,4 +3,4 @@
 - else if (lastInCollection)
   li.last= word
 - else
-  li(class: 'word-' + indexInCollection)= word
\ No newline at end of file
+  li(class='word-' + indexInCollection)= word
\ No newline at end of file
diff --git a/test/fixtures/person.jade b/test/fixtures/person.jade
deleted file mode 100644
index 81a0597a4e..0000000000
--- a/test/fixtures/person.jade
+++ /dev/null
@@ -1,1 +0,0 @@
-p #{label} #{this.name}
\ No newline at end of file
diff --git a/test/request.test.js b/test/request.test.js
index 82e671fc4b..f53f229931 100644
--- a/test/request.test.js
+++ b/test/request.test.js
@@ -3,12 +3,24 @@
  * Module dependencies.
  */
 
-var express = require('express')
+var express = require('../')
   , connect = require('connect')
   , assert = require('assert')
   , should = require('should');
 
 module.exports = {
+  'test #path': function(){
+    var app = express.createServer();
+
+    app.get('/search', function(req, res){
+      res.send(req.path);
+    });
+
+    assert.response(app,
+      { url: '/search?q=tobi' },
+      { body: '/search' });
+  },
+
   'test #isXMLHttpRequest': function(){
     var app = express.createServer();
 
@@ -155,12 +167,15 @@ module.exports = {
       req.flash('info').should.eql(['one']);
 
       req.flash('info', 'Email _sent_.');
-      req.flash('info', '<script>');
-      req.flash('info').should.eql(['Email <em>sent</em>.', '&lt;script&gt;']);
+      req.flash('info', '<em>%s</em>', 'html');
+      req.flash('info').should.eql(['Email <em>sent</em>.', '<em>html</em>']);
       
       req.flash('info', 'Welcome _%s_ to %s', 'TJ', 'something');
       req.flash('info').should.eql(['Welcome <em>TJ</em> to something']);
 
+      req.flash('info', 'Welcome %s', '<script>');
+      req.flash('info').should.eql(['Welcome &lt;script&gt;']);
+
       req.flash('error', 'Foo %u', 'bar');
       req.flash('error').should.eql(['Foo BAR']);
 
diff --git a/test/response.test.js b/test/response.test.js
index 206ac9bc6f..4d96b76fa1 100644
--- a/test/response.test.js
+++ b/test/response.test.js
@@ -3,7 +3,7 @@
  * Module dependencies.
  */
 
-var express = require('express')
+var express = require('../')
   , Stream = require('stream').Stream
   , assert = require('assert')
   , should = require('should');
@@ -68,8 +68,8 @@ module.exports = {
     });
 
     app.get('/json', function(req, res){
-      res.header('X-Foo', 'bar');
-      res.send({ foo: 'bar' }, { 'X-Foo': 'baz' }, 201);
+      res.header('X-Foo', 'bar')
+        .send({ foo: 'bar' }, { 'X-Foo': 'baz' }, 201);
     });
     
     app.get('/text', function(req, res){
@@ -97,7 +97,11 @@ module.exports = {
     app.get('/noargs', function(req, res, next){
       res.send();
     });
-    
+
+    app.get('/no-content', function(req, res, next){
+      res.send(204);
+    });
+
     app.get('/undefined', function(req, res, next){
       res.send(undefined);
     });
@@ -162,6 +166,13 @@ module.exports = {
           'Content-Type': 'application/octet-stream'
         , 'Content-Length': '6'
       }});
+
+    assert.response(app,
+      { url: '/no-content' },
+      { status: 204 }, function(res){
+        assert.equal(undefined, res.headers['content-type']);
+        assert.equal(undefined, res.headers['content-length']);
+      });
   
     assert.response(app,
       { url: '/noargs' },
@@ -321,13 +332,13 @@ module.exports = {
     var app = express.createServer()
       , app2 = express.createServer();
     
-    app2.set('home', '/blog');
+    app2.set('basepath', '/blog');
 
     app2.redirect('google', 'http://google.com');
 
     app2.redirect('blog', function(req, res){
       return req.params.id
-        ? '/user/' + req.params.id + '/blog'
+        ? '/user/' + req.params.id + '/posts'
         : null;
     });
       
@@ -368,59 +379,63 @@ module.exports = {
       res.redirect('blog');
     });
 
+    assert.response(app,
+      { url: '/home', method: 'HEAD' },
+      { body: '' });
+
     assert.response(app,
       { url: '/html', headers: { Accept: 'text/html,text/plain', Host: 'foo.com' }},
       { body: '<p>Moved Temporarily. Redirecting to <a href="http://google.com">http://google.com</a></p>' });
-
+    
     assert.response(app,
       { url: '/', headers: { Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Permanently. Redirecting to http://google.com'
       , status: 301, headers: { Location: 'http://google.com' }});
-
+    
     assert.response(app,
       { url: '/back', headers: { Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Temporarily. Redirecting to http://foo.com/'
       , status: 302, headers: { Location: 'http://foo.com/', 'Content-Type': 'text/plain' }});
-
+    
     assert.response(app,
       { url: '/back', headers: { Referer: '/foo', Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Temporarily. Redirecting to http://foo.com/foo'
       , status: 302, headers: { Location: 'http://foo.com/foo' }});
-
+    
     assert.response(app,
       { url: '/back', headers: { Referrer: '/foo', Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Temporarily. Redirecting to http://foo.com/foo'
       , status: 302, headers: { Location: 'http://foo.com/foo' }});
-
+    
     assert.response(app,
       { url: '/home', headers: { Accept: 'text/plain', Host: 'foo.com' } },
       { body: 'Moved Temporarily. Redirecting to http://foo.com/'
       , status: 302, headers: { Location: 'http://foo.com/' }});
-
+    
     assert.response(app2,
       { url: '/', headers: { Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Permanently. Redirecting to http://google.com'
       , status: 301, headers: { Location: 'http://google.com' }});
-
+    
     assert.response(app2,
       { url: '/back', headers: { Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Temporarily. Redirecting to http://foo.com/blog'
       , status: 302, headers: { Location: 'http://foo.com/blog' }});
-
+    
     assert.response(app2,
       { url: '/home', headers: { Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Temporarily. Redirecting to http://foo.com/blog'
       , status: 302, headers: { Location: 'http://foo.com/blog' }});
-
+    
     assert.response(app2,
       { url: '/google', headers: { Accept: 'text/plain', Host: 'foo.com' }},
       { body: 'Moved Temporarily. Redirecting to http://google.com'
       , status: 302, headers: { Location: 'http://google.com' }});
-
+    
     assert.response(app2,
       { url: '/user/12', headers: { Accept: 'text/plain', Host: 'foo.com' }},
-      { body: 'Moved Temporarily. Redirecting to http://foo.com/user/12/blog'
-      , status: 302, headers: { Location: 'http://foo.com/user/12/blog', 'X-Foo': 'bar' }});
+      { body: 'Moved Temporarily. Redirecting to http://foo.com/blog/user/12/posts'
+      , status: 302, headers: { Location: 'http://foo.com/blog/user/12/posts', 'X-Foo': 'bar' }});
   },
 
   'test #redirect() when mounted': function(){
@@ -495,10 +510,6 @@ module.exports = {
       });
     });
 
-    assert.response(app,
-      { url: '/forum' },
-      { body: 'got an error' });
-
     assert.response(app,
       { url: '/does-not-exist' },
       { body: 'got an error' });
@@ -656,7 +667,7 @@ module.exports = {
   'test #cookie() path default': function(){
     var app = express.createServer();
 
-    app.set('home', '/foo');
+    app.set('basepath', '/foo');
 
     app.get('/', function(req, res){
       res.cookie('rememberme', 'yes', { expires: new Date(1), httpOnly: true });
@@ -675,11 +686,11 @@ module.exports = {
   'test #cookie() explicit path': function(){
     var app = express.createServer();
 
-    app.set('/home', '/foo');
+    app.set('/basepath', '/foo');
 
     app.get('/', function(req, res){
       res.cookie('rememberme', 'yes', { path: '/', expires: new Date(1), httpOnly: true });
-      res.cookie('something', 'else');
+      res.cookie('something', 'else', { path: '/' });
       res.redirect('/');
     });
 
@@ -694,7 +705,7 @@ module.exports = {
   'test #cookie() null path': function(){
     var app = express.createServer();
 
-    app.set('/home', '/foo');
+    app.set('/basepath', '/foo');
 
     app.get('/', function(req, res){
       res.cookie('rememberme', 'yes', { path: null, expires: new Date(1), httpOnly: true });
@@ -713,7 +724,7 @@ module.exports = {
   'test #clearCookie() default path': function(){
     var app = express.createServer();
 
-    app.set('home', '/foo');
+    app.set('basepath', '/foo');
 
     app.get('/', function(req, res){
       res.clearCookie('rememberme');
@@ -731,7 +742,7 @@ module.exports = {
   'test #clearCookie() explicit path': function(){
     var app = express.createServer();
 
-    app.set('home', '/bar');
+    app.set('basepath', '/bar');
 
     app.get('/', function(req, res){
       res.clearCookie('rememberme', { path: '/foo' });
diff --git a/test/router.test.js b/test/router.test.js
index 489e261c49..4f0021c50c 100644
--- a/test/router.test.js
+++ b/test/router.test.js
@@ -3,7 +3,7 @@
  * Module dependencies.
  */
 
-var express = require('express')
+var express = require('../')
   , connect = require('connect')
   , assert = require('assert')
   , should = require('should')
@@ -74,6 +74,245 @@ module.exports = {
     });
   },
 
+  'test app.param() multiple mapping functions': function(){
+    var app = express.createServer();
+
+    app.param(function(name, fn){
+      if (fn.length < 3) {
+        return function(req, res, next, val){
+          val = req.params[name] = fn(val);
+          if (false === val) {
+            next('route');
+          } else {
+            next();
+          }
+        };
+      }
+    });
+
+    app.param(function(name, range){
+      if (!~String(range).indexOf('..')) return;
+      var parts = range.split('..')
+        , from = parseInt(parts.shift())
+        , to = parseInt(parts.shift());
+
+      return function(req, res, next, val){
+        if (val < from || val > to) return next('route');
+        next();
+      }
+    });
+
+    app.param('user', Number);
+    app.param('user', '0..5');
+
+    app.get('/user/:user', function(req, res){
+      res.json(req.params.user);
+    });
+
+    assert.response(app,
+      { url: '/user/3' },
+      { body: '3' });
+
+    assert.response(app,
+      { url: '/user/6' },
+      { status: 404 });
+  },
+
+  'test app.param() name passing': function(){
+    var app = express.createServer();
+    
+    app.param(function(name, fn){
+      if (fn.length < 3) {
+        return function(req, res, next, val){
+          val = req.params[name] = fn(val);
+          if (false === val) {
+            next('route');
+          } else {
+            next();
+          }
+        };
+      }
+    });
+
+    function within(a, b) {
+      return function(req, res, next, val, name){
+        if (val < a || val > b) {
+          return next(new Error(name + ' should be within ' + a + '..' + b));
+        }
+        next();
+      }
+    }
+
+    app.param('user', Number);
+    app.param('user', within(0, 5));
+
+    app.get('/user/:user', function(req, res){
+      res.json(req.params.user);
+    });
+
+    app.use(function(err, req, res, next){
+      res.json({ error: err.message });
+    });
+
+    assert.response(app,
+      { url: '/user/0' },
+      { body: '0' });
+
+    assert.response(app,
+      { url: '/user/6' },
+      { body: '{"error":"user should be within 0..5"}' });
+  },
+
+  'test app.param() multiple callbacks and array of params': function(){
+    var app = express.createServer();
+    var users = [{ name: 'tj' }];
+    var pets = [['tobi', 'loki', 'jane', 'manny', 'luna']];
+
+    function loadUser(req, res, next, id) {
+      req.user = users[id];
+      next();
+    }
+
+    function loadUserPets(req, res, next, id) {
+      req.user.pets = pets[id];
+      next();
+    }
+
+    app.param(['user_id', 'user'], loadUser, loadUserPets);
+
+    app.get('/user/:user_id', function(req, res){
+      res.send(req.user);
+    });
+
+    app.get('/account/:user', function(req, res){
+      res.send(req.user);
+    });
+
+    assert.response(app,
+      { url: '/account/0' },
+      { body: '{"name":"tj","pets":["tobi","loki","jane","manny","luna"]}' });
+
+    assert.response(app,
+      { url: '/user/0' },
+      { body: '{"name":"tj","pets":["tobi","loki","jane","manny","luna"]}' });
+  },
+
+  'test app.param() multiple callbacks': function(){
+    var app = express.createServer();
+    var users = [{ name: 'tj' }];
+    var pets = [['tobi', 'loki', 'jane', 'manny', 'luna']];
+
+    function loadUser(req, res, next, id) {
+      req.user = users[id];
+      next();
+    }
+
+    function loadUserPets(req, res, next, id) {
+      req.user.pets = pets[id];
+      next();
+    }
+
+    app.param('user_id', loadUser, loadUserPets);
+
+    app.get('/user/:user_id', function(req, res){
+      res.send(req.user);
+    });
+
+    assert.response(app,
+      { url: '/user/0' },
+      { body: '{"name":"tj","pets":["tobi","loki","jane","manny","luna"]}' });
+  },
+
+  'test app.param() multiple calls with error': function(){
+    var app = express.createServer();
+
+    var commits = ['foo', 'bar', 'baz'];
+
+    app.param('commit', function(req, res, next, id){
+      req.commit = parseInt(id);
+      if (isNaN(req.commit)) return next('route');
+      next();
+    });
+
+    app.param('commit', function(req, res, next, id){
+      req.commit = commits[req.commit];
+      next(new Error('failed'));
+    });
+
+    app.get('/commit/:commit', function(req, res){
+      res.send(req.commit);
+    });
+
+    assert.response(app,
+      { url: '/commit/0' },
+      { status: 500 });
+  },
+
+  'test app.param() multiple calls': function(){
+    var app = express.createServer();
+
+    var commits = ['foo', 'bar', 'baz'];
+
+    app.param('commit', function(req, res, next, id){
+      req.commit = parseInt(id);
+      if (isNaN(req.commit)) return next('route');
+      next();
+    });
+
+    app.param('commit', function(req, res, next, id){
+      req.commit = commits[req.commit];
+      next();
+    });
+
+    app.get('/commit/:commit', function(req, res){
+      res.send(req.commit);
+    });
+
+    assert.response(app,
+      { url: '/commit/0' },
+      { body: 'foo' });
+
+    assert.response(app,
+      { url: '/commit/0x01' },
+      { body: 'bar' });
+
+    assert.response(app,
+      { url: '/commit/asdf' },
+      { status: 404 });
+  },
+
+  'test app.param(fn)': function(){
+    var app = express.createServer();
+    
+    app.param(function(name, fn){
+      if (fn instanceof RegExp) {
+        return function(req, res, next, val){
+          var captures;
+          if (captures = fn.exec(String(val))) {
+            req.params[name] = captures[1];
+            next();
+          } else {
+            next('route');
+          }
+        }
+      }
+    });
+
+    app.param('commit', /^(\d+)$/);
+
+    app.get('/commit/:commit', function(req, res){
+      res.send(req.params.commit);
+    });
+
+    assert.response(app,
+      { url: '/commit/12' },
+      { body: '12' });
+
+    assert.response(app,
+      { url: '/commit/asdf' },
+      { status: 404 });
+  },
+
   'test precedence': function(){
     var app = express.createServer();
 
@@ -138,6 +377,50 @@ module.exports = {
       { body: 'Cannot GET /user/ab' });
   },
   
+  'test named capture group after dot': function(){
+    var app = express.createServer();
+  
+    app.get('/user/:name.:format?', function(req, res){
+      res.send(req.params.name + ' - ' + (req.params.format || ''));
+    });
+    
+    assert.response(app,
+      { url: '/user/foo' },
+      { body: 'foo - ' });
+    
+    assert.response(app,
+      { url: '/user/foo.json' },
+      { body: 'foo - json' });
+    
+    assert.response(app,
+      { url: '/user/foo.bar.json' },
+      { body: 'foo.bar - json' });
+  },
+  
+  'test optional * value': function(){
+    var app = express.createServer();
+  
+    app.get('/admin*', function(req, res){
+      res.send(req.params[0]);
+    });
+
+    app.get('/file/*.*', function(req, res){
+      res.send(req.params[0] + ' - ' + req.params[1]);
+    });
+
+    assert.response(app,
+      { url: '/file/some.foo.bar' },
+      { body: 'some.foo - bar' });
+
+    assert.response(app,
+      { url: '/admin', },
+      { body: '', status: 200 });
+
+    assert.response(app,
+      { url: '/adminify', },
+      { body: 'ify', status: 200 });
+  },
+  
   'test app.param()': function(){
     var app = express.createServer();
 
@@ -225,7 +508,7 @@ module.exports = {
 
     var route = app.get('/user/:id')[0]
     route.should.be.an.instanceof(Route);
-    route.callback.should.be.a('function');
+    route.callbacks.should.be.an.instanceof(Array);
     route.path.should.equal('/user/:id');
     route.regexp.should.be.an.instanceof(RegExp);
     route.method.should.equal('get');
@@ -287,7 +570,6 @@ module.exports = {
 
     var route = app.match.get('/user/12')[0];
     route.should.be.an.instanceof(Route);
-    route.callback.should.be.a('function');
     route.path.should.equal('/user/:id');
     route.regexp.should.be.an.instanceof(RegExp);
     route.method.should.equal('get');
@@ -304,6 +586,17 @@ module.exports = {
     app.match('/user/123').should.have.length(3);
   },
 
+  'test app.routes.all()': function(){
+    var app = express.createServer();
+    app.get('/user', function(){});
+    app.get('/user/:id', function(){});
+    app.get('/user/:id/:op?', function(){});
+    app.put('/user/:id', function(){});
+    app.get('/user/:id/edit', function(){});
+    app.routes.all()[0].should.be.an.instanceof(Route);
+    app.routes.all().length.should.equal(5);
+  },
+
   'test Collection': function(){
     var app = express.createServer();
     app.get('/user', function(){});
@@ -403,5 +696,150 @@ module.exports = {
       function(){
         routes.should.eql(['/:foo?', '/foo']);
       });
+  },
+  
+  'test route callback error handling': function(){
+    var app = express.createServer()
+      , calls = [];
+
+    app.get('/user/:id', function(req, res, next){
+      calls.push('one');
+      next();
+    });
+
+    app.get('/user/:id', function(req, res, next){
+      calls.push('two');
+      next(new Error('fail'));
+    });
+
+    app.get('/user/:id', function(req, res, next){
+      calls.push('three');
+      next();
+    });
+    
+    app.get('/user/*', function(err, req, res, next){
+      res.statusCode = 500;
+      res.send('error: ' + err.message);
+    });
+
+    app.get('/user/*', function(req, res, next){
+      calls.push('four');
+      next();
+    });
+
+    assert.response(app,
+      { url: '/user/12' },
+      { body: 'error: fail' }, function(){
+        calls.should.eql(['one', 'two']);
+      });
+  },
+  
+  'test route callback thrown error handling': function(){
+    var app = express.createServer()
+      , calls = [];
+
+    app.get('/user/:id', function(req, res, next){
+      calls.push('one');
+      next();
+    });
+
+    app.get('/user/:id', function(req, res, next){
+      calls.push('two');
+      throw new Error('fail');
+    });
+
+    app.get('/user/:id', function(req, res, next){
+      calls.push('three');
+      next();
+    });
+    
+    app.get('/user/*', function(err, req, res, next){
+      res.statusCode = 500;
+      res.send('error: ' + err.message);
+    });
+
+    app.get('/user/*', function(req, res, next){
+      calls.push('four');
+      next();
+    });
+
+    assert.response(app,
+      { url: '/user/12' },
+      { body: 'error: fail' }, function(){
+        calls.should.eql(['one', 'two']);
+      });
+  },
+  
+  'test route callback error recovery': function(){
+    var app = express.createServer();
+
+    app.get('/user/:id', function(req, res, next){
+      next(new Error('fail'));
+    });
+
+    app.get('/user/*', function(err, req, res, next){
+      req.error = err;
+      next();
+    });
+
+    app.get('/user/*', function(req, res, next){
+      res.send('recovered from error: ' + req.error.message);
+    });
+
+    assert.response(app,
+      { url: '/user/12' },
+      { body: 'recovered from error: fail' });
+  },
+  
+  'test multiple param callbacks': function(){
+    var app = express.createServer();
+
+    app.param('user', function(req, res, next, id){
+      req.user = { id: id };
+      next();
+    });
+
+    app.param('forum_id', function(req, res, next, id){
+      req.forum = { id: id };
+      next();
+    });
+
+    app.param('thread_id', function(req, res, next, id){
+      req.thread = { id: id };
+      next();
+    });
+
+    function array(req, res, next) {
+      req.arr = [req.user.id, req.forum.id, req.thread.id];
+      next();
+    }
+
+    app.get('/:user/:forum_id/:thread_id', array, function(req, res){
+      res.send(req.arr);
+    });
+
+    assert.response(app,
+      { url: '/1/2/3' },
+      { body: '["1","2","3"]' });
+  },
+
+  'test app.all for multiple deletes': function(beforeExit){
+    var app = express.createServer();
+
+    var deletes = 0;
+
+    app.all('*', function(req, res, next){
+      if (req.method === 'DELETE')
+        deletes++;
+      next();
+    });
+
+    assert.response(app,
+      { url: '/', method: 'DELETE' },
+      { status: 404 });
+
+    beforeExit(function(){
+      deletes.should.eql(1);
+    });
   }
 };
diff --git a/test/view.test.js b/test/view.test.js
index 1c442b6836..ebbe8286db 100644
--- a/test/view.test.js
+++ b/test/view.test.js
@@ -3,7 +3,7 @@
  * Module dependencies.
  */
 
-var express = require('express')
+var express = require('../')
   , connect = require('connect')
   , assert = require('assert')
   , should = require('should')
@@ -453,19 +453,6 @@ module.exports = {
       { url: '/user' },
       { body: '<p>tj</p>' });
 
-    // as: this collection option
-    app.get('/person', function(req, res){
-      res.partial('person.jade', {
-        as: this,
-        collection: [{ name: 'tj' }],
-        locals: { label: 'name:' }
-      });
-    });
-    
-    assert.response(app,
-      { url: '/person' },
-      { body: '<p>name: tj</p>' });
-  
     // as: global collection option
     app.get('/videos', function(req, res){
       res.partial('video.jade', {
@@ -513,19 +500,6 @@ module.exports = {
       { url: '/video-global' },
       { body: '<p>Tim Burton</p>' });
   
-    app.get('/person-this', function(req, res){
-      res.partial('person.jade', {
-        object: { name: 'tj' },
-        locals: { label: 'User:' },
-        as: this
-      }); 
-    });
-    
-    // Non-collection as: this
-    assert.response(app,
-      { url: '/person-this' },
-      { body: '<p>User: tj</p>' });
-  
     // No options
     app.get('/nothing', function(req, res){
       res.partial('hello.ejs');