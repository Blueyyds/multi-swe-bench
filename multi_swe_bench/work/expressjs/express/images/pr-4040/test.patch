diff --git a/test/config.js b/test/config.js
index 17a02b7eba..e2dea7f41d 100644
--- a/test/config.js
+++ b/test/config.js
@@ -20,44 +20,52 @@ describe('config', function () {
       assert.equal(app.set('foo', undefined), app);
     })
 
-    describe('"etag"', function(){
-      it('should throw on bad value', function(){
+    it('should accept settings as json', function () {
+      var app = express();
+      app.set({
+        'foo': 'bar'
+      });
+      assert.equal(app.set('foo'), 'bar');
+    })
+
+    describe('"etag"', function () {
+      it('should throw on bad value', function () {
         var app = express();
         assert.throws(app.set.bind(app, 'etag', 42), /unknown value/);
       })
 
-      it('should set "etag fn"', function(){
+      it('should set "etag fn"', function () {
         var app = express()
-        var fn = function(){}
+        var fn = function () { }
         app.set('etag', fn)
         assert.equal(app.get('etag fn'), fn)
       })
     })
 
-    describe('"trust proxy"', function(){
-      it('should set "trust proxy fn"', function(){
+    describe('"trust proxy"', function () {
+      it('should set "trust proxy fn"', function () {
         var app = express()
-        var fn = function(){}
+        var fn = function () { }
         app.set('trust proxy', fn)
         assert.equal(app.get('trust proxy fn'), fn)
       })
     })
   })
 
-  describe('.get()', function(){
-    it('should return undefined when unset', function(){
+  describe('.get()', function () {
+    it('should return undefined when unset', function () {
       var app = express();
       assert.strictEqual(app.get('foo'), undefined);
     })
 
-    it('should otherwise return the value', function(){
+    it('should otherwise return the value', function () {
       var app = express();
       app.set('foo', 'bar');
       assert.equal(app.get('foo'), 'bar');
     })
 
-    describe('when mounted', function(){
-      it('should default to the parent app', function(){
+    describe('when mounted', function () {
+      it('should default to the parent app', function () {
         var app = express();
         var blog = express();
 
@@ -66,7 +74,7 @@ describe('config', function () {
         assert.equal(blog.get('title'), 'Express');
       })
 
-      it('should given precedence to the child', function(){
+      it('should given precedence to the child', function () {
         var app = express();
         var blog = express();
 
@@ -118,42 +126,42 @@ describe('config', function () {
     })
   })
 
-  describe('.enable()', function(){
-    it('should set the value to true', function(){
+  describe('.enable()', function () {
+    it('should set the value to true', function () {
       var app = express();
       assert.equal(app.enable('tobi'), app);
       assert.strictEqual(app.get('tobi'), true);
     })
   })
 
-  describe('.disable()', function(){
-    it('should set the value to false', function(){
+  describe('.disable()', function () {
+    it('should set the value to false', function () {
       var app = express();
       assert.equal(app.disable('tobi'), app);
       assert.strictEqual(app.get('tobi'), false);
     })
   })
 
-  describe('.enabled()', function(){
-    it('should default to false', function(){
+  describe('.enabled()', function () {
+    it('should default to false', function () {
       var app = express();
       assert.strictEqual(app.enabled('foo'), false);
     })
 
-    it('should return true when set', function(){
+    it('should return true when set', function () {
       var app = express();
       app.set('foo', 'bar');
       assert.strictEqual(app.enabled('foo'), true);
     })
   })
 
-  describe('.disabled()', function(){
-    it('should default to true', function(){
+  describe('.disabled()', function () {
+    it('should default to true', function () {
       var app = express();
       assert.strictEqual(app.disabled('foo'), true);
     })
 
-    it('should return false when set', function(){
+    it('should return false when set', function () {
       var app = express();
       app.set('foo', 'bar');
       assert.strictEqual(app.disabled('foo'), false);
