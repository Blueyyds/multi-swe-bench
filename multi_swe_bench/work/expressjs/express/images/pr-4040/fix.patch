diff --git a/lib/application.js b/lib/application.js
index 91f77d241e..5a4f13f317 100644
--- a/lib/application.js
+++ b/lib/application.js
@@ -120,7 +120,7 @@ app.defaultConfiguration = function defaultConfiguration() {
   }
 
   Object.defineProperty(this, 'router', {
-    get: function() {
+    get: function () {
       throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
     }
   });
@@ -334,6 +334,38 @@ app.param = function param(name, fn) {
   return this;
 };
 
+/**
+ * Some settings trigger a change in another settings.
+ *
+ * This is just a refactor to add the .set json-style call.
+ *
+ * @param {String} setting
+ * @param {*} [val]
+ * @return {void}
+ * @private
+ */
+
+function trigerMatchingSettings(setting, val) {
+  switch (setting) {
+    case "etag":
+      this.set("etag fn", compileETag(val));
+      break;
+    case "query parser":
+      this.set("query parser fn", compileQueryParser(val));
+      break;
+    case "trust proxy":
+      this.set("trust proxy fn", compileTrust(val));
+
+      // trust proxy inherit back-compat
+      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+        configurable: true,
+        value: false
+      });
+
+      break;
+  }
+}
+
 /**
  * Assign `setting` to `val`, or return `setting`'s value.
  *
@@ -352,7 +384,20 @@ app.param = function param(name, fn) {
 app.set = function set(setting, val) {
   if (arguments.length === 1) {
     // app.get(setting)
-    return this.settings[setting];
+    if (typeof setting === "string") {
+      return this.settings[setting];
+    } else if (typeof setting === "object") {
+
+      // loop on all keys and trigger for each one
+      for (var key in setting) {
+        var thisKeyVal = setting[key];
+
+        debug('set "%s" to %o', key, thisKeyVal);
+        this.settings[key] = thisKeyVal;
+        trigerMatchingSettings.call(this, key, thisKeyVal);
+      }
+      return this;
+    }
   }
 
   debug('set "%s" to %o', setting, val);
@@ -361,24 +406,7 @@ app.set = function set(setting, val) {
   this.settings[setting] = val;
 
   // trigger matched settings
-  switch (setting) {
-    case 'etag':
-      this.set('etag fn', compileETag(val));
-      break;
-    case 'query parser':
-      this.set('query parser fn', compileQueryParser(val));
-      break;
-    case 'trust proxy':
-      this.set('trust proxy fn', compileTrust(val));
-
-      // trust proxy inherit back-compat
-      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
-        configurable: true,
-        value: false
-      });
-
-      break;
-  }
+  trigerMatchingSettings.call(this, setting, val);
 
   return this;
 };
@@ -469,8 +497,8 @@ app.disable = function disable(setting) {
  * Delegate `.VERB(...)` calls to `router.VERB(...)`.
  */
 
-methods.forEach(function(method){
-  app[method] = function(path){
+methods.forEach(function (method) {
+  app[method] = function (path) {
     if (method === 'get' && arguments.length === 1) {
       // app.get(setting)
       return this.set(path);
