diff --git a/test/app.router.js b/test/app.router.js
index 491de358f0..03b43eb081 100644
--- a/test/app.router.js
+++ b/test/app.router.js
@@ -320,6 +320,22 @@ describe('app.router', function(){
       .expect(200, '[["0","10"],["1","tj"],["2","profile"]]', done);
     })
 
+    it('should merge numeric indices req.params when parent has same number', function(done){
+      var app = express();
+      var router = new express.Router({ mergeParams: true });
+
+      router.get('/name:(\\w+)', function(req, res){
+        var keys = Object.keys(req.params).sort();
+        res.send(keys.map(function(k){ return [k, req.params[k]] }));
+      });
+
+      app.use('/user/id:(\\d+)', router);
+
+      request(app)
+      .get('/user/id:10/name:tj')
+      .expect(200, '[["0","10"],["1","tj"]]', done);
+    })
+
     it('should ignore invalid incoming req.params', function(done){
       var app = express();
       var router = new express.Router({ mergeParams: true });
@@ -338,6 +354,26 @@ describe('app.router', function(){
       .get('/user/tj')
       .expect(200, '[["name","tj"]]', done);
     })
+
+    it('should restore req.params', function(done){
+      var app = express();
+      var router = new express.Router({ mergeParams: true });
+
+      router.get('/user:(\\w+)/*', function (req, res, next) {
+        next();
+      });
+
+      app.use('/user/id:(\\d+)', function (req, res, next) {
+        router(req, res, function (err) {
+          var keys = Object.keys(req.params).sort();
+          res.send(keys.map(function(k){ return [k, req.params[k]] }));
+        });
+      });
+
+      request(app)
+      .get('/user/id:42/user:tj/profile')
+      .expect(200, '[["0","42"]]', done);
+    })
   })
 
   describe('trailing slashes', function(){
@@ -721,6 +757,18 @@ describe('app.router', function(){
       .expect('editing tj (old)', cb);
     })
 
+    it('should work inside literal paranthesis', function(done){
+      var app = express();
+
+      app.get('/:user\\(:op\\)', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user);
+      });
+
+      request(app)
+      .get('/tj(edit)')
+      .expect('editing tj', done);
+    })
+
     it('should work in array of paths', function(done){
       var app = express();
       var cb = after(2, done);
diff --git a/test/app.routes.error.js b/test/app.routes.error.js
index ac517efdee..7c49d50ffe 100644
--- a/test/app.routes.error.js
+++ b/test/app.routes.error.js
@@ -3,6 +3,22 @@ var express = require('../')
 
 describe('app', function(){
   describe('.VERB()', function(){
+    it('should not get invoked without error handler on error', function(done) {
+      var app = express();
+
+      app.use(function(req, res, next){
+        next(new Error('boom!'))
+      });
+
+      app.get('/bar', function(req, res){
+        res.send('hello, world!');
+      });
+
+      request(app)
+      .post('/bar')
+      .expect(500, /Error: boom!/, done);
+    });
+
     it('should only call an error handling routing callback when an error is propagated', function(done){
       var app = express();
 
diff --git a/test/res.redirect.js b/test/res.redirect.js
index 4044ad49ee..7ebc1ef01d 100644
--- a/test/res.redirect.js
+++ b/test/res.redirect.js
@@ -1,6 +1,7 @@
 
-var express = require('../')
-  , request = require('supertest');
+var http = require('http');
+var express = require('..');
+var request = require('supertest');
 
 describe('res', function(){
   describe('.redirect(url)', function(){
@@ -83,11 +84,9 @@ describe('res', function(){
       request(app)
       .get('/')
       .set('Accept', 'text/html')
-      .end(function(err, res){
-        res.headers.should.have.property('location', 'http://google.com');
-        res.text.should.equal('<p>Moved Temporarily. Redirecting to <a href="http://google.com">http://google.com</a></p>');
-        done();
-      })
+      .expect('Content-Type', /html/)
+      .expect('Location', 'http://google.com')
+      .expect(302, '<p>' + http.STATUS_CODES[302] + '. Redirecting to <a href="http://google.com">http://google.com</a></p>', done);
     })
 
     it('should escape the url', function(done){
@@ -101,10 +100,9 @@ describe('res', function(){
       .get('/')
       .set('Host', 'http://example.com')
       .set('Accept', 'text/html')
-      .end(function(err, res){
-        res.text.should.equal('<p>Moved Temporarily. Redirecting to <a href="&lt;lame&gt;">&lt;lame&gt;</a></p>');
-        done();
-      })
+      .expect('Content-Type', /html/)
+      .expect('Location', '<lame>')
+      .expect(302, '<p>' + http.STATUS_CODES[302] + '. Redirecting to <a href="&lt;lame&gt;">&lt;lame&gt;</a></p>', done);
     })
 
     it('should include the redirect type', function(done){
@@ -134,12 +132,9 @@ describe('res', function(){
       request(app)
       .get('/')
       .set('Accept', 'text/plain, */*')
-      .end(function(err, res){
-        res.headers.should.have.property('location', 'http://google.com');
-        res.headers.should.have.property('content-length', '51');
-        res.text.should.equal('Moved Temporarily. Redirecting to http://google.com');
-        done();
-      })
+      .expect('Content-Type', /plain/)
+      .expect('Location', 'http://google.com')
+      .expect(302, http.STATUS_CODES[302] + '. Redirecting to http://google.com', done);
     })
 
     it('should encode the url', function(done){
@@ -153,10 +148,9 @@ describe('res', function(){
       .get('/')
       .set('Host', 'http://example.com')
       .set('Accept', 'text/plain, */*')
-      .end(function(err, res){
-        res.text.should.equal('Moved Temporarily. Redirecting to http://example.com/?param=%3Cscript%3Ealert(%22hax%22);%3C/script%3E');
-        done();
-      })
+      .expect('Content-Type', /plain/)
+      .expect('Location', 'http://example.com/?param=<script>alert("hax");</script>')
+      .expect(302, http.STATUS_CODES[302] + '. Redirecting to http://example.com/?param=%3Cscript%3Ealert(%22hax%22);%3C/script%3E', done);
     })
 
     it('should include the redirect type', function(done){
