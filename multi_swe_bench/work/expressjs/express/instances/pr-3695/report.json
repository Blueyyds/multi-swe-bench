{"org": "expressjs", "repo": "express", "number": 3695, "valid": true, "error_msg": "", "fixed_tests": {"Route errors should handle throws in asyncFunction": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "Route errors should handle throwing inside async error handlers": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"app.router when next(\"route\") is called should jump to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should denote an optional capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return true when X-Requested-With is xmlhttprequest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should send as octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should encode the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should always check regardless of length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/users should respond with users from APIv2": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should run the callback for a method just once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to NOTIFY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should allow ../ when \"root\" is set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost bar.example.com GET / should redirect to /bar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should map a template engine": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose Router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work following a partial capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET /fail should respond with an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper username": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should include security header and prologue": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/9 should fail": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv6 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a directory index file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return true when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should allow multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCOL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include TRACE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"weak\" should send weak ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should restore req.params after leaving router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include NOTIFY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should return true when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Object) should send as application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCOL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when content-type is not present should return false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed without secret should throw an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(names, fn) should map the array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET / should have a link to amazing.txt": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(null) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.copy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SOURCE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should set multiple fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages GET / should respond with page list": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is a function should parse using function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.del() should alias app.delete()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.parent should return the parent when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/foo-bar should fail integer parsing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DELETE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when the file does not exist should provide a helpful error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should handle render error throws": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/0-2 should respond with three users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should allow fallthrough": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should not get invoked without error handler on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set the header to \"/\" without referrer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type based on a filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enable() should set the value to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should call handler in same route, if exists": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should emit \"mount\" when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should return a function with router methods": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should use first callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow literal \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when parent has same number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/edit should get a user to edit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .path should return the parsed pathname": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should always lookup view without cache": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should otherwise return the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should append multiple headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /next should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should be called for any URL when \"*\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should not throw if all callbacks are functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should be callable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send() should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should do anything without type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to ACL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should support using .all to capture all http verbs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should override charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should inherit from event emitter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3 should respond with users 1 through 3": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should be called for any URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should accept array of values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity should be disabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc POST /user/:id/pet should create a pet for user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) should set the response .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond with no cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should throw with notice": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "without NODE_ENV should default to development": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to DELETE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.options() should override the default behavior": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should set charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals.settings should expose app settings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work cross-segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.options": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should decode correct params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) should set params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with trusted X-Forwarded-Host should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should restore req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should allow several capture groups": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should given precedence to the child": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should set the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should respond user repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should inherit \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcol": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REPORT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should map app.param(name, ...) logic": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to COPY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not send ETag for res.send()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with an absolute path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle errors via arity 4 functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcalendar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should add the filename and filename* params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MERGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unbind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" with leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv4 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET / should respond with index": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 for directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return false when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/ should respond with APIv2 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should use params from router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .get(field) should get the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should allow naming": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should strip path from req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should skip non error middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not decode spaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows unc": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should travel through routers correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should not mutate the options object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type with type/subtype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.rebind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting neither text or html should respond with an empty body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should overwrite existing req.params by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkactivity": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .request should extend the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size when open-ended": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should special-case Referer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mount-points": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets should get a users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when an error occurs should next(err)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should capture everything": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return the type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an array should set the values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include OPTIONS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in production should enable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should throw on old middlewares": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name, default) should use the default value unless defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work without leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mounted app anywhere": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set max-age": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals with `name` property": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS when error occurs in response handler should pass error to callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain full lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work inside literal parenthesis": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /missing should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should return a new route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route should work without handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.notify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should coerce to an array of strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.head() should override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should only include each method once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.head": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should render login form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET /forget should clear cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should ignore object callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field for multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not be affected by app.all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display 1 view on revisit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol should return the protocol string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with res.set(field, val) first": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ when using \"next\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path) should transfer as an attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer all the param routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw missing header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should 404 for directory without trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an error occurs should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw in .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should not be influenced by other app protos": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1 should respond with user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name should denote a format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should match a single segment only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .signedCookies should return a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should populate req.params with the captures": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(body, code) should be supported for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation PUT /user/:id/edit should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should succeed with proper cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should throw on bad value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should work if path has trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should work with encoded values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should default to the routes defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.checkout": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should break out of app.router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.flatten(arr) should flatten an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.m-search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should throw when the callback is missing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should include ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support regexp path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to GET request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MOVE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.patch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include COPY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should not set a charset of one is already set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should eat everything after /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.subscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0/edit should get pet edit page": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET / should respond with root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PURGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include BIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.mountpath should return the mounted path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should prefer child \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.path() should return the canonical": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file with urlencoded name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw for non-string header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should set the header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when the request method is HEAD should ignore the body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename) should provide an alternate filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should keep correct parameter indexes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should limit to just .VERB": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on socket error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should set \"etag fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, body) should set .statusCode and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(undefined) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is not a function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond to cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send no ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not serve dotfiles": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set relative expires": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should invoke middleware for all requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for long response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should work with unknown code": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include M-SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCALENDAR": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should match the pathname only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should not transfer relative with without": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is not present should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should not send falsy ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work in array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unsubscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should output the same headers as GET requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow escaped regexp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) when an error occurs should pass it to the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should keep charset if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 304 when ETag matches": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3.json should respond with users 2 and 3 as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should default to a 302 redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "throw after .end() should fail gracefully": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.purge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return undefined if no range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support unices": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.bind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.propfind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.report": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/ should respond with APIv1 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.source": {"run": "PASS", "test": "PASS", "fix": "PASS"}, ".sendfile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation POST /user/:id/edit?_method=PUT should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should display login error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should override previous Content-Types with callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should run in order added": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REPORT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown secondary error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should no set cookie w/o reminder": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes should be optional by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not invoke without route handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET /foo should say foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() when the value is present should not add it again": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.del": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should only call an error handling routing callback when an error is propagated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should denote a capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disable() should set the value to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKACTIVITY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should be optional": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should work with unicode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should fail if not given fn": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when not present should 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should invoke middleware for all requests starting with path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not respond if the path is not defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not override previous Content-Types with no callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support .use of other routers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should succeed with proper credentials": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should disallow arbitrary js": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .handle should dispatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with no arguments should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should work when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed should generate a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/0 should respond with a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should 500 on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow renaming callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should have a .type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should add handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file with special characters in string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should utilize the same options as express.static()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req should accept an argument list of type names": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, object) should generate a JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name) should set a cookie passed expiry": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an empty array should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/users should respond with users from APIv1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should update the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include CHECKOUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing in handler after async param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for empty string response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "ejs GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should decore the capture": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when a \"view\" constructor is given should create an instance of it": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with a valid api key should respond repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, options, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets/:pid should get a users pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MERGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"router\") is called should jump out of router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users should respond with all users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is not present should return []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /pet/2 should update the pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /posts should get a list of posts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name? should denote an optional format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /logout should redirect to /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should not be greedy immediately after param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should prefer \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.delete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users should respond with users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .locals should be empty by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is simple should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should default to application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work within arrays": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should allow merging existing req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path with non-GET should still serve": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display no views": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.move": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map DELETE /users should delete users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should cache with \"view cache\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET / should say hello": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service when requesting an invalid route should respond with 404 json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should not error on empty routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper password": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MOVE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should be invoked instead of auto-responding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should return undefined when unset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should add the filename param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should take quality into account": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support empty string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser fn\" is missing should act like \"extended\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router parallel requests should not mix requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should return the header field value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should send custom ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should send the status code and message as body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should mount the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an extension is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should re-route when method is altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlink": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return false when no match is made": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/9 should fail to find user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code) should set .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle blank URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in development should disable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(status, url) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next() is called should continue lookup": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return parsed ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should extend the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should require a preceding /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals(obj) should merge locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with a string should set the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should default to GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not call when values differ on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle single error handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should map logic for a single param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.lock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PURGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should send as html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/missing.txt should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPPATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to {}": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to BIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should set a session cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should support .get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/9 should respond with error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, number) should send number as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app when undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /users should display a list of users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should support altering req.params across routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should default to the parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should get reset by res.set(field, val)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should accept any type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DEL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not accept params in malformed paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle missing URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.acl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "middleware .next() should behave like connect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/1 should delete user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should return type if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .route should be the executed Route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should denote a greedy capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given an extension should lookup the mime type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should span multiple segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should escape the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to TRACE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should add a router per method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.listen() should wrap with an HTTP server": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.proppatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should not obscure FQDNs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should set multiple response header fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not escape utf whitespace for json fallback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should set the child's .parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should be empty for top-level route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPFIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should escape utf whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should give precedence to app.render() locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work with several": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should return false when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include ACL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with no host should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should handle VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id/edit should display the edit form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow rewriting of the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is missing should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should work when only .default is provided": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when more in parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"trust proxy\" should set \"trust proxy fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should allow options to res.sendFile()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include POST": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to HEAD request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET / should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should respond with text": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"strong\" should send strong ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should 404 without routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.post": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) caching should cache with cache option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.merge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0 should get pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment() should Content-Disposition to attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match no slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost foo.example.com GET / should redirect to /foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to POST request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should throw when Content-Type is an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths with middleware array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should have a form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple routed handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should remove Content-Disposition": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should override charset in Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should next(404) when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should populate the capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size, options) with \"combine: true\" option should return combined ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should respond with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /users should list users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET / should redirect to /login": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should all .VERB after .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should forward requests down the middleware chain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type with canonical mime types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.put": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNSUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with a valid api key should respond users json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be .use()able": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should not stack overflow with many registered routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should ignore invalid incoming req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should set a value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should redirect to /login without cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error missing path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SOURCE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name, options) should set the given params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" an unknown value should throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/amazing.txt should have a download header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPFIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside routes with params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url, status) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not override ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET / should redirect to /users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"Route errors should handle throws in asyncFunction": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "Route errors should handle throwing inside async error handlers": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 850, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app.router when next(\"route\") is called should jump to next route", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router :name? should denote an optional capture group", "resource GET / should respond with instructions", "req .xhr should return true when X-Requested-With is xmlhttprequest", "res .send(Buffer) should send as octet-stream", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "res when accepting text should encode the url", "res should always check regardless of length", "app.router methods should reject numbers for app.unlock", "multi-router GET /api/v2/users should respond with users from APIv2", "app.all() should run the callback for a method just once", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "vhost bar.example.com GET / should redirect to /bar", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "Router .multiple callbacks should throw if a callback is null", "app .engine(ext, fn) should map a template engine", "res .append(field, val) should work with cookies", "exports should expose Router", "app.router :name should work following a partial capture group", "markdown GET /fail should respond with an error", "auth POST /login should fail without proper username", "res .jsonp(object) should include security header and prologue", "resource DELETE /users/9 should fail", "req.is() when given */subtype should return the full type when matching", "error-pages Accept: text/plain GET /403 should respond with 403", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "req .subdomains when present should work with IPv6 address", "res .sendfile(path) should transfer a directory index file", "content-negotiation GET / should accept to application/json", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "req .fresh should return true when the resource is not modified", "res .cookie(name, string) should allow multiple calls", "res \"etag\" setting when enabled should send ETag in response to LINK request", "app .param(name, fn) should only call once per request", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "Router should support dynamic routes", "app.router methods should include MKCOL", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "Router .param should call when values differ", "req .hostname should work with IPv6 Host and port", "res .links(obj) should set Link header field", "app .render(name, fn) should expose app.locals", "app.router methods should include TRACE", "res \"etag\" setting when \"weak\" should send weak ETag", "app.router should restore req.params after leaving router", "req.is() when given type/* should return false when not matching", "req .acceptsLanguages when Accept-Language is not present should always return true", "app.router methods should include NOTIFY", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "config .enabled() should return true when set", "res .send(Object) should send as application/json", "res .set(field, value) should coerce to a string", "req .subdomains when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "req.is() when content-type is not present should return false", "res .cookie(name, string, options) signed without secret should throw an error", "app .param(names, fn) should map the array", "downloads GET / should have a link to amazing.txt", "res .send(null) should set body to \"\"", "app.router methods should reject numbers for app.copy", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "route-separation GET /user/:id should get a user", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "res .set(object) should set multiple fields", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "error-pages GET / should respond with page list", "route-separation GET /user/:id/view should get a user", "req .query when \"query parser\" is a function should parse using function", "app.del() should alias app.delete()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app .use(middleware) should accept multiple arrays of middleware", "app.parent should return the parent when mounted", "params GET /users/foo-bar should fail integer parsing", "exports should permit modifying the .application prototype", "res .jsonp(object) when given primitives should respond with json for Number", "app.router methods should include DELETE", "res .sendFile(path) should transfer a file", "app .render(name, fn) when the file does not exist should provide a helpful error", "app .render(name, fn) should handle render error throws", "res .format(obj) with extnames should set the correct charset for the Content-Type", "params GET /users/0-2 should respond with three users", "Route .VERB should allow fallthrough", "res .json(object) should not override previous Content-Types", "app .VERB() should not get invoked without error handler on error", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsEncoding should be true if encoding accepted", "res .type(str) should set the Content-Type based on a filename", "app.router methods should include LINK", "res .send(Buffer) should not override Content-Type", "config .enable() should set the value to true", "app.router when next(err) is called should call handler in same route, if exists", "app should emit \"mount\" when mounted", "Router should return a function with router methods", "res .jsonp(object) should use first callback parameter with jsonp", "route-map GET /users/:id should get a user", "app.router should allow literal \".\"", "app.router params should merge numeric indices req.params when parent has same number", "route-separation GET /user/:id/edit should get a user to edit", "req .path should return the parsed pathname", "res .jsonp(object) when given primitives should respond with json for String", "app .render(name, fn) caching should always lookup view without cache", "Router .param should call param function when routing VERBS", "config .get() should otherwise return the value", "mvc GET /user/:id when present should display the users pets", "error-pages Accept: application/json GET /500 should respond with 500", "res .append(field, val) should append multiple headers", "error GET /next should respond with 500", "Router .all should be called for any URL when \"*\"", "Router .multiple callbacks should not throw if all callbacks are functions", "req .host should return undefined otherwise", "app should be callable", "res .send() should set body to \"\"", "res should not override previous Content-Types", "utils.wetag(body, encoding) should support strings", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "utils.setCharset(type, charset) should do anything without type", "res \"etag\" setting when enabled should send ETag in response to ACL request", "Router .all should support using .all to capture all http verbs", "utils.setCharset(type, charset) should override charset", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app should inherit from event emitter", "resource GET /users/1..3 should respond with users 1 through 3", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "Router .use should be called for any URL", "res .append(field, val) should accept array of values", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router case sensitivity should be disabled by default", "utils.etag(body, encoding) should support empty string", "mvc POST /user/:id/pet should create a pet for user", "res .sendfile(path) with a relative path should serve relative to \"root\"", "res .status(code) should set the response .statusCode", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "cookies GET / should respond with no cookies", "app.router should throw with notice", "without NODE_ENV should default to development", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "req .secure when X-Forwarded-Proto is present should return false when http", "res .render(name, option) should give precedence to res.locals over app.locals", "app.options() should override the default behavior", "res .format(obj) with extnames should utilize qvalues in negotiation", "utils.setCharset(type, charset) should set charset", "app .locals.settings should expose app settings", "app.router * should work cross-segment", "app.router methods should reject numbers for app.options", "app.router decode params should decode correct params", "req.is() when given a mime type should ignore charset", "res .cookie(name, string, options) should set params", "res .render(name, option) should give precedence to res.render() locals over app.locals", "req .subdomains with trusted X-Forwarded-Host should return an array", "app.router params should restore req.params", "app.router :name should allow several capture groups", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "config .get() when mounted should given precedence to the child", "res .set(field, value) should set the response header field", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "config .get() when mounted should inherit \"trust proxy\" setting", "app.router methods should reject numbers for app.mkcol", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app .param(fn) should map app.param(name, ...) logic", "res \"etag\" setting when enabled should send ETag in response to COPY request", "res \"etag\" setting when enabled should not send ETag for res.send()", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .sendfile(path) with an absolute path should transfer the file", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "Route errors should handle errors via arity 4 functions", "app.router methods should reject numbers for app.mkcalendar", "res .attachment(utf8filename) should add the filename and filename* params", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "app.router methods should reject numbers for app.unbind", "res .format(obj) with parameters should default the Content-Type", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "req .subdomains when present should work with IPv4 address", "route-separation GET / should respond with index", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "res .json(object) when given an object should respond with json", "res .json(status, object) should respond with json and set the .statusCode", "res .sendFile(path) should 404 for directory", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "req .stale should return false when the resource is not modified", "res should not support jsonp callbacks", "res .sendFile(path, fn) should invoke the callback without error when 304", "res .render(name) should error without \"view engine\" set and no file extension", "Router .use should accept array of middleware", "error-pages Accept: text/html GET /403 should respond with 403", "multi-router GET /api/v2/ should respond with APIv2 root handler", "error-pages Accept: text/html GET /500 should respond with 500", "error-pages Accept: text/html GET /404 should respond with 404", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "app.router params should use params from router", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.link", "res .get(field) should get the response header field", "req .accepts(type) should return true when Accept is not present", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "app.router * should allow naming", "app .use(path, middleware) should strip path from req.url", "Router error should skip non error middleware", "app.router decode params should not decode spaces", "res .jsonp(status, object) should respond with json and set the .statusCode", "utils.isAbsolute() should support windows unc", "req .baseUrl should travel through routers correctly", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .param(name) should check req.params", "res .type(str) should set the Content-Type with type/subtype", "app.router methods should reject numbers for app.rebind", "res when accepting neither text or html should respond with an empty body", "req.is() when given */subtype should return false when not matching", "app.router params should overwrite existing req.params by default", "app.router methods should reject numbers for app.mkactivity", "error-pages Accept: text/plain GET /404 should respond with 404", "exports should expose the response prototype", "app .request should extend the request prototype", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "req .range(size) should cap to the given size when open-ended", "req .xhr should return false when not present", "req .get(field) should special-case Referer", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "app .use(app) should support mount-points", "route-map GET /users/:id/pets should get a users pets", "utils.wetag(body, encoding) should support utf8 strings", "app .use(path, middleware) should reject string as middleware", "req .host should work with IPv6 Host and port", "res .render(name) when an error occurs should next(err)", "app.router * should capture everything", "req.is() when given a mime type should return the type when matching", "res .json(object) when given primitives should respond with json for Number", "res.vary() with an array should set the values", "app.router methods should include OPTIONS", "app .render(name, fn) when \"view engine\" is given should render the template", "Router .use should reject number as middleware", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "in production should enable \"view cache\"", "exports should throw on old middlewares", "req .param(name, default) should use the default value unless defined", "app .engine(ext, fn) should work without leading \".\"", "app .use(app) should support mounted app anywhere", "req .subdomains when subdomain offset is set otherwise should return an empty array", "res .cookie(name, string, options) maxAge should set max-age", "req .query when \"query parser\" disabled should not parse complex keys", "res .render(name) should expose app.locals with `name` property", "OPTIONS when error occurs in response handler should pass error to callback", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "content-negotiation GET /users should accept to text/plain", "req .baseUrl should contain full lower path", "req .query when \"query parser\" disabled should not parse query", "app.router methods should include LOCK", "app.router :name should work inside literal parenthesis", "error GET /missing should respond with 404", "res .json(object) when given primitives should respond with json for String", "res .sendfile(path, fn) should invoke the callback when complete", "app.route should return a new route", "exports should expose the application prototype", "Route should work without handlers", "app .use(middleware) should accept multiple arguments", "req .accepts(type) should return false otherwise", "app.router methods should reject numbers for app.notify", "res .set(field, values) should coerce to an array of strings", "app.head() should override", "OPTIONS should only include each method once", "app.router methods should reject numbers for app.head", "req .hostname should strip port number", "res .format(obj) with canonicalized mime types should Vary: Accept", "res .render(name, option) should expose res.locals", "auth GET /login should render login form", "Router .use should reject string as middleware", "cookies GET /forget should clear cookie", "res .jsonp(object) should ignore object callback parameter with jsonp", "res .links(obj) should set Link header field for multiple calls", "OPTIONS should not be affected by app.all", "Router .use should reject null as middleware", "cookie-sessions GET / should display 1 view on revisit", "req .protocol should return the protocol string", "res .append(field, val) should work with res.set(field, val) first", "res .sendfile(path, fn) should invoke the callback on 403", "config .enabled() should default to false", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "res .sendfile(path, fn) should not override manual content-types", "app .param(name, fn) should call when values differ when using \"next\"", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .download(path) should transfer as an attachment", "app .param(name, fn) should defer all the param routes", "req .get(field) should throw missing header name", "res .sendfile(path) should 404 for directory without trailing slash", "res .format(obj) in router when Accept is not present should invoke the first callback", "app .render(name, fn) when an error occurs should invoke the callback", "Route errors should handle throw in .all", "app .response should not be influenced by other app protos", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include HEAD", "req .hostname when \"trust proxy\" is enabled should default to Host", "resource GET /users/1 should respond with user 1", "res .format(obj) in router should utilize qvalues in negotiation", "app.router .:name should denote a format", "app.router :name should match a single segment only", "req .signedCookies should return a signed JSON cookie", "app.router when given a regexp should populate req.params with the captures", "res .send(body, code) should be supported for backwards compat", "route-separation PUT /user/:id/edit should edit a user", "res on failure should invoke the callback", "auth GET /restricted should succeed with proper cookie", "config .set() \"etag\" should throw on bad value", "req .hostname should return undefined otherwise", "Router .multiple callbacks should throw if a callback is undefined", "app .use(path, middleware) should work if path has trailing slash", "app .param(name, fn) should work with encoded values", "req .acceptsLanguages should be true if language accepted", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.checkout", "app.router when next(err) is called should break out of app.router", "utils.flatten(arr) should flatten an array", "res .sendfile(path, fn) should invoke the callback on 404", "Router FQDN should ignore FQDN in path", "res .render(name) should expose app.locals", "app.router methods should reject numbers for app.m-search", "app .engine(ext, fn) should throw when the callback is missing", "utils.isAbsolute() should support windows", "res .sendFile(path) should include ETag", "Router FQDN should ignore FQDN in search", "app .use(path, middleware) should support regexp path", "res \"etag\" setting when enabled should send ETag in response to GET request", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "res .attachment(filename) should set the Content-Type", "res .render(name) should support absolute paths with \"view engine\"", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .render(name) should support index.<engine>", "mvc GET /user/:id when present should display the user", "app.router methods should reject numbers for app.patch", "app.router methods should include COPY", "req .stale should return true without response headers", "app .param(name, fn) should catch thrown error", "res .set(field, values) should not set a charset of one is already set", "res .sendFile(path) should not error if the client aborts", "utils.wetag(body, encoding) should support empty string", "app.router * should eat everything after /", "error-pages Accept: text/plain GET /500 should respond with 500", "app.router methods should reject numbers for app.subscribe", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "mvc GET /pet/0/edit should get pet edit page", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .redirect(url) should encode \"url\"", "Router .param should only call once per request", "multi-router GET / should respond with root handler", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "app.router methods should include BIND", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req.is() when given a mime type should return false when not matching", "req .host should strip port number", "error-pages Accept: application/json GET /403 should respond with 403", "app.mountpath should return the mounted path", "config .get() when mounted should prefer child \"trust proxy\" setting", "app .param(name, fn) should defer to next route", "app.path() should return the canonical", "req .stale should return true when the resource is modified", "res .send(String) should set ETag", "app .use(path, middleware) should accept multiple arrays of middleware", "res .sendfile(path) should transfer a file with urlencoded name", "req .get(field) should throw for non-string header name", "Route .all should stack", "res .location(url) should set the header", "res .location(url) should encode \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "res .sendFile(path, fn) should invoke the callback when client aborts", "res when the request method is HEAD should ignore the body", "app .render(name, options, fn) should render the template", "app .use(middleware) should accept nested arrays of middleware", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "res .download(path, filename) should provide an alternate filename", "res .render(name, option) should expose app.locals", "res .jsonp(object) when given primitives should respond with json", "app.router * should keep correct parameter indexes", "app .use(path, middleware) should support array of paths", "Route .VERB should limit to just .VERB", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "res .sendFile(path) should not override manual content-types", "res .sendfile(path, fn) should invoke the callback on socket error", "config .set() \"etag\" should set \"etag fn\"", "res .send(code, body) should set .statusCode and body", "res .send(undefined) should set body to \"\"", "res .format(obj) in router should Vary: Accept", "app .use(path, middleware) should reject Date as middleware", "res .sendfile(path, fn) should invoke the callback without error when 304", "Router .multiple callbacks should throw if a callback is not a function", "cookies GET / should respond to cookie", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res \"etag\" setting when disabled should send no ETag", "res .sendfile(path) should not serve dotfiles", "res .cookie(name, string, options) maxAge should set relative expires", "app .use(middleware) should invoke middleware for all requests", "res \"etag\" setting when enabled should send ETag for long response", "res .sendStatus(statusCode) should work with unknown code", "req .host when \"trust proxy\" is enabled should default to Host", "app .use(path, middleware) should accept multiple arguments", "app.router methods should include M-SEARCH", "app.router methods should include MKCALENDAR", "req .acceptsEncoding should be false if encoding not accepted", "app.router when given a regexp should match the pathname only", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "res .sendFile(path) with \"root\" option should not transfer relative with without", "req .ip when X-Forwarded-For is not present should return the remote address", "res \"etag\" setting when a function should not send falsy ETag", "app.router :name should work in array of paths", "app.router methods should reject numbers for app.unsubscribe", "HEAD should output the same headers as GET requests", "app.router should allow escaped regexp", "res .render(name, fn) when an error occurs should pass it to the callback", "req .range(size) should cap to the given size", "res .sendFile(path) should 404 when not found", "utils.setCharset(type, charset) should keep charset if not given charset", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res .sendFile(path) should 304 when ETag matches", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "res .redirect(url) should default to a 302 redirect", "throw after .end() should fail gracefully", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.purge", "req .range(size) should return undefined if no range", "utils.isAbsolute() should support unices", "app .use(path, middleware) should accept nested arrays of middleware", "app.router methods should reject numbers for app.bind", "app.router methods should reject numbers for app.propfind", "app.router methods should reject numbers for app.report", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "multi-router GET /api/v1/ should respond with APIv1 root handler", "app.router methods should reject numbers for app.get", "req .host should return the Host when present", "app.router methods should reject numbers for app.source", ".sendfile(path, options) should pass options to send module", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "auth GET /login should display login error", "content-negotiation GET / should accept to text/plain", "res .jsonp(object) should override previous Content-Types with callback", "app.router should run in order added", "app.router methods should include REPORT", "req .query when \"query parser\" is extended should parse parameters with dots", "res \"etag\" setting when disabled should send ETag when manually set", "app .param(name, fn) should catch thrown secondary error", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "res .render(name) should support absolute paths", "cookies POST / should no set cookie w/o reminder", "res .sendFile(path, fn) should invoke the callback on 404", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router trailing slashes should be optional by default", "app .param(name, fn) should not invoke without route handler", "vhost example.com GET /foo should say foo", "res.vary() when the value is present should not add it again", "app.router methods should reject numbers for app.del", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "app .VERB() should only call an error handling routing callback when an error is propagated", "app.router :name should denote a capture group", "config .disable() should set the value to false", "app.router methods should include MKACTIVITY", "app.router methods should include SUBSCRIBE", "web-service GET /api/users without an api key should respond with 400 bad request", "config .disabled() should default to true", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app.router * should be optional", "Route errors should handle throw", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "res when accepting html should include the redirect type", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "req .xhr should case-insensitive", "app .param(fn) should fail if not given fn", "res .sendFile(path, options) should pass options to send module", "res .json(object, status) should use status as second number for backwards compat", "res .sendfile(path) should ignore headers option on 404", "mvc GET /user/:id when not present should 404", "app .use(path, middleware) should invoke middleware for all requests starting with path", "OPTIONS should not respond if the path is not defined", "res .jsonp(object) should not override previous Content-Types with no callback", "Router should support .use of other routers", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "auth POST /login should succeed with proper credentials", "req .xhr should return false otherwise", "app .render(name, fn) should support index.<engine>", "app.route should support dynamic routes", "res .jsonp(object) should disallow arbitrary js", "Router .handle should dispatch", "res.vary() with no arguments should not set Vary", "res should work when mounted", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "params GET /user/0 should respond with a user", "app .engine(ext, fn) should work \"view engine\" setting", "mvc PUT /user/:id should 500 on error", "req.is() when given type/* should ignore charset", "res .jsonp(object) should allow renaming callback", "req .range(size) should have a .type", "res .render(name) when \"views\" is given should lookup the file in the path", "res .set(object) should coerce to a string", "Route .all should add handler", "res .sendFile(path) should transfer a file with special characters in string", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res .format(obj) with parameters should Vary: Accept", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "req .baseUrl should contain lower path", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .sendfile(path, fn) should utilize the same options as express.static()", "req should accept an argument list of type names", "res .cookie(name, object) should generate a JSON cookie", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "app.router methods should include UNLOCK", "req .param(name) should check req.query", "res .clearCookie(name) should set a cookie passed expiry", "res .send(String) should keep charset in Content-Type for Buffers", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "res.vary() with an empty array should not set Vary", "multi-router GET /api/v1/users should respond with users from APIv1", "mvc PUT /user/:id should update the user", "app.router methods should include CHECKOUT", "Router error should handle throwing in handler after async param", "res .format(obj) with canonicalized mime types should default the Content-Type", "app.router methods should reject numbers for app.search", "app .use(path, middleware) should accept array of middleware", "res .format(obj) with extnames should allow wildcard type/subtypes", "res \"etag\" setting when enabled should send ETag for empty string response", "ejs GET / should respond with html", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router * should decore the capture", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "exports should expose the request prototype", "web-service GET /api/repos with a valid api key should respond repos json", "res .format(obj) in router should set the correct charset for the Content-Type", "res .render(name, options, fn) should pass the resulting string", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include MERGE", "app.router when next(\"router\") is called should jump out of router", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "resource GET /users should respond with all users", "res .json(object) \"json spaces\" setting should be undefined by default", "req .ips when X-Forwarded-For is not present should return []", "app .use(path, middleware) should require middleware", "res .format(obj) with parameters should set the correct charset for the Content-Type", "mvc PUT /pet/2 should update the pet", "res .send(String) should not override Content-Type", "route-separation GET /posts should get a list of posts", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router .:name? should denote an optional format", "auth GET /logout should redirect to /", "app.router * should not be greedy immediately after param", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res .render(name, fn) should pass the resulting string", "utils.etag(body, encoding) should support buffer", "res should respond with 304 Not Modified when fresh", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "res .jsonp(object) should allow []", "res .location(url) should not touch already-encoded sequences in \"url\"", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "app.router methods should reject numbers for app.delete", "route-map GET /users should respond with users", "res .format(obj) with extnames should default the Content-Type", "res .locals should be empty by default", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains when subdomain offset is set when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "res .type(str) should default to application/octet-stream", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "app.router * should work within arrays", "app.router params should allow merging existing req.params", "Router FQDN should adjust FQDN req.url with multiple handlers", "res .sendfile(path) with a relative path with non-GET should still serve", "cookie-sessions GET / should display no views", "app.router methods should reject numbers for app.move", "route-map DELETE /users should delete users", "error-pages Accept: application/json GET /404 should respond with 404", "app .render(name, fn) caching should cache with \"view cache\" setting", "res .attachment(utf8filename) should set the Content-Type", "res .json(object) when given an array should respond with json", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "cookies POST / should set a cookie", "app.router methods should include UNBIND", "res .render(name, option) should render the template", "res .sendfile(path, fn) should invoke the callback when client already aborted", "vhost example.com GET / should say hello", "web-service when requesting an invalid route should respond with 404 json", "app .use(middleware) should accept array of middleware", "Router error should handle throwing inside error handlers", "app.route should not error on empty routes", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "auth POST /login should fail without proper password", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "app.router methods should include MOVE", "res .format(obj) given .default should be invoked instead of auto-responding", "res .download(path, fn) should invoke the callback", "res .download(path, filename, options, fn) should invoke the callback", "params GET / should respond with instructions", "app .use(path, middleware) should reject number as middleware", "res .format(obj) in router should default the Content-Type", "app .param(name, fn) should call when values differ", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "res when accepting html should respond with html", "res .sendfile(path) should not error if the client aborts", "config .get() should return undefined when unset", "res .attachment(filename) should add the filename param", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "req .accepts(types) should take quality into account", "Router .use should require middleware", "app .use(path, middleware) should support empty string path", "req .query when \"query parser fn\" is missing should act like \"extended\"", "Router parallel requests should not mix requests", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "req .get(field) should return the header field value", "res \"etag\" setting when a function should send custom ETag", "res .jsonp(object) when given primitives should respond with json for null", "res .sendStatus(statusCode) should send the status code and message as body", "app .use(app) should mount the app", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "app .render(name, fn) when an extension is given should render the template", "app.router methods should include PATCH", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "Router .use should reject Date as middleware", "app.router methods should re-route when method is altered", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .format(obj) with parameters should utilize qvalues in negotiation", "app.router methods should reject numbers for app.unlink", "req .accepts(types) should return false when no match is made", "res .sendfile(path) with a relative path should transfer the file", "params GET /user/9 should fail to find user", "route-separation GET /user/:id should 404 on missing user", "res .send(code) should set .statusCode", "res \"etag\" setting when enabled should send ETag", "app .render(name, fn) should support absolute paths", "Router should handle blank URL", "in development should disable \"view cache\"", "res .redirect(status, url) should set the response status", "req .host should work with IPv6 Host", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "route-separation GET /user/:id/view should 404 on missing user", "res .sendFile(path) with \"headers\" option should accept headers option", "app.router when next() is called should continue lookup", "req .acceptsLanguage should be true if language accepted", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "res .json(object) \"json escape\" setting should be undefined by default", "req .range(size) should return parsed ranges", "app .response should extend the response prototype", "res .sendfile(path) should transfer a file", "app.router should be chainable", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "app.router * should require a preceding /", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "utils.etag(body, encoding) should support utf8 strings", "app .locals(obj) should merge locals", "res.vary() with a string should set the value", "content-negotiation GET /users should default to text/html", "res when accepting text should include the redirect type", "res .sendfile(path) should accept dotfiles option", "HEAD should default to GET", "app .param(name, fn) should not call when values differ on error", "Route errors should handle single error handler", "app .param(name, fn) should map logic for a single param", "app.router methods should reject numbers for app.lock", "app.router methods should include PURGE", "res .send(String) should send as html", "downloads GET /files/missing.txt should respond with 404", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "app.router methods should include PROPPATCH", "res .send(Buffer) should not override ETag", "req .query should default to {}", "res \"etag\" setting when enabled should send ETag in response to BIND request", "cookie-sessions GET / should set a session cookie", "app .use(path, middleware) should reject null as middleware", "app.router methods should include UNLINK", "content-negotiation GET /users should accept to application/json", "Route .VERB should support .get", "req .subdomains otherwise should return an empty array", "res .format(obj) in router should allow wildcard type/subtypes", "res .jsonp(object) when given an array should respond with json", "res .sendFile(path, fn) should invoke the callback when client already aborted", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "resource GET /users/9 should respond with error", "req .accepts(types) should return the first acceptable type", "req .acceptsEncodingss should be false if encoding not accepted", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .send(code, number) should send number as json", "config .set() should return the app when undefined", "mvc GET /users should display a list of users", "app .param(name, fn) should support altering req.params across routes", "config .get() when mounted should default to the parent app", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res .append(field, val) should get reset by res.set(field, val)", "req .range(size) should accept any type", "res .sendfile(path, fn) should invoke the callback when client aborts", "app.router methods should include GET", "app.router methods should include DEL", "Router .param should call param function when routing middleware", "app.router decode params should not accept params in malformed paths", "Router should handle missing URL", "markdown GET / should respond with html", "req .query should default to parse complex keys", "app.router methods should reject numbers for app.acl", "middleware .next() should behave like connect", "resource DELETE /users/1 should delete user 1", "utils.setCharset(type, charset) should return type if not given charset", "res .jsonp(object, status) should use status as second number for backwards compat", "req .fresh should return false without response headers", "req .route should be the executed Route", "app.router * should denote a greedy capture group", "req.is() when given an extension should lookup the mime type", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "app.router * should span multiple segments", "res .json(object) when given primitives should respond with json for null", "res when accepting html should escape the url", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "utils.wetag(body, encoding) should support buffer", "app.all() should add a router per method", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "req .acceptsEncodingss should be true if encoding accepted", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "utils.etag(body, encoding) should support strings", "app.listen() should wrap with an HTTP server", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should reject numbers for app.proppatch", "Router FQDN should not obscure FQDNs", "res .set(field, values) should set multiple response header fields", "res .sendfile(path) should accept headers option", "res .jsonp(object) should not escape utf whitespace for json fallback", "app .use(app) should set the child's .parent", "res .json(object) should not support jsonp callbacks", "req .baseUrl should be empty for top-level route", "app.router methods should include PROPFIND", "res .jsonp(object) should escape utf whitespace", "app .render(name, options, fn) should give precedence to app.render() locals", "app.router * should work with several", "config .disabled() should return false when set", "app.router methods should include ACL", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "req .accepts(types) should return the first when Accept is not present", "req .subdomains with no host should return an empty array", "Route .all should handle VERBS", "mvc GET /user/:id/edit should display the edit form", "res .sendFile(path, fn) should invoke the callback when complete", "req.is() when given type/* should return the full type when matching", "app.router should allow rewriting of the url", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "req .secure when X-Forwarded-Proto is missing should return false when http", "res .format(obj) given .default should work when only .default is provided", "app.router params should merge numeric indices req.params when more in parent", "req .hostname should return the Host when present", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "app.router methods should include POST", "req .acceptsLanguage should be false if language not accepted", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app.router params should merge numeric indices req.params", "error GET / should respond with 500", "res .format(obj) with extnames should Vary: Accept", "res should not perform freshness check unless 2xx or 304", "res when accepting text should respond with text", "req .param(name) should check req.body", "res .render(name) when \"view engine\" is given should render the template", "res \"etag\" setting when \"strong\" should send strong ETag", "app should 404 without routes", "app.router methods should reject numbers for app.post", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should reject numbers for app.merge", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app .render(name, fn) should support absolute paths with \"view engine\"", "config .set() should return the app", "mvc GET /pet/0 should get pet", "res .attachment() should Content-Disposition to attachment", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "vhost foo.example.com GET / should redirect to /foo", "res \"etag\" setting when enabled should send ETag in response to POST request", "res .set(field, values) should throw when Content-Type is an array", "app .use(path, middleware) should support array of paths with middleware array", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "cookies GET / should have a form", "req .query when \"query parser\" is extended should parse complex keys", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res on failure should remove Content-Disposition", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .send(String) should override charset in Content-Type", "res .sendfile(path) with a relative path should next(404) when not found", "app.router :name? should populate the capture group", "req .fresh should return false when the resource is modified", "req .range(size, options) with \"combine: true\" option should return combined ranges", "res .jsonp(object) should respond with jsonp", "route-separation GET /users should list users", "Route errors should handle throwing inside error handlers", "exports should permit modifying the .request prototype", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "auth GET / should redirect to /login", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "exports should permit modifying the .response prototype", "app.route should all .VERB after .all", "OPTIONS should forward requests down the middleware chain", "Router FQDN should adjust FQDN req.url", "req .accepts(types) should return the first acceptable type with canonical mime types", "app.router methods should reject numbers for app.put", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "res .render(name, option) should give precedence to res.render() locals over res.locals", "res should be chainable", "app.router methods should include UNSUBSCRIBE", "web-service GET /api/users with a valid api key should respond users json", "req .accepts(type) should return true when present", "app.router methods should include SEARCH", "app.router should be .use()able", "Router should not stack overflow with many registered routes", "app.router methods should reject numbers for app.trace", "app.router params should ignore invalid incoming req.params", "config .set() should set a value", "app.router methods should include PUT", "req .acceptsLanguages should be false if language not accepted", "auth GET /restricted should redirect to /login without cookie", "res .sendFile(path) should error missing path", "app.router methods should include SOURCE", "req.is() when given */subtype should ignore charset", "res .clearCookie(name, options) should set the given params", "res .download(path, filename, fn) should invoke the callback", "req .query when \"query parser\" an unknown value should throw", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "downloads GET /files/amazing.txt should have a download header", "app .use(app) should support dynamic routes", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "Router error should handle throwing inside routes with params", "res .redirect(url, status) should set the response status", "res .send(Buffer) should set ETag", "res \"etag\" setting when enabled should not override ETag when manually set", "app.router methods should include REBIND", "mvc GET / should redirect to /users", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "req .hostname should work with IPv6 Host"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 850, "failed_count": 2, "skipped_count": 0, "passed_tests": ["app.router when next(\"route\") is called should jump to next route", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router :name? should denote an optional capture group", "resource GET / should respond with instructions", "req .xhr should return true when X-Requested-With is xmlhttprequest", "res .send(Buffer) should send as octet-stream", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "res when accepting text should encode the url", "res should always check regardless of length", "app.router methods should reject numbers for app.unlock", "multi-router GET /api/v2/users should respond with users from APIv2", "app.all() should run the callback for a method just once", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "vhost bar.example.com GET / should redirect to /bar", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "Router .multiple callbacks should throw if a callback is null", "app .engine(ext, fn) should map a template engine", "res .append(field, val) should work with cookies", "exports should expose Router", "app.router :name should work following a partial capture group", "markdown GET /fail should respond with an error", "auth POST /login should fail without proper username", "res .jsonp(object) should include security header and prologue", "resource DELETE /users/9 should fail", "req.is() when given */subtype should return the full type when matching", "error-pages Accept: text/plain GET /403 should respond with 403", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "req .subdomains when present should work with IPv6 address", "res .sendfile(path) should transfer a directory index file", "content-negotiation GET / should accept to application/json", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "req .fresh should return true when the resource is not modified", "res .cookie(name, string) should allow multiple calls", "res \"etag\" setting when enabled should send ETag in response to LINK request", "app .param(name, fn) should only call once per request", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "Router should support dynamic routes", "app.router methods should include MKCOL", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "Router .param should call when values differ", "req .hostname should work with IPv6 Host and port", "res .links(obj) should set Link header field", "app .render(name, fn) should expose app.locals", "app.router methods should include TRACE", "res \"etag\" setting when \"weak\" should send weak ETag", "app.router should restore req.params after leaving router", "req.is() when given type/* should return false when not matching", "req .acceptsLanguages when Accept-Language is not present should always return true", "app.router methods should include NOTIFY", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "config .enabled() should return true when set", "res .send(Object) should send as application/json", "res .set(field, value) should coerce to a string", "req .subdomains when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "req.is() when content-type is not present should return false", "res .cookie(name, string, options) signed without secret should throw an error", "app .param(names, fn) should map the array", "downloads GET / should have a link to amazing.txt", "res .send(null) should set body to \"\"", "app.router methods should reject numbers for app.copy", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "route-separation GET /user/:id should get a user", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "res .set(object) should set multiple fields", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "error-pages GET / should respond with page list", "route-separation GET /user/:id/view should get a user", "req .query when \"query parser\" is a function should parse using function", "app.del() should alias app.delete()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app .use(middleware) should accept multiple arrays of middleware", "app.parent should return the parent when mounted", "params GET /users/foo-bar should fail integer parsing", "exports should permit modifying the .application prototype", "res .jsonp(object) when given primitives should respond with json for Number", "app.router methods should include DELETE", "res .sendFile(path) should transfer a file", "app .render(name, fn) when the file does not exist should provide a helpful error", "app .render(name, fn) should handle render error throws", "res .format(obj) with extnames should set the correct charset for the Content-Type", "params GET /users/0-2 should respond with three users", "Route .VERB should allow fallthrough", "res .json(object) should not override previous Content-Types", "app .VERB() should not get invoked without error handler on error", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsEncoding should be true if encoding accepted", "res .type(str) should set the Content-Type based on a filename", "app.router methods should include LINK", "res .send(Buffer) should not override Content-Type", "config .enable() should set the value to true", "app.router when next(err) is called should call handler in same route, if exists", "app should emit \"mount\" when mounted", "Router should return a function with router methods", "res .jsonp(object) should use first callback parameter with jsonp", "route-map GET /users/:id should get a user", "app.router should allow literal \".\"", "app.router params should merge numeric indices req.params when parent has same number", "route-separation GET /user/:id/edit should get a user to edit", "req .path should return the parsed pathname", "res .jsonp(object) when given primitives should respond with json for String", "app .render(name, fn) caching should always lookup view without cache", "Router .param should call param function when routing VERBS", "config .get() should otherwise return the value", "mvc GET /user/:id when present should display the users pets", "error-pages Accept: application/json GET /500 should respond with 500", "res .append(field, val) should append multiple headers", "error GET /next should respond with 500", "Router .all should be called for any URL when \"*\"", "Router .multiple callbacks should not throw if all callbacks are functions", "req .host should return undefined otherwise", "app should be callable", "res .send() should set body to \"\"", "res should not override previous Content-Types", "utils.wetag(body, encoding) should support strings", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "utils.setCharset(type, charset) should do anything without type", "res \"etag\" setting when enabled should send ETag in response to ACL request", "Router .all should support using .all to capture all http verbs", "utils.setCharset(type, charset) should override charset", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app should inherit from event emitter", "resource GET /users/1..3 should respond with users 1 through 3", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "Router .use should be called for any URL", "res .append(field, val) should accept array of values", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router case sensitivity should be disabled by default", "utils.etag(body, encoding) should support empty string", "mvc POST /user/:id/pet should create a pet for user", "res .sendfile(path) with a relative path should serve relative to \"root\"", "res .status(code) should set the response .statusCode", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "cookies GET / should respond with no cookies", "app.router should throw with notice", "without NODE_ENV should default to development", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "req .secure when X-Forwarded-Proto is present should return false when http", "res .render(name, option) should give precedence to res.locals over app.locals", "app.options() should override the default behavior", "res .format(obj) with extnames should utilize qvalues in negotiation", "utils.setCharset(type, charset) should set charset", "app .locals.settings should expose app settings", "app.router * should work cross-segment", "app.router methods should reject numbers for app.options", "app.router decode params should decode correct params", "req.is() when given a mime type should ignore charset", "res .cookie(name, string, options) should set params", "res .render(name, option) should give precedence to res.render() locals over app.locals", "req .subdomains with trusted X-Forwarded-Host should return an array", "app.router params should restore req.params", "app.router :name should allow several capture groups", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "config .get() when mounted should given precedence to the child", "res .set(field, value) should set the response header field", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "config .get() when mounted should inherit \"trust proxy\" setting", "app.router methods should reject numbers for app.mkcol", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app .param(fn) should map app.param(name, ...) logic", "res \"etag\" setting when enabled should send ETag in response to COPY request", "res \"etag\" setting when enabled should not send ETag for res.send()", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .sendfile(path) with an absolute path should transfer the file", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "Route errors should handle errors via arity 4 functions", "app.router methods should reject numbers for app.mkcalendar", "res .attachment(utf8filename) should add the filename and filename* params", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "app.router methods should reject numbers for app.unbind", "res .format(obj) with parameters should default the Content-Type", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "req .subdomains when present should work with IPv4 address", "route-separation GET / should respond with index", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "res .json(object) when given an object should respond with json", "res .json(status, object) should respond with json and set the .statusCode", "res .sendFile(path) should 404 for directory", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "req .stale should return false when the resource is not modified", "res should not support jsonp callbacks", "res .sendFile(path, fn) should invoke the callback without error when 304", "res .render(name) should error without \"view engine\" set and no file extension", "Router .use should accept array of middleware", "error-pages Accept: text/html GET /403 should respond with 403", "multi-router GET /api/v2/ should respond with APIv2 root handler", "error-pages Accept: text/html GET /500 should respond with 500", "error-pages Accept: text/html GET /404 should respond with 404", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "app.router params should use params from router", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.link", "res .get(field) should get the response header field", "req .accepts(type) should return true when Accept is not present", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "app.router * should allow naming", "app .use(path, middleware) should strip path from req.url", "Router error should skip non error middleware", "app.router decode params should not decode spaces", "res .jsonp(status, object) should respond with json and set the .statusCode", "utils.isAbsolute() should support windows unc", "req .baseUrl should travel through routers correctly", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .param(name) should check req.params", "res .type(str) should set the Content-Type with type/subtype", "app.router methods should reject numbers for app.rebind", "res when accepting neither text or html should respond with an empty body", "req.is() when given */subtype should return false when not matching", "app.router params should overwrite existing req.params by default", "app.router methods should reject numbers for app.mkactivity", "error-pages Accept: text/plain GET /404 should respond with 404", "exports should expose the response prototype", "app .request should extend the request prototype", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "req .range(size) should cap to the given size when open-ended", "req .xhr should return false when not present", "req .get(field) should special-case Referer", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "app .use(app) should support mount-points", "route-map GET /users/:id/pets should get a users pets", "utils.wetag(body, encoding) should support utf8 strings", "app .use(path, middleware) should reject string as middleware", "req .host should work with IPv6 Host and port", "res .render(name) when an error occurs should next(err)", "app.router * should capture everything", "req.is() when given a mime type should return the type when matching", "res .json(object) when given primitives should respond with json for Number", "res.vary() with an array should set the values", "app.router methods should include OPTIONS", "app .render(name, fn) when \"view engine\" is given should render the template", "Router .use should reject number as middleware", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "in production should enable \"view cache\"", "exports should throw on old middlewares", "req .param(name, default) should use the default value unless defined", "app .engine(ext, fn) should work without leading \".\"", "app .use(app) should support mounted app anywhere", "req .subdomains when subdomain offset is set otherwise should return an empty array", "res .cookie(name, string, options) maxAge should set max-age", "req .query when \"query parser\" disabled should not parse complex keys", "res .render(name) should expose app.locals with `name` property", "OPTIONS when error occurs in response handler should pass error to callback", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "content-negotiation GET /users should accept to text/plain", "req .baseUrl should contain full lower path", "req .query when \"query parser\" disabled should not parse query", "app.router methods should include LOCK", "app.router :name should work inside literal parenthesis", "error GET /missing should respond with 404", "res .json(object) when given primitives should respond with json for String", "res .sendfile(path, fn) should invoke the callback when complete", "app.route should return a new route", "exports should expose the application prototype", "Route should work without handlers", "app .use(middleware) should accept multiple arguments", "req .accepts(type) should return false otherwise", "app.router methods should reject numbers for app.notify", "res .set(field, values) should coerce to an array of strings", "app.head() should override", "OPTIONS should only include each method once", "app.router methods should reject numbers for app.head", "req .hostname should strip port number", "res .format(obj) with canonicalized mime types should Vary: Accept", "res .render(name, option) should expose res.locals", "auth GET /login should render login form", "Router .use should reject string as middleware", "cookies GET /forget should clear cookie", "res .jsonp(object) should ignore object callback parameter with jsonp", "res .links(obj) should set Link header field for multiple calls", "OPTIONS should not be affected by app.all", "Router .use should reject null as middleware", "cookie-sessions GET / should display 1 view on revisit", "req .protocol should return the protocol string", "res .append(field, val) should work with res.set(field, val) first", "res .sendfile(path, fn) should invoke the callback on 403", "config .enabled() should default to false", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "res .sendfile(path, fn) should not override manual content-types", "app .param(name, fn) should call when values differ when using \"next\"", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .download(path) should transfer as an attachment", "app .param(name, fn) should defer all the param routes", "req .get(field) should throw missing header name", "res .sendfile(path) should 404 for directory without trailing slash", "res .format(obj) in router when Accept is not present should invoke the first callback", "app .render(name, fn) when an error occurs should invoke the callback", "Route errors should handle throw in .all", "app .response should not be influenced by other app protos", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include HEAD", "req .hostname when \"trust proxy\" is enabled should default to Host", "resource GET /users/1 should respond with user 1", "res .format(obj) in router should utilize qvalues in negotiation", "app.router .:name should denote a format", "app.router :name should match a single segment only", "req .signedCookies should return a signed JSON cookie", "app.router when given a regexp should populate req.params with the captures", "res .send(body, code) should be supported for backwards compat", "route-separation PUT /user/:id/edit should edit a user", "res on failure should invoke the callback", "auth GET /restricted should succeed with proper cookie", "config .set() \"etag\" should throw on bad value", "req .hostname should return undefined otherwise", "Router .multiple callbacks should throw if a callback is undefined", "app .use(path, middleware) should work if path has trailing slash", "app .param(name, fn) should work with encoded values", "req .acceptsLanguages should be true if language accepted", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.checkout", "app.router when next(err) is called should break out of app.router", "utils.flatten(arr) should flatten an array", "res .sendfile(path, fn) should invoke the callback on 404", "Router FQDN should ignore FQDN in path", "res .render(name) should expose app.locals", "app.router methods should reject numbers for app.m-search", "app .engine(ext, fn) should throw when the callback is missing", "utils.isAbsolute() should support windows", "res .sendFile(path) should include ETag", "Router FQDN should ignore FQDN in search", "app .use(path, middleware) should support regexp path", "res \"etag\" setting when enabled should send ETag in response to GET request", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "res .attachment(filename) should set the Content-Type", "res .render(name) should support absolute paths with \"view engine\"", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .render(name) should support index.<engine>", "mvc GET /user/:id when present should display the user", "app.router methods should reject numbers for app.patch", "app.router methods should include COPY", "req .stale should return true without response headers", "app .param(name, fn) should catch thrown error", "res .set(field, values) should not set a charset of one is already set", "res .sendFile(path) should not error if the client aborts", "utils.wetag(body, encoding) should support empty string", "app.router * should eat everything after /", "error-pages Accept: text/plain GET /500 should respond with 500", "app.router methods should reject numbers for app.subscribe", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "mvc GET /pet/0/edit should get pet edit page", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .redirect(url) should encode \"url\"", "Router .param should only call once per request", "multi-router GET / should respond with root handler", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "app.router methods should include BIND", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req.is() when given a mime type should return false when not matching", "req .host should strip port number", "error-pages Accept: application/json GET /403 should respond with 403", "app.mountpath should return the mounted path", "config .get() when mounted should prefer child \"trust proxy\" setting", "app .param(name, fn) should defer to next route", "app.path() should return the canonical", "req .stale should return true when the resource is modified", "res .send(String) should set ETag", "app .use(path, middleware) should accept multiple arrays of middleware", "res .sendfile(path) should transfer a file with urlencoded name", "req .get(field) should throw for non-string header name", "Route .all should stack", "res .location(url) should set the header", "res .location(url) should encode \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "res .sendFile(path, fn) should invoke the callback when client aborts", "res when the request method is HEAD should ignore the body", "app .render(name, options, fn) should render the template", "app .use(middleware) should accept nested arrays of middleware", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "res .download(path, filename) should provide an alternate filename", "res .render(name, option) should expose app.locals", "res .jsonp(object) when given primitives should respond with json", "app.router * should keep correct parameter indexes", "app .use(path, middleware) should support array of paths", "Route .VERB should limit to just .VERB", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "res .sendFile(path) should not override manual content-types", "res .sendfile(path, fn) should invoke the callback on socket error", "config .set() \"etag\" should set \"etag fn\"", "res .send(code, body) should set .statusCode and body", "res .send(undefined) should set body to \"\"", "res .format(obj) in router should Vary: Accept", "app .use(path, middleware) should reject Date as middleware", "res .sendfile(path, fn) should invoke the callback without error when 304", "Router .multiple callbacks should throw if a callback is not a function", "cookies GET / should respond to cookie", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res \"etag\" setting when disabled should send no ETag", "res .sendfile(path) should not serve dotfiles", "res .cookie(name, string, options) maxAge should set relative expires", "app .use(middleware) should invoke middleware for all requests", "res \"etag\" setting when enabled should send ETag for long response", "res .sendStatus(statusCode) should work with unknown code", "req .host when \"trust proxy\" is enabled should default to Host", "app .use(path, middleware) should accept multiple arguments", "app.router methods should include M-SEARCH", "app.router methods should include MKCALENDAR", "req .acceptsEncoding should be false if encoding not accepted", "app.router when given a regexp should match the pathname only", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "res .sendFile(path) with \"root\" option should not transfer relative with without", "req .ip when X-Forwarded-For is not present should return the remote address", "res \"etag\" setting when a function should not send falsy ETag", "app.router :name should work in array of paths", "app.router methods should reject numbers for app.unsubscribe", "HEAD should output the same headers as GET requests", "app.router should allow escaped regexp", "res .render(name, fn) when an error occurs should pass it to the callback", "req .range(size) should cap to the given size", "res .sendFile(path) should 404 when not found", "utils.setCharset(type, charset) should keep charset if not given charset", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res .sendFile(path) should 304 when ETag matches", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "res .redirect(url) should default to a 302 redirect", "throw after .end() should fail gracefully", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.purge", "req .range(size) should return undefined if no range", "utils.isAbsolute() should support unices", "app .use(path, middleware) should accept nested arrays of middleware", "app.router methods should reject numbers for app.bind", "app.router methods should reject numbers for app.propfind", "app.router methods should reject numbers for app.report", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "multi-router GET /api/v1/ should respond with APIv1 root handler", "app.router methods should reject numbers for app.get", "req .host should return the Host when present", "app.router methods should reject numbers for app.source", ".sendfile(path, options) should pass options to send module", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "auth GET /login should display login error", "content-negotiation GET / should accept to text/plain", "res .jsonp(object) should override previous Content-Types with callback", "app.router should run in order added", "app.router methods should include REPORT", "req .query when \"query parser\" is extended should parse parameters with dots", "res \"etag\" setting when disabled should send ETag when manually set", "app .param(name, fn) should catch thrown secondary error", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "res .render(name) should support absolute paths", "cookies POST / should no set cookie w/o reminder", "res .sendFile(path, fn) should invoke the callback on 404", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router trailing slashes should be optional by default", "app .param(name, fn) should not invoke without route handler", "vhost example.com GET /foo should say foo", "res.vary() when the value is present should not add it again", "app.router methods should reject numbers for app.del", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "app .VERB() should only call an error handling routing callback when an error is propagated", "app.router :name should denote a capture group", "config .disable() should set the value to false", "app.router methods should include MKACTIVITY", "app.router methods should include SUBSCRIBE", "web-service GET /api/users without an api key should respond with 400 bad request", "config .disabled() should default to true", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app.router * should be optional", "Route errors should handle throw", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "res when accepting html should include the redirect type", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "req .xhr should case-insensitive", "app .param(fn) should fail if not given fn", "res .sendFile(path, options) should pass options to send module", "res .json(object, status) should use status as second number for backwards compat", "res .sendfile(path) should ignore headers option on 404", "mvc GET /user/:id when not present should 404", "app .use(path, middleware) should invoke middleware for all requests starting with path", "OPTIONS should not respond if the path is not defined", "res .jsonp(object) should not override previous Content-Types with no callback", "Router should support .use of other routers", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "auth POST /login should succeed with proper credentials", "req .xhr should return false otherwise", "app .render(name, fn) should support index.<engine>", "app.route should support dynamic routes", "res .jsonp(object) should disallow arbitrary js", "Router .handle should dispatch", "res.vary() with no arguments should not set Vary", "res should work when mounted", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "params GET /user/0 should respond with a user", "app .engine(ext, fn) should work \"view engine\" setting", "mvc PUT /user/:id should 500 on error", "req.is() when given type/* should ignore charset", "res .jsonp(object) should allow renaming callback", "req .range(size) should have a .type", "res .render(name) when \"views\" is given should lookup the file in the path", "res .set(object) should coerce to a string", "Route .all should add handler", "res .sendFile(path) should transfer a file with special characters in string", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res .format(obj) with parameters should Vary: Accept", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "req .baseUrl should contain lower path", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .sendfile(path, fn) should utilize the same options as express.static()", "req should accept an argument list of type names", "res .cookie(name, object) should generate a JSON cookie", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "app.router methods should include UNLOCK", "req .param(name) should check req.query", "res .clearCookie(name) should set a cookie passed expiry", "res .send(String) should keep charset in Content-Type for Buffers", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "res.vary() with an empty array should not set Vary", "multi-router GET /api/v1/users should respond with users from APIv1", "mvc PUT /user/:id should update the user", "app.router methods should include CHECKOUT", "Router error should handle throwing in handler after async param", "res .format(obj) with canonicalized mime types should default the Content-Type", "app.router methods should reject numbers for app.search", "app .use(path, middleware) should accept array of middleware", "res .format(obj) with extnames should allow wildcard type/subtypes", "res \"etag\" setting when enabled should send ETag for empty string response", "ejs GET / should respond with html", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router * should decore the capture", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "exports should expose the request prototype", "web-service GET /api/repos with a valid api key should respond repos json", "res .format(obj) in router should set the correct charset for the Content-Type", "res .render(name, options, fn) should pass the resulting string", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include MERGE", "app.router when next(\"router\") is called should jump out of router", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "resource GET /users should respond with all users", "res .json(object) \"json spaces\" setting should be undefined by default", "req .ips when X-Forwarded-For is not present should return []", "app .use(path, middleware) should require middleware", "res .format(obj) with parameters should set the correct charset for the Content-Type", "mvc PUT /pet/2 should update the pet", "res .send(String) should not override Content-Type", "route-separation GET /posts should get a list of posts", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router .:name? should denote an optional format", "auth GET /logout should redirect to /", "app.router * should not be greedy immediately after param", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res .render(name, fn) should pass the resulting string", "utils.etag(body, encoding) should support buffer", "res should respond with 304 Not Modified when fresh", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "res .jsonp(object) should allow []", "res .location(url) should not touch already-encoded sequences in \"url\"", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "app.router methods should reject numbers for app.delete", "route-map GET /users should respond with users", "res .format(obj) with extnames should default the Content-Type", "res .locals should be empty by default", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains when subdomain offset is set when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "res .type(str) should default to application/octet-stream", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "app.router * should work within arrays", "app.router params should allow merging existing req.params", "Router FQDN should adjust FQDN req.url with multiple handlers", "res .sendfile(path) with a relative path with non-GET should still serve", "cookie-sessions GET / should display no views", "app.router methods should reject numbers for app.move", "route-map DELETE /users should delete users", "error-pages Accept: application/json GET /404 should respond with 404", "app .render(name, fn) caching should cache with \"view cache\" setting", "res .attachment(utf8filename) should set the Content-Type", "res .json(object) when given an array should respond with json", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "cookies POST / should set a cookie", "app.router methods should include UNBIND", "res .render(name, option) should render the template", "res .sendfile(path, fn) should invoke the callback when client already aborted", "vhost example.com GET / should say hello", "web-service when requesting an invalid route should respond with 404 json", "app .use(middleware) should accept array of middleware", "Router error should handle throwing inside error handlers", "app.route should not error on empty routes", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "auth POST /login should fail without proper password", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "app.router methods should include MOVE", "res .format(obj) given .default should be invoked instead of auto-responding", "res .download(path, fn) should invoke the callback", "res .download(path, filename, options, fn) should invoke the callback", "params GET / should respond with instructions", "app .use(path, middleware) should reject number as middleware", "res .format(obj) in router should default the Content-Type", "app .param(name, fn) should call when values differ", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "res when accepting html should respond with html", "res .sendfile(path) should not error if the client aborts", "config .get() should return undefined when unset", "res .attachment(filename) should add the filename param", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "req .accepts(types) should take quality into account", "Router .use should require middleware", "app .use(path, middleware) should support empty string path", "req .query when \"query parser fn\" is missing should act like \"extended\"", "Router parallel requests should not mix requests", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "req .get(field) should return the header field value", "res \"etag\" setting when a function should send custom ETag", "res .jsonp(object) when given primitives should respond with json for null", "res .sendStatus(statusCode) should send the status code and message as body", "app .use(app) should mount the app", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "app .render(name, fn) when an extension is given should render the template", "app.router methods should include PATCH", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "Router .use should reject Date as middleware", "app.router methods should re-route when method is altered", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .format(obj) with parameters should utilize qvalues in negotiation", "app.router methods should reject numbers for app.unlink", "req .accepts(types) should return false when no match is made", "res .sendfile(path) with a relative path should transfer the file", "params GET /user/9 should fail to find user", "route-separation GET /user/:id should 404 on missing user", "res .send(code) should set .statusCode", "res \"etag\" setting when enabled should send ETag", "app .render(name, fn) should support absolute paths", "Router should handle blank URL", "in development should disable \"view cache\"", "res .redirect(status, url) should set the response status", "req .host should work with IPv6 Host", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "route-separation GET /user/:id/view should 404 on missing user", "res .sendFile(path) with \"headers\" option should accept headers option", "app.router when next() is called should continue lookup", "req .acceptsLanguage should be true if language accepted", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "res .json(object) \"json escape\" setting should be undefined by default", "req .range(size) should return parsed ranges", "app .response should extend the response prototype", "res .sendfile(path) should transfer a file", "app.router should be chainable", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "app.router * should require a preceding /", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "utils.etag(body, encoding) should support utf8 strings", "app .locals(obj) should merge locals", "res.vary() with a string should set the value", "content-negotiation GET /users should default to text/html", "res when accepting text should include the redirect type", "res .sendfile(path) should accept dotfiles option", "HEAD should default to GET", "app .param(name, fn) should not call when values differ on error", "Route errors should handle single error handler", "app .param(name, fn) should map logic for a single param", "app.router methods should reject numbers for app.lock", "app.router methods should include PURGE", "res .send(String) should send as html", "downloads GET /files/missing.txt should respond with 404", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "app.router methods should include PROPPATCH", "res .send(Buffer) should not override ETag", "req .query should default to {}", "res \"etag\" setting when enabled should send ETag in response to BIND request", "cookie-sessions GET / should set a session cookie", "app .use(path, middleware) should reject null as middleware", "app.router methods should include UNLINK", "content-negotiation GET /users should accept to application/json", "Route .VERB should support .get", "req .subdomains otherwise should return an empty array", "res .format(obj) in router should allow wildcard type/subtypes", "res .jsonp(object) when given an array should respond with json", "res .sendFile(path, fn) should invoke the callback when client already aborted", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "resource GET /users/9 should respond with error", "req .accepts(types) should return the first acceptable type", "req .acceptsEncodingss should be false if encoding not accepted", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .send(code, number) should send number as json", "config .set() should return the app when undefined", "mvc GET /users should display a list of users", "app .param(name, fn) should support altering req.params across routes", "config .get() when mounted should default to the parent app", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res .append(field, val) should get reset by res.set(field, val)", "req .range(size) should accept any type", "res .sendfile(path, fn) should invoke the callback when client aborts", "app.router methods should include GET", "app.router methods should include DEL", "Router .param should call param function when routing middleware", "app.router decode params should not accept params in malformed paths", "Router should handle missing URL", "markdown GET / should respond with html", "req .query should default to parse complex keys", "app.router methods should reject numbers for app.acl", "middleware .next() should behave like connect", "resource DELETE /users/1 should delete user 1", "utils.setCharset(type, charset) should return type if not given charset", "res .jsonp(object, status) should use status as second number for backwards compat", "req .fresh should return false without response headers", "req .route should be the executed Route", "app.router * should denote a greedy capture group", "req.is() when given an extension should lookup the mime type", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "app.router * should span multiple segments", "res .json(object) when given primitives should respond with json for null", "res when accepting html should escape the url", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "utils.wetag(body, encoding) should support buffer", "app.all() should add a router per method", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "req .acceptsEncodingss should be true if encoding accepted", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "utils.etag(body, encoding) should support strings", "app.listen() should wrap with an HTTP server", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should reject numbers for app.proppatch", "Router FQDN should not obscure FQDNs", "res .set(field, values) should set multiple response header fields", "res .sendfile(path) should accept headers option", "res .jsonp(object) should not escape utf whitespace for json fallback", "app .use(app) should set the child's .parent", "res .json(object) should not support jsonp callbacks", "req .baseUrl should be empty for top-level route", "app.router methods should include PROPFIND", "res .jsonp(object) should escape utf whitespace", "app .render(name, options, fn) should give precedence to app.render() locals", "app.router * should work with several", "config .disabled() should return false when set", "app.router methods should include ACL", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "req .accepts(types) should return the first when Accept is not present", "req .subdomains with no host should return an empty array", "Route .all should handle VERBS", "mvc GET /user/:id/edit should display the edit form", "res .sendFile(path, fn) should invoke the callback when complete", "req.is() when given type/* should return the full type when matching", "app.router should allow rewriting of the url", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "req .secure when X-Forwarded-Proto is missing should return false when http", "res .format(obj) given .default should work when only .default is provided", "app.router params should merge numeric indices req.params when more in parent", "req .hostname should return the Host when present", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "app.router methods should include POST", "req .acceptsLanguage should be false if language not accepted", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app.router params should merge numeric indices req.params", "error GET / should respond with 500", "res .format(obj) with extnames should Vary: Accept", "res should not perform freshness check unless 2xx or 304", "res when accepting text should respond with text", "req .param(name) should check req.body", "res .render(name) when \"view engine\" is given should render the template", "res \"etag\" setting when \"strong\" should send strong ETag", "app should 404 without routes", "app.router methods should reject numbers for app.post", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should reject numbers for app.merge", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app .render(name, fn) should support absolute paths with \"view engine\"", "config .set() should return the app", "mvc GET /pet/0 should get pet", "res .attachment() should Content-Disposition to attachment", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "vhost foo.example.com GET / should redirect to /foo", "res \"etag\" setting when enabled should send ETag in response to POST request", "res .set(field, values) should throw when Content-Type is an array", "app .use(path, middleware) should support array of paths with middleware array", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "cookies GET / should have a form", "req .query when \"query parser\" is extended should parse complex keys", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res on failure should remove Content-Disposition", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .send(String) should override charset in Content-Type", "res .sendfile(path) with a relative path should next(404) when not found", "app.router :name? should populate the capture group", "req .fresh should return false when the resource is modified", "req .range(size, options) with \"combine: true\" option should return combined ranges", "res .jsonp(object) should respond with jsonp", "route-separation GET /users should list users", "Route errors should handle throwing inside error handlers", "exports should permit modifying the .request prototype", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "auth GET / should redirect to /login", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "exports should permit modifying the .response prototype", "app.route should all .VERB after .all", "OPTIONS should forward requests down the middleware chain", "Router FQDN should adjust FQDN req.url", "req .accepts(types) should return the first acceptable type with canonical mime types", "app.router methods should reject numbers for app.put", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "res .render(name, option) should give precedence to res.render() locals over res.locals", "res should be chainable", "app.router methods should include UNSUBSCRIBE", "web-service GET /api/users with a valid api key should respond users json", "req .accepts(type) should return true when present", "app.router methods should include SEARCH", "app.router should be .use()able", "Router should not stack overflow with many registered routes", "app.router methods should reject numbers for app.trace", "app.router params should ignore invalid incoming req.params", "config .set() should set a value", "app.router methods should include PUT", "req .acceptsLanguages should be false if language not accepted", "auth GET /restricted should redirect to /login without cookie", "res .sendFile(path) should error missing path", "app.router methods should include SOURCE", "req.is() when given */subtype should ignore charset", "res .clearCookie(name, options) should set the given params", "res .download(path, filename, fn) should invoke the callback", "req .query when \"query parser\" an unknown value should throw", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "downloads GET /files/amazing.txt should have a download header", "app .use(app) should support dynamic routes", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "Router error should handle throwing inside routes with params", "res .redirect(url, status) should set the response status", "res .send(Buffer) should set ETag", "res \"etag\" setting when enabled should not override ETag when manually set", "app.router methods should include REBIND", "mvc GET / should redirect to /users", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "req .hostname should work with IPv6 Host"], "failed_tests": ["Route errors should handle throws in asyncFunction", "Route errors should handle throwing inside async error handlers"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 852, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app.router when next(\"route\") is called should jump to next route", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router :name? should denote an optional capture group", "resource GET / should respond with instructions", "req .xhr should return true when X-Requested-With is xmlhttprequest", "res .send(Buffer) should send as octet-stream", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "res when accepting text should encode the url", "res should always check regardless of length", "app.router methods should reject numbers for app.unlock", "multi-router GET /api/v2/users should respond with users from APIv2", "app.all() should run the callback for a method just once", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "vhost bar.example.com GET / should redirect to /bar", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "Router .multiple callbacks should throw if a callback is null", "app .engine(ext, fn) should map a template engine", "res .append(field, val) should work with cookies", "exports should expose Router", "app.router :name should work following a partial capture group", "markdown GET /fail should respond with an error", "auth POST /login should fail without proper username", "res .jsonp(object) should include security header and prologue", "resource DELETE /users/9 should fail", "req.is() when given */subtype should return the full type when matching", "error-pages Accept: text/plain GET /403 should respond with 403", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "req .subdomains when present should work with IPv6 address", "res .sendfile(path) should transfer a directory index file", "content-negotiation GET / should accept to application/json", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "req .fresh should return true when the resource is not modified", "res .cookie(name, string) should allow multiple calls", "res \"etag\" setting when enabled should send ETag in response to LINK request", "app .param(name, fn) should only call once per request", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "Router should support dynamic routes", "app.router methods should include MKCOL", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "Router .param should call when values differ", "req .hostname should work with IPv6 Host and port", "res .links(obj) should set Link header field", "app .render(name, fn) should expose app.locals", "app.router methods should include TRACE", "res \"etag\" setting when \"weak\" should send weak ETag", "app.router should restore req.params after leaving router", "req.is() when given type/* should return false when not matching", "req .acceptsLanguages when Accept-Language is not present should always return true", "app.router methods should include NOTIFY", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "config .enabled() should return true when set", "res .send(Object) should send as application/json", "res .set(field, value) should coerce to a string", "req .subdomains when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "req.is() when content-type is not present should return false", "res .cookie(name, string, options) signed without secret should throw an error", "app .param(names, fn) should map the array", "downloads GET / should have a link to amazing.txt", "res .send(null) should set body to \"\"", "app.router methods should reject numbers for app.copy", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "route-separation GET /user/:id should get a user", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "res .set(object) should set multiple fields", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "error-pages GET / should respond with page list", "route-separation GET /user/:id/view should get a user", "req .query when \"query parser\" is a function should parse using function", "app.del() should alias app.delete()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app .use(middleware) should accept multiple arrays of middleware", "app.parent should return the parent when mounted", "params GET /users/foo-bar should fail integer parsing", "exports should permit modifying the .application prototype", "res .jsonp(object) when given primitives should respond with json for Number", "app.router methods should include DELETE", "res .sendFile(path) should transfer a file", "app .render(name, fn) when the file does not exist should provide a helpful error", "app .render(name, fn) should handle render error throws", "res .format(obj) with extnames should set the correct charset for the Content-Type", "params GET /users/0-2 should respond with three users", "Route .VERB should allow fallthrough", "res .json(object) should not override previous Content-Types", "app .VERB() should not get invoked without error handler on error", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsEncoding should be true if encoding accepted", "res .type(str) should set the Content-Type based on a filename", "app.router methods should include LINK", "res .send(Buffer) should not override Content-Type", "config .enable() should set the value to true", "app.router when next(err) is called should call handler in same route, if exists", "app should emit \"mount\" when mounted", "Router should return a function with router methods", "res .jsonp(object) should use first callback parameter with jsonp", "route-map GET /users/:id should get a user", "app.router should allow literal \".\"", "app.router params should merge numeric indices req.params when parent has same number", "route-separation GET /user/:id/edit should get a user to edit", "req .path should return the parsed pathname", "res .jsonp(object) when given primitives should respond with json for String", "app .render(name, fn) caching should always lookup view without cache", "Router .param should call param function when routing VERBS", "config .get() should otherwise return the value", "mvc GET /user/:id when present should display the users pets", "error-pages Accept: application/json GET /500 should respond with 500", "res .append(field, val) should append multiple headers", "error GET /next should respond with 500", "Router .all should be called for any URL when \"*\"", "Router .multiple callbacks should not throw if all callbacks are functions", "req .host should return undefined otherwise", "app should be callable", "res .send() should set body to \"\"", "res should not override previous Content-Types", "utils.wetag(body, encoding) should support strings", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "utils.setCharset(type, charset) should do anything without type", "res \"etag\" setting when enabled should send ETag in response to ACL request", "Router .all should support using .all to capture all http verbs", "utils.setCharset(type, charset) should override charset", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app should inherit from event emitter", "resource GET /users/1..3 should respond with users 1 through 3", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "Router .use should be called for any URL", "res .append(field, val) should accept array of values", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router case sensitivity should be disabled by default", "utils.etag(body, encoding) should support empty string", "mvc POST /user/:id/pet should create a pet for user", "res .sendfile(path) with a relative path should serve relative to \"root\"", "res .status(code) should set the response .statusCode", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "cookies GET / should respond with no cookies", "app.router should throw with notice", "without NODE_ENV should default to development", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "req .secure when X-Forwarded-Proto is present should return false when http", "res .render(name, option) should give precedence to res.locals over app.locals", "app.options() should override the default behavior", "res .format(obj) with extnames should utilize qvalues in negotiation", "utils.setCharset(type, charset) should set charset", "app .locals.settings should expose app settings", "app.router * should work cross-segment", "app.router methods should reject numbers for app.options", "app.router decode params should decode correct params", "req.is() when given a mime type should ignore charset", "res .cookie(name, string, options) should set params", "res .render(name, option) should give precedence to res.render() locals over app.locals", "req .subdomains with trusted X-Forwarded-Host should return an array", "app.router params should restore req.params", "app.router :name should allow several capture groups", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "config .get() when mounted should given precedence to the child", "res .set(field, value) should set the response header field", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "config .get() when mounted should inherit \"trust proxy\" setting", "app.router methods should reject numbers for app.mkcol", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app .param(fn) should map app.param(name, ...) logic", "res \"etag\" setting when enabled should send ETag in response to COPY request", "res \"etag\" setting when enabled should not send ETag for res.send()", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .sendfile(path) with an absolute path should transfer the file", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "Route errors should handle errors via arity 4 functions", "app.router methods should reject numbers for app.mkcalendar", "res .attachment(utf8filename) should add the filename and filename* params", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "app.router methods should reject numbers for app.unbind", "res .format(obj) with parameters should default the Content-Type", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "req .subdomains when present should work with IPv4 address", "route-separation GET / should respond with index", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "res .json(object) when given an object should respond with json", "res .json(status, object) should respond with json and set the .statusCode", "res .sendFile(path) should 404 for directory", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "req .stale should return false when the resource is not modified", "res should not support jsonp callbacks", "res .sendFile(path, fn) should invoke the callback without error when 304", "res .render(name) should error without \"view engine\" set and no file extension", "Router .use should accept array of middleware", "error-pages Accept: text/html GET /403 should respond with 403", "multi-router GET /api/v2/ should respond with APIv2 root handler", "error-pages Accept: text/html GET /500 should respond with 500", "error-pages Accept: text/html GET /404 should respond with 404", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "app.router params should use params from router", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.link", "res .get(field) should get the response header field", "req .accepts(type) should return true when Accept is not present", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "app.router * should allow naming", "app .use(path, middleware) should strip path from req.url", "Router error should skip non error middleware", "app.router decode params should not decode spaces", "res .jsonp(status, object) should respond with json and set the .statusCode", "utils.isAbsolute() should support windows unc", "req .baseUrl should travel through routers correctly", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .param(name) should check req.params", "res .type(str) should set the Content-Type with type/subtype", "app.router methods should reject numbers for app.rebind", "res when accepting neither text or html should respond with an empty body", "req.is() when given */subtype should return false when not matching", "app.router params should overwrite existing req.params by default", "app.router methods should reject numbers for app.mkactivity", "error-pages Accept: text/plain GET /404 should respond with 404", "exports should expose the response prototype", "app .request should extend the request prototype", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "req .range(size) should cap to the given size when open-ended", "req .xhr should return false when not present", "req .get(field) should special-case Referer", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "app .use(app) should support mount-points", "route-map GET /users/:id/pets should get a users pets", "utils.wetag(body, encoding) should support utf8 strings", "app .use(path, middleware) should reject string as middleware", "req .host should work with IPv6 Host and port", "res .render(name) when an error occurs should next(err)", "app.router * should capture everything", "req.is() when given a mime type should return the type when matching", "res .json(object) when given primitives should respond with json for Number", "res.vary() with an array should set the values", "app.router methods should include OPTIONS", "app .render(name, fn) when \"view engine\" is given should render the template", "Router .use should reject number as middleware", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "in production should enable \"view cache\"", "exports should throw on old middlewares", "req .param(name, default) should use the default value unless defined", "app .engine(ext, fn) should work without leading \".\"", "app .use(app) should support mounted app anywhere", "req .subdomains when subdomain offset is set otherwise should return an empty array", "res .cookie(name, string, options) maxAge should set max-age", "req .query when \"query parser\" disabled should not parse complex keys", "res .render(name) should expose app.locals with `name` property", "OPTIONS when error occurs in response handler should pass error to callback", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "content-negotiation GET /users should accept to text/plain", "req .baseUrl should contain full lower path", "Route errors should handle throws in asyncFunction", "app.router methods should include LOCK", "app.router :name should work inside literal parenthesis", "req .query when \"query parser\" disabled should not parse query", "error GET /missing should respond with 404", "res .json(object) when given primitives should respond with json for String", "res .sendfile(path, fn) should invoke the callback when complete", "app.route should return a new route", "exports should expose the application prototype", "Route should work without handlers", "app .use(middleware) should accept multiple arguments", "req .accepts(type) should return false otherwise", "app.router methods should reject numbers for app.notify", "res .set(field, values) should coerce to an array of strings", "app.head() should override", "OPTIONS should only include each method once", "app.router methods should reject numbers for app.head", "req .hostname should strip port number", "res .format(obj) with canonicalized mime types should Vary: Accept", "res .render(name, option) should expose res.locals", "auth GET /login should render login form", "Router .use should reject string as middleware", "cookies GET /forget should clear cookie", "res .jsonp(object) should ignore object callback parameter with jsonp", "res .links(obj) should set Link header field for multiple calls", "OPTIONS should not be affected by app.all", "Router .use should reject null as middleware", "cookie-sessions GET / should display 1 view on revisit", "req .protocol should return the protocol string", "res .append(field, val) should work with res.set(field, val) first", "res .sendfile(path, fn) should invoke the callback on 403", "config .enabled() should default to false", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "res .sendfile(path, fn) should not override manual content-types", "app .param(name, fn) should call when values differ when using \"next\"", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .download(path) should transfer as an attachment", "app .param(name, fn) should defer all the param routes", "req .get(field) should throw missing header name", "res .sendfile(path) should 404 for directory without trailing slash", "res .format(obj) in router when Accept is not present should invoke the first callback", "app .render(name, fn) when an error occurs should invoke the callback", "Route errors should handle throw in .all", "app .response should not be influenced by other app protos", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include HEAD", "req .hostname when \"trust proxy\" is enabled should default to Host", "resource GET /users/1 should respond with user 1", "res .format(obj) in router should utilize qvalues in negotiation", "app.router .:name should denote a format", "app.router :name should match a single segment only", "req .signedCookies should return a signed JSON cookie", "app.router when given a regexp should populate req.params with the captures", "res .send(body, code) should be supported for backwards compat", "route-separation PUT /user/:id/edit should edit a user", "res on failure should invoke the callback", "auth GET /restricted should succeed with proper cookie", "config .set() \"etag\" should throw on bad value", "req .hostname should return undefined otherwise", "Router .multiple callbacks should throw if a callback is undefined", "app .use(path, middleware) should work if path has trailing slash", "app .param(name, fn) should work with encoded values", "req .acceptsLanguages should be true if language accepted", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.checkout", "app.router when next(err) is called should break out of app.router", "utils.flatten(arr) should flatten an array", "res .sendfile(path, fn) should invoke the callback on 404", "Router FQDN should ignore FQDN in path", "res .render(name) should expose app.locals", "app.router methods should reject numbers for app.m-search", "app .engine(ext, fn) should throw when the callback is missing", "utils.isAbsolute() should support windows", "res .sendFile(path) should include ETag", "Router FQDN should ignore FQDN in search", "app .use(path, middleware) should support regexp path", "res \"etag\" setting when enabled should send ETag in response to GET request", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "res .attachment(filename) should set the Content-Type", "res .render(name) should support absolute paths with \"view engine\"", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .render(name) should support index.<engine>", "mvc GET /user/:id when present should display the user", "app.router methods should reject numbers for app.patch", "app.router methods should include COPY", "req .stale should return true without response headers", "app .param(name, fn) should catch thrown error", "res .set(field, values) should not set a charset of one is already set", "res .sendFile(path) should not error if the client aborts", "utils.wetag(body, encoding) should support empty string", "app.router * should eat everything after /", "error-pages Accept: text/plain GET /500 should respond with 500", "app.router methods should reject numbers for app.subscribe", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "mvc GET /pet/0/edit should get pet edit page", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .redirect(url) should encode \"url\"", "Router .param should only call once per request", "multi-router GET / should respond with root handler", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "app.router methods should include BIND", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req.is() when given a mime type should return false when not matching", "req .host should strip port number", "error-pages Accept: application/json GET /403 should respond with 403", "app.mountpath should return the mounted path", "config .get() when mounted should prefer child \"trust proxy\" setting", "app .param(name, fn) should defer to next route", "app.path() should return the canonical", "req .stale should return true when the resource is modified", "res .send(String) should set ETag", "app .use(path, middleware) should accept multiple arrays of middleware", "res .sendfile(path) should transfer a file with urlencoded name", "req .get(field) should throw for non-string header name", "Route .all should stack", "res .location(url) should set the header", "res .location(url) should encode \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "res .sendFile(path, fn) should invoke the callback when client aborts", "res when the request method is HEAD should ignore the body", "app .render(name, options, fn) should render the template", "app .use(middleware) should accept nested arrays of middleware", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "res .download(path, filename) should provide an alternate filename", "res .render(name, option) should expose app.locals", "res .jsonp(object) when given primitives should respond with json", "app.router * should keep correct parameter indexes", "app .use(path, middleware) should support array of paths", "Route .VERB should limit to just .VERB", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "res .sendFile(path) should not override manual content-types", "res .sendfile(path, fn) should invoke the callback on socket error", "config .set() \"etag\" should set \"etag fn\"", "res .send(code, body) should set .statusCode and body", "res .send(undefined) should set body to \"\"", "res .format(obj) in router should Vary: Accept", "app .use(path, middleware) should reject Date as middleware", "res .sendfile(path, fn) should invoke the callback without error when 304", "Router .multiple callbacks should throw if a callback is not a function", "Route errors should handle throwing inside async error handlers", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res \"etag\" setting when disabled should send no ETag", "cookies GET / should respond to cookie", "res .sendfile(path) should not serve dotfiles", "res .cookie(name, string, options) maxAge should set relative expires", "app .use(middleware) should invoke middleware for all requests", "res \"etag\" setting when enabled should send ETag for long response", "res .sendStatus(statusCode) should work with unknown code", "req .host when \"trust proxy\" is enabled should default to Host", "app .use(path, middleware) should accept multiple arguments", "app.router methods should include M-SEARCH", "app.router methods should include MKCALENDAR", "req .acceptsEncoding should be false if encoding not accepted", "app.router when given a regexp should match the pathname only", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "res .sendFile(path) with \"root\" option should not transfer relative with without", "req .ip when X-Forwarded-For is not present should return the remote address", "res \"etag\" setting when a function should not send falsy ETag", "app.router :name should work in array of paths", "app.router methods should reject numbers for app.unsubscribe", "HEAD should output the same headers as GET requests", "app.router should allow escaped regexp", "res .render(name, fn) when an error occurs should pass it to the callback", "req .range(size) should cap to the given size", "res .sendFile(path) should 404 when not found", "utils.setCharset(type, charset) should keep charset if not given charset", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res .sendFile(path) should 304 when ETag matches", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "res .redirect(url) should default to a 302 redirect", "throw after .end() should fail gracefully", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.purge", "req .range(size) should return undefined if no range", "utils.isAbsolute() should support unices", "app .use(path, middleware) should accept nested arrays of middleware", "app.router methods should reject numbers for app.bind", "app.router methods should reject numbers for app.propfind", "app.router methods should reject numbers for app.report", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "multi-router GET /api/v1/ should respond with APIv1 root handler", "app.router methods should reject numbers for app.get", "req .host should return the Host when present", "app.router methods should reject numbers for app.source", ".sendfile(path, options) should pass options to send module", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "auth GET /login should display login error", "content-negotiation GET / should accept to text/plain", "res .jsonp(object) should override previous Content-Types with callback", "app.router should run in order added", "app.router methods should include REPORT", "req .query when \"query parser\" is extended should parse parameters with dots", "res \"etag\" setting when disabled should send ETag when manually set", "app .param(name, fn) should catch thrown secondary error", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "res .render(name) should support absolute paths", "cookies POST / should no set cookie w/o reminder", "res .sendFile(path, fn) should invoke the callback on 404", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router trailing slashes should be optional by default", "app .param(name, fn) should not invoke without route handler", "vhost example.com GET /foo should say foo", "res.vary() when the value is present should not add it again", "app.router methods should reject numbers for app.del", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "app .VERB() should only call an error handling routing callback when an error is propagated", "app.router :name should denote a capture group", "config .disable() should set the value to false", "app.router methods should include MKACTIVITY", "app.router methods should include SUBSCRIBE", "web-service GET /api/users without an api key should respond with 400 bad request", "config .disabled() should default to true", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app.router * should be optional", "Route errors should handle throw", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "res when accepting html should include the redirect type", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "req .xhr should case-insensitive", "app .param(fn) should fail if not given fn", "res .sendFile(path, options) should pass options to send module", "res .json(object, status) should use status as second number for backwards compat", "res .sendfile(path) should ignore headers option on 404", "mvc GET /user/:id when not present should 404", "app .use(path, middleware) should invoke middleware for all requests starting with path", "OPTIONS should not respond if the path is not defined", "res .jsonp(object) should not override previous Content-Types with no callback", "Router should support .use of other routers", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "auth POST /login should succeed with proper credentials", "req .xhr should return false otherwise", "app .render(name, fn) should support index.<engine>", "app.route should support dynamic routes", "res .jsonp(object) should disallow arbitrary js", "Router .handle should dispatch", "res.vary() with no arguments should not set Vary", "res should work when mounted", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "params GET /user/0 should respond with a user", "app .engine(ext, fn) should work \"view engine\" setting", "mvc PUT /user/:id should 500 on error", "req.is() when given type/* should ignore charset", "res .jsonp(object) should allow renaming callback", "req .range(size) should have a .type", "res .render(name) when \"views\" is given should lookup the file in the path", "res .set(object) should coerce to a string", "Route .all should add handler", "res .sendFile(path) should transfer a file with special characters in string", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res .format(obj) with parameters should Vary: Accept", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "req .baseUrl should contain lower path", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .sendfile(path, fn) should utilize the same options as express.static()", "req should accept an argument list of type names", "res .cookie(name, object) should generate a JSON cookie", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "app.router methods should include UNLOCK", "req .param(name) should check req.query", "res .clearCookie(name) should set a cookie passed expiry", "res .send(String) should keep charset in Content-Type for Buffers", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "res.vary() with an empty array should not set Vary", "multi-router GET /api/v1/users should respond with users from APIv1", "mvc PUT /user/:id should update the user", "app.router methods should include CHECKOUT", "Router error should handle throwing in handler after async param", "res .format(obj) with canonicalized mime types should default the Content-Type", "app.router methods should reject numbers for app.search", "app .use(path, middleware) should accept array of middleware", "res .format(obj) with extnames should allow wildcard type/subtypes", "res \"etag\" setting when enabled should send ETag for empty string response", "ejs GET / should respond with html", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router * should decore the capture", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "exports should expose the request prototype", "web-service GET /api/repos with a valid api key should respond repos json", "res .format(obj) in router should set the correct charset for the Content-Type", "res .render(name, options, fn) should pass the resulting string", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include MERGE", "app.router when next(\"router\") is called should jump out of router", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "resource GET /users should respond with all users", "res .json(object) \"json spaces\" setting should be undefined by default", "req .ips when X-Forwarded-For is not present should return []", "app .use(path, middleware) should require middleware", "res .format(obj) with parameters should set the correct charset for the Content-Type", "mvc PUT /pet/2 should update the pet", "res .send(String) should not override Content-Type", "route-separation GET /posts should get a list of posts", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router .:name? should denote an optional format", "auth GET /logout should redirect to /", "app.router * should not be greedy immediately after param", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res .render(name, fn) should pass the resulting string", "utils.etag(body, encoding) should support buffer", "res should respond with 304 Not Modified when fresh", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "res .jsonp(object) should allow []", "res .location(url) should not touch already-encoded sequences in \"url\"", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "app.router methods should reject numbers for app.delete", "route-map GET /users should respond with users", "res .format(obj) with extnames should default the Content-Type", "res .locals should be empty by default", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains when subdomain offset is set when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "res .type(str) should default to application/octet-stream", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "app.router * should work within arrays", "app.router params should allow merging existing req.params", "Router FQDN should adjust FQDN req.url with multiple handlers", "res .sendfile(path) with a relative path with non-GET should still serve", "cookie-sessions GET / should display no views", "app.router methods should reject numbers for app.move", "route-map DELETE /users should delete users", "error-pages Accept: application/json GET /404 should respond with 404", "app .render(name, fn) caching should cache with \"view cache\" setting", "res .attachment(utf8filename) should set the Content-Type", "res .json(object) when given an array should respond with json", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "cookies POST / should set a cookie", "app.router methods should include UNBIND", "res .render(name, option) should render the template", "res .sendfile(path, fn) should invoke the callback when client already aborted", "vhost example.com GET / should say hello", "web-service when requesting an invalid route should respond with 404 json", "app .use(middleware) should accept array of middleware", "Router error should handle throwing inside error handlers", "app.route should not error on empty routes", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "auth POST /login should fail without proper password", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "app.router methods should include MOVE", "res .format(obj) given .default should be invoked instead of auto-responding", "res .download(path, fn) should invoke the callback", "res .download(path, filename, options, fn) should invoke the callback", "params GET / should respond with instructions", "app .use(path, middleware) should reject number as middleware", "res .format(obj) in router should default the Content-Type", "app .param(name, fn) should call when values differ", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "res when accepting html should respond with html", "res .sendfile(path) should not error if the client aborts", "config .get() should return undefined when unset", "res .attachment(filename) should add the filename param", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "req .accepts(types) should take quality into account", "Router .use should require middleware", "app .use(path, middleware) should support empty string path", "req .query when \"query parser fn\" is missing should act like \"extended\"", "Router parallel requests should not mix requests", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "req .get(field) should return the header field value", "res \"etag\" setting when a function should send custom ETag", "res .jsonp(object) when given primitives should respond with json for null", "res .sendStatus(statusCode) should send the status code and message as body", "app .use(app) should mount the app", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "app .render(name, fn) when an extension is given should render the template", "app.router methods should include PATCH", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "Router .use should reject Date as middleware", "app.router methods should re-route when method is altered", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .format(obj) with parameters should utilize qvalues in negotiation", "app.router methods should reject numbers for app.unlink", "req .accepts(types) should return false when no match is made", "res .sendfile(path) with a relative path should transfer the file", "params GET /user/9 should fail to find user", "route-separation GET /user/:id should 404 on missing user", "res .send(code) should set .statusCode", "res \"etag\" setting when enabled should send ETag", "app .render(name, fn) should support absolute paths", "Router should handle blank URL", "in development should disable \"view cache\"", "res .redirect(status, url) should set the response status", "req .host should work with IPv6 Host", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "route-separation GET /user/:id/view should 404 on missing user", "res .sendFile(path) with \"headers\" option should accept headers option", "app.router when next() is called should continue lookup", "req .acceptsLanguage should be true if language accepted", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "res .json(object) \"json escape\" setting should be undefined by default", "req .range(size) should return parsed ranges", "app .response should extend the response prototype", "res .sendfile(path) should transfer a file", "app.router should be chainable", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "app.router * should require a preceding /", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "utils.etag(body, encoding) should support utf8 strings", "app .locals(obj) should merge locals", "res.vary() with a string should set the value", "content-negotiation GET /users should default to text/html", "res when accepting text should include the redirect type", "res .sendfile(path) should accept dotfiles option", "HEAD should default to GET", "app .param(name, fn) should not call when values differ on error", "Route errors should handle single error handler", "app .param(name, fn) should map logic for a single param", "app.router methods should reject numbers for app.lock", "app.router methods should include PURGE", "res .send(String) should send as html", "downloads GET /files/missing.txt should respond with 404", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "app.router methods should include PROPPATCH", "res .send(Buffer) should not override ETag", "req .query should default to {}", "res \"etag\" setting when enabled should send ETag in response to BIND request", "cookie-sessions GET / should set a session cookie", "app .use(path, middleware) should reject null as middleware", "app.router methods should include UNLINK", "content-negotiation GET /users should accept to application/json", "Route .VERB should support .get", "req .subdomains otherwise should return an empty array", "res .format(obj) in router should allow wildcard type/subtypes", "res .jsonp(object) when given an array should respond with json", "res .sendFile(path, fn) should invoke the callback when client already aborted", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "resource GET /users/9 should respond with error", "req .accepts(types) should return the first acceptable type", "req .acceptsEncodingss should be false if encoding not accepted", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .send(code, number) should send number as json", "config .set() should return the app when undefined", "mvc GET /users should display a list of users", "app .param(name, fn) should support altering req.params across routes", "config .get() when mounted should default to the parent app", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res .append(field, val) should get reset by res.set(field, val)", "req .range(size) should accept any type", "res .sendfile(path, fn) should invoke the callback when client aborts", "app.router methods should include GET", "app.router methods should include DEL", "Router .param should call param function when routing middleware", "app.router decode params should not accept params in malformed paths", "Router should handle missing URL", "markdown GET / should respond with html", "req .query should default to parse complex keys", "app.router methods should reject numbers for app.acl", "middleware .next() should behave like connect", "resource DELETE /users/1 should delete user 1", "utils.setCharset(type, charset) should return type if not given charset", "res .jsonp(object, status) should use status as second number for backwards compat", "req .fresh should return false without response headers", "req .route should be the executed Route", "app.router * should denote a greedy capture group", "req.is() when given an extension should lookup the mime type", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "app.router * should span multiple segments", "res .json(object) when given primitives should respond with json for null", "res when accepting html should escape the url", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "utils.wetag(body, encoding) should support buffer", "app.all() should add a router per method", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "req .acceptsEncodingss should be true if encoding accepted", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "utils.etag(body, encoding) should support strings", "app.listen() should wrap with an HTTP server", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should reject numbers for app.proppatch", "Router FQDN should not obscure FQDNs", "res .set(field, values) should set multiple response header fields", "res .sendfile(path) should accept headers option", "res .jsonp(object) should not escape utf whitespace for json fallback", "app .use(app) should set the child's .parent", "res .json(object) should not support jsonp callbacks", "req .baseUrl should be empty for top-level route", "app.router methods should include PROPFIND", "res .jsonp(object) should escape utf whitespace", "app .render(name, options, fn) should give precedence to app.render() locals", "app.router * should work with several", "config .disabled() should return false when set", "app.router methods should include ACL", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "req .accepts(types) should return the first when Accept is not present", "req .subdomains with no host should return an empty array", "Route .all should handle VERBS", "mvc GET /user/:id/edit should display the edit form", "res .sendFile(path, fn) should invoke the callback when complete", "req.is() when given type/* should return the full type when matching", "app.router should allow rewriting of the url", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "req .secure when X-Forwarded-Proto is missing should return false when http", "res .format(obj) given .default should work when only .default is provided", "app.router params should merge numeric indices req.params when more in parent", "req .hostname should return the Host when present", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "app.router methods should include POST", "req .acceptsLanguage should be false if language not accepted", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app.router params should merge numeric indices req.params", "error GET / should respond with 500", "res .format(obj) with extnames should Vary: Accept", "res should not perform freshness check unless 2xx or 304", "res when accepting text should respond with text", "req .param(name) should check req.body", "res .render(name) when \"view engine\" is given should render the template", "res \"etag\" setting when \"strong\" should send strong ETag", "app should 404 without routes", "app.router methods should reject numbers for app.post", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should reject numbers for app.merge", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app .render(name, fn) should support absolute paths with \"view engine\"", "config .set() should return the app", "mvc GET /pet/0 should get pet", "res .attachment() should Content-Disposition to attachment", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "vhost foo.example.com GET / should redirect to /foo", "res \"etag\" setting when enabled should send ETag in response to POST request", "res .set(field, values) should throw when Content-Type is an array", "app .use(path, middleware) should support array of paths with middleware array", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "cookies GET / should have a form", "req .query when \"query parser\" is extended should parse complex keys", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res on failure should remove Content-Disposition", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .send(String) should override charset in Content-Type", "res .sendfile(path) with a relative path should next(404) when not found", "app.router :name? should populate the capture group", "req .fresh should return false when the resource is modified", "req .range(size, options) with \"combine: true\" option should return combined ranges", "res .jsonp(object) should respond with jsonp", "route-separation GET /users should list users", "Route errors should handle throwing inside error handlers", "exports should permit modifying the .request prototype", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "auth GET / should redirect to /login", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "exports should permit modifying the .response prototype", "app.route should all .VERB after .all", "OPTIONS should forward requests down the middleware chain", "Router FQDN should adjust FQDN req.url", "req .accepts(types) should return the first acceptable type with canonical mime types", "app.router methods should reject numbers for app.put", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "res .render(name, option) should give precedence to res.render() locals over res.locals", "res should be chainable", "app.router methods should include UNSUBSCRIBE", "web-service GET /api/users with a valid api key should respond users json", "req .accepts(type) should return true when present", "app.router methods should include SEARCH", "app.router should be .use()able", "Router should not stack overflow with many registered routes", "app.router methods should reject numbers for app.trace", "app.router params should ignore invalid incoming req.params", "config .set() should set a value", "app.router methods should include PUT", "req .acceptsLanguages should be false if language not accepted", "auth GET /restricted should redirect to /login without cookie", "res .sendFile(path) should error missing path", "app.router methods should include SOURCE", "req.is() when given */subtype should ignore charset", "res .clearCookie(name, options) should set the given params", "res .download(path, filename, fn) should invoke the callback", "req .query when \"query parser\" an unknown value should throw", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "downloads GET /files/amazing.txt should have a download header", "app .use(app) should support dynamic routes", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "Router error should handle throwing inside routes with params", "res .redirect(url, status) should set the response status", "res .send(Buffer) should set ETag", "res \"etag\" setting when enabled should not override ETag when manually set", "app.router methods should include REBIND", "mvc GET / should redirect to /users", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "req .hostname should work with IPv6 Host"], "failed_tests": [], "skipped_tests": []}}