{"org": "expressjs", "repo": "express", "number": 3621, "valid": true, "error_msg": "", "fixed_tests": {"req .query should default to parse simple keys": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"app.router when next(\"route\") is called should jump to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when true should not parse primitives with leading whitespaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should send as octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should encode the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should always check regardless of length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to NOTIFY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when a function should not invoke without a body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false should 404 when URL too long": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should 415 on unknown charset prior to verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should map a template engine": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose Router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work following a partial capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should include security header and prologue": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/9 should fail": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with limit option should not change when options altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() should handle empty message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() should not parse extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should allow multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should support gzip encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() charset should parse utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() lastModified when true should include Last-Modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should restore req.params after leaving router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() encoding should be case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() encoding should support gzip encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should ignore standard type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Object) should send as application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCOL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should support n-": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() should handle duplicated middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when content-type is not present should return false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name+ should match many segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(names, fn) should map the array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false with redirect: true should 404 when directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should allow pass-through": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET / should have a link to amazing.txt": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() charset should parse when content-length != char length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true should fall-through when URL malformed": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should set multiple fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages GET / should respond with page list": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.parent should return the parent when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should include original body on error object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DELETE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should handle render error throws": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should allow fallthrough": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type based on a filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should allow custom codes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should emit \"mount\" when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route promise support error handling should pass rejected promise value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should not redirect to protocol-relative locations": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router promise support error handling should pass rejected promise value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/edit should get a user to edit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() should parse text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should append multiple headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() should handle Content-Length: 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should not throw if all callbacks are functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with verify option should assert value is function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should not choke on auth-looking URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should do anything without type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to ACL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should override charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/vnd.api+json\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should inherit from event emitter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect when false should disable redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should accept array of values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc POST /user/:id/pet should create a pet for user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity should be disabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) should set the response .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond with no cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "without NODE_ENV should default to development": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() when JSON is invalid should 400 for incomplete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() should handle empty message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should set charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals.settings should expose app settings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.options": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should decode correct params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) should set params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with trusted X-Forwarded-Host should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with limit option should accept number of bytes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should allow several capture groups": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with inflate option when true should accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should given precedence to the child": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should respond user repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should inherit \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcol": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should assert value if function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should parse for custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() cacheControl when false should ignore maxAge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should add the filename and filename* params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when a function should work without content-type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unbind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" with leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/vnd+octets\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should set Content-Length to the # of octets transferred": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv4 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET / should respond with index": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when \"text/html\" should ignore standard type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support index.html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return false when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/ should respond with APIv2 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose json middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should skip non error middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not decode spaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse array index notation with large array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should travel through routers correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting neither text or html should respond with an empty body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkactivity": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() charset should fail on unknown charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should special-case Referer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mount-points": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets should get a users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return the type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when true should error with type = \"entity.parse.failed\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include OPTIONS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in production should enable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when true should include correct message in stack trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() should 400 when invalid content-length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mounted app anywhere": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS when error occurs in response handler should pass error to callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() encoding should fail on unknown encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work inside literal parenthesis": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /missing should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should return a new route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route should work without handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with limit option should not change when options altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should coerce to an array of strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should only include each method once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should render login form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not be affected by app.all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol should return the protocol string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with res.set(field, val) first": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/notes/groceries.txt should have a download header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ when using \"next\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should support byte ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse multiple key instances": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path) should transfer as an attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when false should parse multiple key instances": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given null should invoke callback with null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an error occurs should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .signedCookies should return a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should populate req.params with the captures": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false with redirect: false should 404 when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should succeed with proper cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should work if path has trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should work with encoded values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should work with large limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with inflate option when true should accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.checkout": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should break out of app.router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.m-search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should throw when the callback is missing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MOVE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() should handle no message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() extensions should be configurable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.patch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() charset should default to utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include COPY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should error with type = \"entity.verify.failed\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET / should respond with root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PURGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include BIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should prefer child \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with limit option should not hang response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.path() should return the canonical": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with inflate option when true should accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with verify option should allow pass-through": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw for non-string header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when the request method is HEAD should ignore the body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() charset should parse utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should limit to just .VERB": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should ignore \"application/x-json\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(undefined) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is not a function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond to cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true should fall-through when OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should allow custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for long response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include M-SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is not present should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should not send falsy ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when undefined should 400 on primitives": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work in array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unsubscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) when an error occurs should pass it to the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should keep charset if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true should fall-through when traversing past root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 304 when ETag matches": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored case-insensitively": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should default to a 302 redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with verify option should allow custom codes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "throw after .end() should fail gracefully": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return undefined if no range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.bind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/ should respond with APIv1 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should not break undefined escape": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() current dir should be served with \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should set Content-Range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should override previous Content-Types with callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should run in order added": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REPORT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown secondary error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length should adapt the Content-Length accordingly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should no set cookie w/o reminder": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() charset should 415 on unknown charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when a function should not invoke without a body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() when the value is present should not add it again": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should assert value if function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should only call an error handling routing callback when an error is propagated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKACTIVITY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should reject string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should ignore hidden files": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should work with unicode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should invoke middleware for all requests starting with path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not respond if the path is not defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should succeed with proper credentials": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" enabled should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should error with type = \"encoding.unsupported\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .handle should dispatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/0 should respond with a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/json\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() should parse application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with verify option should 415 on unknown charset prior to verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should 500 on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() should parse x-www-form-urlencoded": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should have a .type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should add handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file with special characters in string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false with redirect: true should redirect when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req should accept an argument list of type names": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support nesting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() should handle duplicated middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name) should set a cookie passed expiry": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when responding non-2xx or 304 should not alter the status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse deep object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should respond with 416": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an empty array should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodings should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should update the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing in handler after async param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for empty string response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "ejs GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when a \"view\" constructor is given should create an instance of it": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, options, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support ../": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets/:pid should get a users pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true with redirect: true should fall-through when directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MERGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users should respond with all users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() charset should parse codepage charsets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should serve zero-length files": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /pet/2 should update the pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /posts should get a list of posts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /logout should redirect to /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.delete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users should respond with users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose urlencoded middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should default to application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should allow merging existing req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() acceptRanges when false should ignore Rage request header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map DELETE /users should delete users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route promise support should ignore resolved promise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when mounted \"root\" as a file should 404 when trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET / should say hello": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper password": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MOVE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() encoding should support deflate encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should work when at the limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with limit option should not hang response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should ignore \"application/x-foo\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should 413 when inflated value exceeds limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should reject 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false with redirect: false should 404 when directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should return undefined when unset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should add the filename param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should take quality into account": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should work with large limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router parallel requests should not mix requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should send custom ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should send the status code and message as body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should error with type = \"parameters.too.many\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() encoding should support identity encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when a function should parse when truthy value returned": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle blank URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in development should disable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(status, url) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when index file serving disabled should next() on mount point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when index at mount point should redirect correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should set Last-Modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next() is called should continue lookup": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() charset should error with type = \"charset.unsupported\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when a function should work without content-type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() should 400 when invalid content-length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() should handle empty message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with no arguments should throw error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should default to GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle single error handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/missing.txt should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPPATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to BIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should support .get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() should handle Content-Length: 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() should parse JSON": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with limit option should not hang response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should accept any type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should reject 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose raw middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() encoding should be case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/1 should delete user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should return type if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when a function should parse when truthy value returned": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when index file serving disabled should redirect to trailing slash mount point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should throw an error with invalid maxAge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when traversing past root should catch urlencoded ../": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with verify option should error from verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() acceptRanges when true should obey Rage request header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() setHeaders should not get called on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to TRACE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should add a router per method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with limit option should 413 when over limit with Content-Length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should not obscure FQDNs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should set multiple response header fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not escape utf whitespace for json fallback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPFIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should escape utf whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should give precedence to app.render() locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should return false when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include ACL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should work if number is floating point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with no host should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with inflate option when true should accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should redirect directories with query string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is missing should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when more in parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"trust proxy\" should set \"trust proxy fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include POST": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() should handle duplicated middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to HEAD request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should error from verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should respond with text": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should 404 without routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() encoding should support gzip encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.post": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) caching should cache with cache option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0 should get pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment() should Content-Disposition to attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match no slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost foo.example.com GET / should redirect to /foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should set Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should have a form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should override charset in Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should populate the capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() encoding should be case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should respond with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with limit option should accept number of bytes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() extensions should be not be enabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should work with different charsets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET / should redirect to /login": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when traversing past root should not allow root path disclosure": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type with canonical mime types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.put": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with a valid api key should respond users json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with verify option should allow custom codes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be .use()able": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should ignore invalid incoming req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() charset should fail on unknown charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error missing path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name, options) should set the given params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/amazing.txt should have a download header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside routes with params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() setHeaders should reject non-functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not override ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose static middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should denote an optional capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return true when X-Requested-With is xmlhttprequest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() acceptRanges when true should include Accept-Ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an object should invoke callback with an object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/users should respond with users from APIv2": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should run the callback for a method just once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost bar.example.com GET / should redirect to /bar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should work when at the limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given a number should invoke callback with a number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET /fail should respond with an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper username": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with limit option should not change when options altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() encoding should support deflate encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name+ should not match zero segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv6 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return true when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with inflate option when false should not accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCOL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when false should not parse extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include TRACE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"weak\" should send weak ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include NOTIFY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when a function should not invoke without a body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should return true when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should include HTML link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() charset should default to utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed without secret should throw an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(null) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.copy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SOURCE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name* should match zero segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() extensions should support disabling extensions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is a function should parse using function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/foo-bar should fail integer parsing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when \"text/html\" should parse for custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should 415 on unknown charset prior to verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when the file does not exist should provide a helpful error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/0-2 should respond with three users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should not get invoked without error handler on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set the header to \"/\" without referrer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with limit option should error with type = \"entity.too.large\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name+ should match one segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should call handler in same route, if exists": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enable() should set the value to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() lastModified when false should not include Last-Modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should return a function with router methods": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should use first callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when a function should parse when truthy value returned": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow literal \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when parent has same number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodings should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .path should return the parsed pathname": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should always lookup view without cache": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should otherwise return the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /next should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should support identity encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should be callable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send() should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should support using .all to capture all http verbs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true with redirect: true should redirect when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3 should respond with users 1 through 3": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should be called for any URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should error from verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route promise support error handling should pass rejected promise without value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to DELETE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should respond with 206 \"Partial Content\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.options() should override the default behavior": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router promise support error handling should pass rejected promise without value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() encoding should support identity encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should restore req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should skip POST requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with verify option should error from verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should set the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REPORT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when mounted \"root\" as a file should load the file when on trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given undefined should invoke callback with no arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to COPY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not send ETag for res.send()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle errors via arity 4 functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcalendar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MERGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 for directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with inflate option when false should not accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with inflate option when false should not accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with defaultCharset option should honor content-type charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should use params from router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should 400 on malformed encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .get(field) should get the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Number) should send as application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should strip path from req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() encoding should fail on unknown encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router promise support should ignore resolved promise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should not mutate the options object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should reject non-function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type with type/subtype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.rebind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should overwrite existing req.params by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() encoding should parse without encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .request should extend the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name* should match one segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size when open-ended": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when an error occurs should next(err)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an array should set the values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should require function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work without leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() encoding should support deflate encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set max-age": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals with `name` property": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain full lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.notify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.head() should override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.head": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET /forget should clear cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should ignore object callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field for multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should redirect directories": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support urlencoded pathnames": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display 1 view on revisit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer all the param routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw missing header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1 should respond with user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw in .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should not be influenced by other app protos": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name should denote a format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should match a single segment only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation PUT /user/:id/edit should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should throw on bad value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when mounted should redirect relative to the originalUrl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false should 400 when URL malformed": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should default to the routes defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with limit option should 413 when over limit with chunked encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should include ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support regexp path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse array index notation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to GET request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() extensions should 404 if nothing found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should not set a charset of one is already set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.subscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() encoding should fail on unknown encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0/edit should get pet edit page": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse array of objects syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when \"application/vnd+octets\" should ignore standard type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.mountpath should return the mounted path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should work with Infinity limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with limit option should 413 when over limit with Content-Length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should set the header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with verify option should allow pass-through": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() immutable should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() cacheControl when true should include Cache-Control": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename) should provide an alternate filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() acceptRanges when false should not include Accept-Ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should 413 if over limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() when JSON is invalid should include original body on error object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should set \"etag fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send no ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set relative expires": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should invoke middleware for all requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when a function should not invoke without a body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should work with unknown code": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() maxAge should be reasonable when infinite": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCALENDAR": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should match the pathname only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should not transfer relative with without": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should reject string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should work with Infinity limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should output the same headers as GET requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should 415 on unknown encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with limit option should accept number of bytes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route promise support should pass rejected promise value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length is taken to be equal to one less than the current length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3.json should respond with users 2 and 3 as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.purge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.report": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.propfind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-www-form-urlencoded\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.source": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation POST /user/:id/edit?_method=PUT should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should display login error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when index file serving disabled should next() on directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should include a Content-Range header of complete length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes should be optional by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not invoke without route handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET /foo should say foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with limit option should not hang response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when false should parse primitives": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() charset should parse utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with limit option should accept number of bytes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should denote a capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disable() should set the value to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should support deflate encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: false should error with type = \"parameters.too.many\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when not present should 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true with redirect: false should fall-through when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not override previous Content-Types with no callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support .use of other routers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name* should match many segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should allow custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() charset should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should disallow arbitrary js": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should parse without encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with verify option should error with type = \"entity.verify.failed\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-pairs\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should work when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed should generate a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow renaming callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with limit option should not change when options altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() charset should default to utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when true should allow leading whitespaces in JSON": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with limit option should 413 when over limit with Content-Length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, object) should generate a JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/plain\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/users should respond with users from APIv1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() hidden files should be served when dotfiles: \"allow\" is given": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include CHECKOUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() encoding should parse without encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should support -n": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with verify option should assert value is function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should ensure regexp matches path prefix": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with a valid api key should respond repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"router\") is called should jump out of router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is not present should return []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when \"application/vnd.api+json\" should ignore standard type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/octet-stream\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() charset should parse utf-16": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name? should denote an optional format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route promise support should pass rejected promise without value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() setHeaders should not get called on redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should prefer \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router promise support error handling should ignore resolved promise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when index file serving disabled should redirect to trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() charset should parse when content-length != char length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when \"application/vnd+octets\" should parse for custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .locals should be empty by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is simple should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() charset should parse when content-length != char length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with inflate option when false should not accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should default max-age=0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display no views": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() should handle Content-Length: 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.move": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error for non-string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should cache with \"view cache\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() should 400 when invalid content-length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with limit option should 413 when over limit with chunked encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service when requesting an invalid route should respond with 404 json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should work if number is floating point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should not error on empty routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with type option when a function should work without content-type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should require root path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should be invoked instead of auto-responding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should not redirect incorrectly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with parameterLimit option with extended: true should 413 if over limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() cacheControl when false should not include Cache-Control": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose text middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support empty string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false should 405 when OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should return the header field value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() immutable should set immutable directive in Cache-Control": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should mount the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an array should invoke callback with an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an extension is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/9 should fail to find user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should re-route when method is altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlink": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return false when no match is made": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header should be inclusive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() encoding should support gzip encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with defaultCharset option should change default charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return parsed ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should extend the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true should fall-through when URL too long": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals(obj) should merge locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with a string should set the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should allow pass-through": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.lock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not call when values differ on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should send as html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should map logic for a single param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PURGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to {}": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should set a session cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router promise support should pass rejected promise value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() maxAge should accept string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/9 should respond with error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when request has \"Range\" header when syntactically invalid should respond with 200 and the entire contents": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should ignore application/x-foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when true with redirect: false should fall-through when directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app when undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /users should display a list of users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should support altering req.params across routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should default to the parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() encoding should support identity encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should get reset by res.set(field, val)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() extensions should support fallbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not accept params in malformed paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() should handle Content-Length: 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle missing URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() fallthrough when false should 403 when traversing past root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.acl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "middleware .next() should behave like connect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .route should be the executed Route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given an extension should lookup the mime type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with limit option should 413 when over limit with Content-Length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should not break undefined escape": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/html\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should escape the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with type option when \"application/vnd.api+json\" should parse JSON for custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route promise support error handling should ignore resolved promise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when a function should parse when truthy value returned": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.listen() should wrap with an HTTP server": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.proppatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() encoding should parse without encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should set the child's .parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should respond with default Content-Security-Policy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given a string should invoke callback with a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should be empty for top-level route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with extended option when true should parse fully-encoded extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support conditional requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() with type option when [\"text/html\", \"text/plain\"] should ignore \"text/xml\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should handle VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id/edit should display the edit form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() when JSON is invalid should error with type = \"entity.parse.failed\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow rewriting of the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should work when only .default is provided": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() encoding should be case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should allow options to res.sendFile()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET / should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with strict option when true should not parse primitives": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"strong\" should send strong ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.merge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.text() should 400 when invalid content-length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to POST request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should throw when Content-Type is an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths with middleware array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple routed handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should remove Content-Disposition": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with limit option should 413 when over limit with chunked encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() redirect should ensure redirect URL is properly encoded": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router promise support should pass rejected promise without value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size, options) with \"combine: true\" option should return combined ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() should handle duplicated middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /users should list users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should all .VERB after .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() when mounted should not choke on auth-looking URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should forward requests down the middleware chain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() setHeaders should get called when sending file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() when JSON is invalid should 400 for bad token": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNSUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should require root path to be string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() with verify option should allow custom codes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should not stack overflow with many registered routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should set a value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should support precondition checks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should redirect to /login without cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SOURCE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" an unknown value should throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.json() should handle empty message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.raw() with limit option should 413 when over limit with chunked encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.urlencoded() with type option when a function should work without content-type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPFIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "express.static() basic operations should serve static files": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET / should redirect to /users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"req .query should default to parse simple keys": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 1087, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app.router when next(\"route\") is called should jump to next route", "express.json() with strict option when true should not parse primitives with leading whitespaces", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router :name? should denote an optional capture group", "resource GET / should respond with instructions", "req .xhr should return true when X-Requested-With is xmlhttprequest", "res .send(Buffer) should send as octet-stream", "res when accepting text should encode the url", "res should always check regardless of length", "express.static() acceptRanges when true should include Accept-Ranges", "res .jsonp(object) when given an object should invoke callback with an object", "app.router methods should reject numbers for app.unlock", "multi-router GET /api/v2/users should respond with users from APIv2", "app.all() should run the callback for a method just once", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "req .acceptsCharsets(type) when Accept-Charset is present should return false otherwise", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "vhost bar.example.com GET / should redirect to /bar", "express.json() with type option when a function should not invoke without a body", "express.static() fallthrough when false should 404 when URL too long", "express.urlencoded() with parameterLimit option with extended: true should work when at the limit", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "Router .multiple callbacks should throw if a callback is null", "express.urlencoded() with verify option should 415 on unknown charset prior to verify", "res .jsonp(object) when given a number should invoke callback with a number", "app .engine(ext, fn) should map a template engine", "res .append(field, val) should work with cookies", "exports should expose Router", "app.router :name should work following a partial capture group", "markdown GET /fail should respond with an error", "auth POST /login should fail without proper username", "res .jsonp(object) should include security header and prologue", "express.json() with limit option should not change when options altered", "resource DELETE /users/9 should fail", "express.raw() encoding should support deflate encoding", "req.is() when given */subtype should return the full type when matching", "app.router :name+ should not match zero segments", "express.urlencoded() with limit option should not change when options altered", "req .subdomains when present should work with IPv6 address", "express.raw() should handle empty message-body", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "content-negotiation GET / should accept to application/json", "error-pages Accept: text/plain GET /403 should respond with 403", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "express.urlencoded() should not parse extended syntax", "req .fresh should return true when the resource is not modified", "res .cookie(name, string) should allow multiple calls", "res \"etag\" setting when enabled should send ETag in response to LINK request", "app .param(name, fn) should only call once per request", "express.json() encoding should support gzip encoding", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "Router should support dynamic routes", "express.urlencoded() with inflate option when false should not accept content-encoding", "app.router methods should include MKCOL", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "Router .param should call when values differ", "req .hostname should work with IPv6 Host and port", "res .links(obj) should set Link header field", "app .render(name, fn) should expose app.locals", "express.text() charset should parse utf-8", "express.urlencoded() with extended option when false should not parse extended syntax", "app.router methods should include TRACE", "res \"etag\" setting when \"weak\" should send weak ETag", "express.static() lastModified when true should include Last-Modified", "app.router should restore req.params after leaving router", "req.is() when given type/* should return false when not matching", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored", "req .acceptsLanguages when Accept-Language is not present should always return true", "app.router methods should include NOTIFY", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "express.raw() with type option when a function should not invoke without a body", "express.text() encoding should support gzip encoding", "express.text() encoding should be case-insensitive", "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should ignore standard type", "config .enabled() should return true when set", "res .send(Object) should send as application/json", "res .set(field, value) should coerce to a string", "req .subdomains when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "express.static() redirect should include HTML link", "express.raw() should handle duplicated middleware", "express.static() when request has \"Range\" header should support n-", "express.urlencoded() charset should default to utf-8", "req.is() when content-type is not present should return false", "res .cookie(name, string, options) signed without secret should throw an error", "app.router :name+ should match many segments", "app .param(names, fn) should map the array", "express.static() fallthrough when false with redirect: true should 404 when directory", "express.urlencoded() with verify option should allow pass-through", "res .send(null) should set body to \"\"", "app.router methods should reject numbers for app.copy", "express.json() charset should parse when content-length != char length", "express.static() fallthrough when true should fall-through when URL malformed", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "downloads GET / should have a link to amazing.txt", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "route-separation GET /user/:id should get a user", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "res .set(object) should set multiple fields", "app.router :name* should match zero segments", "express.static() extensions should support disabling extensions", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "error-pages GET / should respond with page list", "route-separation GET /user/:id/view should get a user", "req .query when \"query parser\" is a function should parse using function", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app .use(middleware) should accept multiple arrays of middleware", "express.static() basic operations should support HEAD", "app.parent should return the parent when mounted", "express.json() with verify option should include original body on error object", "params GET /users/foo-bar should fail integer parsing", "exports should permit modifying the .application prototype", "express.urlencoded() with extended option when true should parse parameters with dots", "app.router methods should include DELETE", "express.text() with type option when \"text/html\" should parse for custom type", "express.json() with verify option should 415 on unknown charset prior to verify", "res .sendFile(path) should transfer a file", "app .render(name, fn) when the file does not exist should provide a helpful error", "app .render(name, fn) should handle render error throws", "res .format(obj) with extnames should set the correct charset for the Content-Type", "params GET /users/0-2 should respond with three users", "Route .VERB should allow fallthrough", "res .json(object) should not override previous Content-Types", "app .VERB() should not get invoked without error handler on error", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "res .type(str) should set the Content-Type based on a filename", "express.json() with limit option should error with type = \"entity.too.large\"", "app.router methods should include LINK", "express.urlencoded() with verify option should allow custom codes", "res .send(Buffer) should not override Content-Type", "app.router :name+ should match one segment", "app.router when next(err) is called should call handler in same route, if exists", "app should emit \"mount\" when mounted", "config .enable() should set the value to true", "Router should return a function with router methods", "express.static() lastModified when false should not include Last-Modified", "app.route promise support error handling should pass rejected promise value", "express.static() redirect should not redirect to protocol-relative locations", "res .jsonp(object) should use first callback parameter with jsonp", "route-map GET /users/:id should get a user", "app.router promise support error handling should pass rejected promise value", "express.raw() with type option when a function should parse when truthy value returned", "app.router should allow literal \".\"", "app.router params should merge numeric indices req.params when parent has same number", "route-separation GET /user/:id/edit should get a user to edit", "req .acceptsEncodings should be false if encoding not accepted", "req .path should return the parsed pathname", "app .render(name, fn) caching should always lookup view without cache", "Router .param should call param function when routing VERBS", "config .get() should otherwise return the value", "mvc GET /user/:id when present should display the users pets", "express.text() should parse text/plain", "error-pages Accept: application/json GET /500 should respond with 500", "res .append(field, val) should append multiple headers", "express.urlencoded() should handle Content-Length: 0", "error GET /next should respond with 500", "Router .multiple callbacks should not throw if all callbacks are functions", "express.json() encoding should support identity encoding", "req .host should return undefined otherwise", "app should be callable", "res .send() should set body to \"\"", "res should not override previous Content-Types", "express.raw() with verify option should assert value is function", "utils.wetag(body, encoding) should support strings", "express.static() basic operations should not choke on auth-looking URL", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "utils.setCharset(type, charset) should do anything without type", "res \"etag\" setting when enabled should send ETag in response to ACL request", "Router .all should support using .all to capture all http verbs", "express.static() fallthrough when true with redirect: true should redirect when directory without slash", "utils.setCharset(type, charset) should override charset", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/vnd.api+json\"", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app should inherit from event emitter", "express.static() redirect when false should disable redirect", "resource GET /users/1..3 should respond with users 1 through 3", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "Router .use should be called for any URL", "res .append(field, val) should accept array of values", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router case sensitivity should be disabled by default", "utils.etag(body, encoding) should support empty string", "mvc POST /user/:id/pet should create a pet for user", "express.json() with verify option should error from verify", "res .status(code) should set the response .statusCode", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "cookies GET / should respond with no cookies", "app.route promise support error handling should pass rejected promise without value", "without NODE_ENV should default to development", "express.json() when JSON is invalid should 400 for incomplete", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "req .secure when X-Forwarded-Proto is present should return false when http", "express.urlencoded() should handle empty message-body", "res .render(name, option) should give precedence to res.locals over app.locals", "express.static() when request has \"Range\" header should respond with 206 \"Partial Content\"", "app.options() should override the default behavior", "app.router promise support error handling should pass rejected promise without value", "res .format(obj) with extnames should utilize qvalues in negotiation", "utils.setCharset(type, charset) should set charset", "app .locals.settings should expose app settings", "app.router methods should reject numbers for app.options", "app.router decode params should decode correct params", "req.is() when given a mime type should ignore charset", "res .cookie(name, string, options) should set params", "res .render(name, option) should give precedence to res.render() locals over app.locals", "req .subdomains with trusted X-Forwarded-Host should return an array", "express.raw() with limit option should accept number of bytes", "express.text() encoding should support identity encoding", "app.router params should restore req.params", "app.router :name should allow several capture groups", "express.static() basic operations should skip POST requests", "express.raw() with verify option should error from verify", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "express.text() with inflate option when true should accept content-encoding", "config .get() when mounted should given precedence to the child", "res .set(field, value) should set the response header field", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "config .get() when mounted should inherit \"trust proxy\" setting", "app.router methods should reject numbers for app.mkcol", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "express.urlencoded() with extended option when true should parse extended syntax", "express.static() when mounted \"root\" as a file should load the file when on trailing slash", "res .jsonp(object) when given undefined should invoke callback with no arguments", "express.json() with verify option should assert value if function", "res \"etag\" setting when enabled should send ETag in response to COPY request", "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should parse for custom type", "express.static() cacheControl when false should ignore maxAge", "res \"etag\" setting when enabled should not send ETag for res.send()", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "Route errors should handle errors via arity 4 functions", "app.router methods should reject numbers for app.mkcalendar", "express.text() with type option when a function should work without content-type", "res .attachment(utf8filename) should add the filename and filename* params", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "app.router methods should reject numbers for app.unbind", "res .format(obj) with parameters should default the Content-Type", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/vnd+octets\"", "express.static() when request has \"Range\" header should set Content-Length to the # of octets transferred", "req .subdomains when present should work with IPv4 address", "route-separation GET / should respond with index", "express.text() with type option when \"text/html\" should ignore standard type", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "res .json(object) when given an object should respond with json", "express.static() basic operations should support index.html", "res .sendFile(path) should 404 for directory", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "req .stale should return false when the resource is not modified", "res should not support jsonp callbacks", "res .sendFile(path, fn) should invoke the callback without error when 304", "express.text() with inflate option when false should not accept content-encoding", "express.json() with inflate option when false should not accept content-encoding", "res .render(name) should error without \"view engine\" set and no file extension", "Router .use should accept array of middleware", "error-pages Accept: text/html GET /403 should respond with 403", "multi-router GET /api/v2/ should respond with APIv2 root handler", "express.text() with defaultCharset option should honor content-type charset", "error-pages Accept: text/html GET /404 should respond with 404", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "error-pages Accept: text/html GET /500 should respond with 500", "app.router params should use params from router", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.link", "express.json() encoding should 400 on malformed encoding", "res .get(field) should get the response header field", "req .accepts(type) should return true when Accept is not present", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "exports should expose json middleware", "res .send(Number) should send as application/json", "app .use(path, middleware) should strip path from req.url", "Router error should skip non error middleware", "app.router decode params should not decode spaces", "express.urlencoded() with extended option when true should parse array index notation with large array", "express.urlencoded() encoding should fail on unknown encoding", "app.router promise support should ignore resolved promise", "req .baseUrl should travel through routers correctly", "res .cookie(name, string, options) maxAge should not mutate the options object", "Router .param should reject non-function", "res .type(str) should set the Content-Type with type/subtype", "app.router methods should reject numbers for app.rebind", "res when accepting neither text or html should respond with an empty body", "req.is() when given */subtype should return false when not matching", "app.router params should overwrite existing req.params by default", "app.router methods should reject numbers for app.mkactivity", "error-pages Accept: text/plain GET /404 should respond with 404", "exports should expose the response prototype", "express.urlencoded() encoding should parse without encoding", "app .request should extend the request prototype", "app.router :name* should match one segment", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "req .range(size) should cap to the given size when open-ended", "req .xhr should return false when not present", "express.json() charset should fail on unknown charset", "req .get(field) should special-case Referer", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "app .use(app) should support mount-points", "route-map GET /users/:id/pets should get a users pets", "utils.wetag(body, encoding) should support utf8 strings", "app .use(path, middleware) should reject string as middleware", "req .host should work with IPv6 Host and port", "res .render(name) when an error occurs should next(err)", "req.is() when given a mime type should return the type when matching", "express.json() with strict option when true should error with type = \"entity.parse.failed\"", "res .json(object) when given primitives should respond with json for Number", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number", "app.router methods should include OPTIONS", "app .render(name, fn) when \"view engine\" is given should render the template", "Router .use should reject number as middleware", "Router .param should require function", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "res.vary() with an array should set the values", "in production should enable \"view cache\"", "express.json() with strict option when true should include correct message in stack trace", "app .engine(ext, fn) should work without leading \".\"", "app .use(app) should support mounted app anywhere", "express.json() should 400 when invalid content-length", "express.text() encoding should support deflate encoding", "req .subdomains when subdomain offset is set otherwise should return an empty array", "res .cookie(name, string, options) maxAge should set max-age", "OPTIONS when error occurs in response handler should pass error to callback", "res .render(name) should expose app.locals with `name` property", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "content-negotiation GET /users should accept to text/plain", "req .baseUrl should contain full lower path", "express.raw() encoding should fail on unknown encoding", "req .query when \"query parser\" disabled should not parse query", "app.router methods should include LOCK", "app.router :name should work inside literal parenthesis", "error GET /missing should respond with 404", "res .json(object) when given primitives should respond with json for String", "app.route should return a new route", "exports should expose the application prototype", "Route should work without handlers", "app .use(middleware) should accept multiple arguments", "express.text() with limit option should not change when options altered", "req .accepts(type) should return false otherwise", "app.router methods should reject numbers for app.notify", "res .set(field, values) should coerce to an array of strings", "app.head() should override", "OPTIONS should only include each method once", "app.router methods should reject numbers for app.head", "req .hostname should strip port number", "res .format(obj) with canonicalized mime types should Vary: Accept", "res .render(name, option) should expose res.locals", "auth GET /login should render login form", "Router .use should reject string as middleware", "cookies GET /forget should clear cookie", "res .jsonp(object) should ignore object callback parameter with jsonp", "res .links(obj) should set Link header field for multiple calls", "OPTIONS should not be affected by app.all", "Router .use should reject null as middleware", "express.static() redirect should redirect directories", "express.static() basic operations should support urlencoded pathnames", "cookie-sessions GET / should display 1 view on revisit", "req .protocol should return the protocol string", "res .append(field, val) should work with res.set(field, val) first", "downloads GET /files/notes/groceries.txt should have a download header", "config .enabled() should default to false", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "app .param(name, fn) should call when values differ when using \"next\"", "express.static() when request has \"Range\" header should support byte ranges", "express.urlencoded() with extended option when true should parse multiple key instances", "res .download(path) should transfer as an attachment", "express.urlencoded() with extended option when false should parse multiple key instances", "app .param(name, fn) should defer all the param routes", "req .get(field) should throw missing header name", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .format(obj) in router when Accept is not present should invoke the first callback", "res .jsonp(object) when given null should invoke callback with null", "app .render(name, fn) when an error occurs should invoke the callback", "Route errors should handle throw in .all", "app .response should not be influenced by other app protos", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include HEAD", "req .hostname when \"trust proxy\" is enabled should default to Host", "resource GET /users/1 should respond with user 1", "res .format(obj) in router should utilize qvalues in negotiation", "app.router .:name should denote a format", "app.router :name should match a single segment only", "req .signedCookies should return a signed JSON cookie", "app.router when given a regexp should populate req.params with the captures", "route-separation PUT /user/:id/edit should edit a user", "res on failure should invoke the callback", "express.static() fallthrough when false with redirect: false should 404 when directory without slash", "auth GET /restricted should succeed with proper cookie", "config .set() \"etag\" should throw on bad value", "req .hostname should return undefined otherwise", "Router .multiple callbacks should throw if a callback is undefined", "express.static() when mounted should redirect relative to the originalUrl", "express.static() fallthrough when false should 400 when URL malformed", "app .use(path, middleware) should work if path has trailing slash", "app .param(name, fn) should work with encoded values", "req .acceptsLanguages should be true if language accepted", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "express.urlencoded() with parameterLimit option with extended: false should work with large limit", "express.raw() with inflate option when true should accept content-encoding", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.checkout", "express.text() with limit option should 413 when over limit with chunked encoding", "app.router when next(err) is called should break out of app.router", "Router FQDN should ignore FQDN in path", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value", "app.router methods should reject numbers for app.m-search", "res .render(name) should expose app.locals", "app .engine(ext, fn) should throw when the callback is missing", "res .sendFile(path) should include ETag", "Router FQDN should ignore FQDN in search", "app .use(path, middleware) should support regexp path", "express.urlencoded() with extended option when true should parse array index notation", "res \"etag\" setting when enabled should send ETag in response to GET request", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "express.json() should handle no message-body", "express.static() extensions should be configurable", "res .attachment(filename) should set the Content-Type", "res .render(name) should support absolute paths with \"view engine\"", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .render(name) should support index.<engine>", "mvc GET /user/:id when present should display the user", "app.router methods should reject numbers for app.patch", "express.static() extensions should 404 if nothing found", "express.text() charset should default to utf-8", "app.router methods should include COPY", "req .stale should return true without response headers", "app .param(name, fn) should catch thrown error", "express.json() with verify option should error with type = \"entity.verify.failed\"", "res .sendFile(path) should not error if the client aborts", "res .set(field, values) should not set a charset of one is already set", "utils.wetag(body, encoding) should support empty string", "error-pages Accept: text/plain GET /500 should respond with 500", "app.router methods should reject numbers for app.subscribe", "express.text() encoding should fail on unknown encoding", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "mvc GET /pet/0/edit should get pet edit page", "express.urlencoded() with extended option when true should parse array of objects syntax", "res .redirect(url) should encode \"url\"", "express.raw() with type option when \"application/vnd+octets\" should ignore standard type", "Router .param should only call once per request", "multi-router GET / should respond with root handler", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "app.router methods should include BIND", "req.is() when given a mime type should return false when not matching", "req .host should strip port number", "error-pages Accept: application/json GET /403 should respond with 403", "app.mountpath should return the mounted path", "config .get() when mounted should prefer child \"trust proxy\" setting", "app .param(name, fn) should defer to next route", "express.raw() with limit option should not hang response", "app.path() should return the canonical", "req .stale should return true when the resource is modified", "res .send(String) should set ETag", "app .use(path, middleware) should accept multiple arrays of middleware", "express.urlencoded() with inflate option when true should accept content-encoding", "express.text() with verify option should allow pass-through", "express.urlencoded() with parameterLimit option with extended: true should work with Infinity limit", "req .get(field) should throw for non-string header name", "Route .all should stack", "express.json() with limit option should 413 when over limit with Content-Length", "res .location(url) should set the header", "res .location(url) should encode \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "res .sendFile(path, fn) should invoke the callback when client aborts", "res when the request method is HEAD should ignore the body", "express.json() charset should parse utf-8", "app .render(name, options, fn) should render the template", "express.raw() with verify option should allow pass-through", "app .use(middleware) should accept nested arrays of middleware", "express.static() immutable should default to false", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "express.static() cacheControl when true should include Cache-Control", "res .download(path, filename) should provide an alternate filename", "res .render(name, option) should expose app.locals", "app .use(path, middleware) should support array of paths", "Route .VERB should limit to just .VERB", "express.static() acceptRanges when false should not include Accept-Ranges", "express.urlencoded() with parameterLimit option with extended: false should 413 if over limit", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should ignore \"application/x-json\"", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "res .sendFile(path) should not override manual content-types", "express.json() when JSON is invalid should include original body on error object", "config .set() \"etag\" should set \"etag fn\"", "res .send(undefined) should set body to \"\"", "res .format(obj) in router should Vary: Accept", "app .use(path, middleware) should reject Date as middleware", "Router .multiple callbacks should throw if a callback is not a function", "cookies GET / should respond to cookie", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res \"etag\" setting when disabled should send no ETag", "res .cookie(name, string, options) maxAge should set relative expires", "app .use(middleware) should invoke middleware for all requests", "express.urlencoded() with type option when a function should not invoke without a body", "express.static() fallthrough when true should fall-through when OPTIONS request", "express.json() with verify option should allow custom type", "res \"etag\" setting when enabled should send ETag for long response", "res .sendStatus(statusCode) should work with unknown code", "req .host when \"trust proxy\" is enabled should default to Host", "app .use(path, middleware) should accept multiple arguments", "express.static() maxAge should be reasonable when infinite", "app.router methods should include M-SEARCH", "app.router methods should include MKCALENDAR", "app.router when given a regexp should match the pathname only", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "res .sendFile(path) with \"root\" option should not transfer relative with without", "req .ip when X-Forwarded-For is not present should return the remote address", "express.urlencoded() with parameterLimit option with extended: false should reject string", "res \"etag\" setting when a function should not send falsy ETag", "express.json() with strict option when undefined should 400 on primitives", "app.router :name should work in array of paths", "app.router methods should reject numbers for app.unsubscribe", "express.urlencoded() with parameterLimit option with extended: false should work with Infinity limit", "HEAD should output the same headers as GET requests", "express.json() encoding should 415 on unknown encoding", "express.urlencoded() with limit option should accept number of bytes", "res .render(name, fn) when an error occurs should pass it to the callback", "req .range(size) should cap to the given size", "req .hostname should work with IPv6 Host", "res .sendFile(path) should 404 when not found", "utils.setCharset(type, charset) should keep charset if not given charset", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "express.static() fallthrough when true should fall-through when traversing past root", "app.route promise support should pass rejected promise value", "res .sendFile(path) should 304 when ETag matches", "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length is taken to be equal to one less than the current length", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored case-insensitively", "res .redirect(url) should default to a 302 redirect", "express.raw() with verify option should allow custom codes", "throw after .end() should fail gracefully", "app.router methods should reject numbers for app.purge", "req .range(size) should return undefined if no range", "res .cookie(name, string) should set a cookie", "app .use(path, middleware) should accept nested arrays of middleware", "app.router methods should reject numbers for app.bind", "app.router methods should reject numbers for app.propfind", "app.router methods should reject numbers for app.report", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-www-form-urlencoded\"", "app.router methods should reject numbers for app.get", "req .host should return the Host when present", "multi-router GET /api/v1/ should respond with APIv1 root handler", "app.router methods should reject numbers for app.source", "res .json(object) \"json escape\" setting should not break undefined escape", "express.static() current dir should be served with \".\"", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "auth GET /login should display login error", "express.static() when request has \"Range\" header should set Content-Range", "content-negotiation GET / should accept to text/plain", "res .jsonp(object) should override previous Content-Types with callback", "app.router should run in order added", "app.router methods should include REPORT", "req .query when \"query parser\" is extended should parse parameters with dots", "res \"etag\" setting when disabled should send ETag when manually set", "express.static() when index file serving disabled should next() on directory", "app .param(name, fn) should catch thrown secondary error", "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should include a Content-Range header of complete length", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length should adapt the Content-Length accordingly", "res .render(name) should support absolute paths", "cookies POST / should no set cookie w/o reminder", "res .sendFile(path, fn) should invoke the callback on 404", "express.text() charset should 415 on unknown charset", "res .format(obj) with parameters should allow wildcard type/subtypes", "express.text() with type option when a function should not invoke without a body", "app.router trailing slashes should be optional by default", "app .param(name, fn) should not invoke without route handler", "vhost example.com GET /foo should say foo", "res.vary() when the value is present should not add it again", "express.text() with limit option should not hang response", "express.json() with strict option when false should parse primitives", "express.urlencoded() charset should parse utf-8", "express.urlencoded() with verify option should assert value if function", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "app .VERB() should only call an error handling routing callback when an error is propagated", "express.text() with limit option should accept number of bytes", "app.router :name should denote a capture group", "config .disable() should set the value to false", "app.router methods should include MKACTIVITY", "app.router methods should include SUBSCRIBE", "express.urlencoded() with parameterLimit option with extended: true should reject string", "web-service GET /api/users without an api key should respond with 400 bad request", "config .disabled() should default to true", "express.json() encoding should support deflate encoding", "express.static() basic operations should ignore hidden files", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "Route errors should handle throw", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "res when accepting html should include the redirect type", "app.router decode params should work with unicode", "express.urlencoded() with parameterLimit option with extended: false should error with type = \"parameters.too.many\"", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "req .xhr should case-insensitive", "res .sendFile(path, options) should pass options to send module", "content-negotiation GET / should default to text/html", "mvc GET /user/:id when not present should 404", "app .use(path, middleware) should invoke middleware for all requests starting with path", "express.static() fallthrough when true with redirect: false should fall-through when directory without slash", "OPTIONS should not respond if the path is not defined", "res .jsonp(object) should not override previous Content-Types with no callback", "Router should support .use of other routers", "app.router :name* should match many segments", "express.urlencoded() with verify option should allow custom type", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "express.raw() charset should ignore charset", "auth POST /login should succeed with proper credentials", "req .query when \"query parser\" enabled should not parse complex keys", "req .xhr should return false otherwise", "app .render(name, fn) should support index.<engine>", "app.route should support dynamic routes", "res .jsonp(object) should disallow arbitrary js", "express.json() encoding should parse without encoding", "express.urlencoded() with verify option should error with type = \"entity.verify.failed\"", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-pairs\"", "express.json() encoding should error with type = \"encoding.unsupported\"", "Router .handle should dispatch", "res should work when mounted", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "params GET /user/0 should respond with a user", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/json\"", "express.raw() should parse application/octet-stream", "app .engine(ext, fn) should work \"view engine\" setting", "express.text() with verify option should 415 on unknown charset prior to verify", "mvc PUT /user/:id should 500 on error", "express.urlencoded() should parse x-www-form-urlencoded", "req.is() when given type/* should ignore charset", "req .range(size) should have a .type", "express.raw() with limit option should not change when options altered", "res .jsonp(object) should allow renaming callback", "res .render(name) when \"views\" is given should lookup the file in the path", "Route .all should add handler", "res .set(object) should coerce to a string", "res .sendFile(path) should transfer a file with special characters in string", "express.json() charset should default to utf-8", "res .format(obj) with parameters should Vary: Accept", "express.static() fallthrough when false with redirect: true should redirect when directory without slash", "res \"etag\" setting when enabled should send ETag in response to PUT request", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "req .baseUrl should contain lower path", "express.json() with strict option when true should allow leading whitespaces in JSON", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "express.urlencoded() with limit option should 413 when over limit with Content-Length", "req should accept an argument list of type names", "res .cookie(name, object) should generate a JSON cookie", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "app.router methods should include UNLOCK", "express.static() basic operations should support nesting", "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/plain\"", "express.urlencoded() should handle duplicated middleware", "res .clearCookie(name) should set a cookie passed expiry", "res .send(String) should keep charset in Content-Type for Buffers", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "express.static() when responding non-2xx or 304 should not alter the status", "express.urlencoded() with extended option when true should parse deep object", "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should respond with 416", "res.vary() with an empty array should not set Vary", "multi-router GET /api/v1/users should respond with users from APIv1", "express.static() hidden files should be served when dotfiles: \"allow\" is given", "req .acceptsEncodings should be true if encoding accepted", "mvc PUT /user/:id should update the user", "app.router methods should include CHECKOUT", "Router error should handle throwing in handler after async param", "express.raw() encoding should parse without encoding", "app.router methods should reject numbers for app.search", "app .use(path, middleware) should accept array of middleware", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .format(obj) with extnames should allow wildcard type/subtypes", "res \"etag\" setting when enabled should send ETag for empty string response", "ejs GET / should respond with html", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "express.static() when request has \"Range\" header should support -n", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "express.text() with verify option should assert value is function", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "exports should expose the request prototype", "app.router when given a regexp should ensure regexp matches path prefix", "res .format(obj) in router should set the correct charset for the Content-Type", "res .render(name, options, fn) should pass the resulting string", "web-service GET /api/repos with a valid api key should respond repos json", "express.static() basic operations should support ../", "route-map GET /users/:id/pets/:pid should get a users pet", "express.static() fallthrough when true with redirect: true should fall-through when directory", "app.router methods should include MERGE", "app.router when next(\"router\") is called should jump out of router", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "resource GET /users should respond with all users", "res .json(object) \"json spaces\" setting should be undefined by default", "express.text() charset should parse codepage charsets", "req .ips when X-Forwarded-For is not present should return []", "express.json() with type option when \"application/vnd.api+json\" should ignore standard type", "express.static() fallthrough should default to true", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/octet-stream\"", "app .use(path, middleware) should require middleware", "res .format(obj) with parameters should set the correct charset for the Content-Type", "express.static() basic operations should serve zero-length files", "mvc PUT /pet/2 should update the pet", "res .send(String) should not override Content-Type", "route-separation GET /posts should get a list of posts", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "express.json() charset should parse utf-16", "app.router .:name? should denote an optional format", "auth GET /logout should redirect to /", "req .acceptsCharsets(type) when Accept-Charset is present should return true", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res .render(name, fn) should pass the resulting string", "utils.etag(body, encoding) should support buffer", "app.route promise support should pass rejected promise without value", "express.static() setHeaders should not get called on redirect", "res should respond with 304 Not Modified when fresh", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app.router promise support error handling should ignore resolved promise", "res .jsonp(object) should allow []", "express.static() when index file serving disabled should redirect to trailing slash", "res .location(url) should not touch already-encoded sequences in \"url\"", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "app.router methods should reject numbers for app.delete", "express.urlencoded() charset should parse when content-length != char length", "express.raw() with type option when \"application/vnd+octets\" should parse for custom type", "route-map GET /users should respond with users", "res .format(obj) with extnames should default the Content-Type", "res .locals should be empty by default", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains when subdomain offset is set when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "exports should expose urlencoded middleware", "express.text() charset should parse when content-length != char length", "res .type(str) should default to application/octet-stream", "express.raw() with inflate option when false should not accept content-encoding", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "express.static() basic operations should default max-age=0", "app.router params should allow merging existing req.params", "Router FQDN should adjust FQDN req.url with multiple handlers", "express.static() acceptRanges when false should ignore Rage request header", "cookie-sessions GET / should display no views", "express.text() should handle Content-Length: 0", "app.router methods should reject numbers for app.move", "res .sendFile(path) should error for non-string path", "route-map DELETE /users should delete users", "app.route promise support should ignore resolved promise", "error-pages Accept: application/json GET /404 should respond with 404", "app .render(name, fn) caching should cache with \"view cache\" setting", "res .attachment(utf8filename) should set the Content-Type", "res .json(object) when given an array should respond with json", "express.static() when mounted \"root\" as a file should 404 when trailing slash", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "app.router methods should include UNBIND", "express.urlencoded() should 400 when invalid content-length", "express.urlencoded() with limit option should 413 when over limit with chunked encoding", "res .render(name, option) should render the template", "cookies POST / should set a cookie", "express.urlencoded() with parameterLimit option with extended: true should work if number is floating point", "app .use(middleware) should accept array of middleware", "web-service when requesting an invalid route should respond with 404 json", "Router error should handle throwing inside error handlers", "app.route should not error on empty routes", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "auth POST /login should fail without proper password", "express.raw() with type option when a function should work without content-type", "app.router methods should include MOVE", "express.static() basic operations should require root path", "express.urlencoded() encoding should support deflate encoding", "res .format(obj) given .default should be invoked instead of auto-responding", "express.urlencoded() with parameterLimit option with extended: false should work when at the limit", "express.json() with limit option should not hang response", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should ignore \"application/x-foo\"", "express.static() redirect should not redirect incorrectly", "res .download(path, fn) should invoke the callback", "res .download(path, filename, options, fn) should invoke the callback", "params GET / should respond with instructions", "app .use(path, middleware) should reject number as middleware", "res .format(obj) in router should default the Content-Type", "app .param(name, fn) should call when values differ", "express.json() encoding should 413 when inflated value exceeds limit", "express.urlencoded() with parameterLimit option with extended: true should reject 0", "express.urlencoded() with parameterLimit option with extended: true should 413 if over limit", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "express.static() fallthrough when false with redirect: false should 404 when directory", "res when accepting html should respond with html", "express.static() cacheControl when false should not include Cache-Control", "exports should expose text middleware", "config .get() should return undefined when unset", "res .attachment(filename) should add the filename param", "req .accepts(types) should take quality into account", "Router .use should require middleware", "app .use(path, middleware) should support empty string path", "express.static() fallthrough when false should 405 when OPTIONS request", "Router parallel requests should not mix requests", "vhost example.com GET / should say hello", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "req .get(field) should return the header field value", "express.static() immutable should set immutable directive in Cache-Control", "res \"etag\" setting when a function should send custom ETag", "res .sendStatus(statusCode) should send the status code and message as body", "app .use(app) should mount the app", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "res .jsonp(object) when given an array should invoke callback with an array", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "app .render(name, fn) when an extension is given should render the template", "app.router methods should include PATCH", "express.raw() encoding should support identity encoding", "Router .use should reject Date as middleware", "app.router methods should re-route when method is altered", "express.urlencoded() with parameterLimit option with extended: true should error with type = \"parameters.too.many\"", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app.router methods should reject numbers for app.unlink", "req .accepts(types) should return false when no match is made", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "res .format(obj) with parameters should utilize qvalues in negotiation", "params GET /user/9 should fail to find user", "route-separation GET /user/:id should 404 on missing user", "express.json() with type option when a function should parse when truthy value returned", "res \"etag\" setting when enabled should send ETag", "app .render(name, fn) should support absolute paths", "Router should handle blank URL", "in development should disable \"view cache\"", "res .redirect(status, url) should set the response status", "express.static() when index file serving disabled should next() on mount point", "express.static() when index at mount point should redirect correctly", "req .host should work with IPv6 Host", "express.static() basic operations should set Last-Modified", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "express.static() when request has \"Range\" header should be inclusive", "route-separation GET /user/:id/view should 404 on missing user", "res .sendFile(path) with \"headers\" option should accept headers option", "app.router when next() is called should continue lookup", "express.urlencoded() encoding should support gzip encoding", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "res .json(object) \"json escape\" setting should be undefined by default", "express.json() charset should error with type = \"charset.unsupported\"", "express.text() with defaultCharset option should change default charset", "req .range(size) should return parsed ranges", "app .response should extend the response prototype", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "app.router should be chainable", "express.json() with type option when a function should work without content-type", "express.raw() should 400 when invalid content-length", "express.static() fallthrough when true should fall-through when URL too long", "express.text() should handle empty message-body", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "utils.etag(body, encoding) should support utf8 strings", "app .locals(obj) should merge locals", "res.vary() with a string should set the value", "express.json() with verify option should allow pass-through", "res.vary() with no arguments should throw error", "content-negotiation GET /users should default to text/html", "res when accepting text should include the redirect type", "HEAD should default to GET", "app .param(name, fn) should not call when values differ on error", "Route errors should handle single error handler", "app .param(name, fn) should map logic for a single param", "app.router methods should reject numbers for app.lock", "app.router methods should include PURGE", "res .send(String) should send as html", "downloads GET /files/missing.txt should respond with 404", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "app.router methods should include PROPPATCH", "res .send(Buffer) should not override ETag", "req .query should default to {}", "res \"etag\" setting when enabled should send ETag in response to BIND request", "cookie-sessions GET / should set a session cookie", "app .use(path, middleware) should reject null as middleware", "app.router methods should include UNLINK", "content-negotiation GET /users should accept to application/json", "Route .VERB should support .get", "req .subdomains otherwise should return an empty array", "app.router promise support should pass rejected promise value", "express.raw() should handle Content-Length: 0", "res .format(obj) in router should allow wildcard type/subtypes", "express.static() maxAge should accept string", "res .sendFile(path, fn) should invoke the callback when client already aborted", "express.json() should parse JSON", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "resource GET /users/9 should respond with error", "express.static() when request has \"Range\" header when syntactically invalid should respond with 200 and the entire contents", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should ignore application/x-foo", "express.static() fallthrough when true with redirect: false should fall-through when directory", "req .accepts(types) should return the first acceptable type", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "config .set() should return the app when undefined", "mvc GET /users should display a list of users", "app .param(name, fn) should support altering req.params across routes", "config .get() when mounted should default to the parent app", "res .jsonp(object) \"json escape\" setting should be undefined by default", "express.urlencoded() with limit option should not hang response", "express.urlencoded() encoding should support identity encoding", "res .append(field, val) should get reset by res.set(field, val)", "req .range(size) should accept any type", "express.urlencoded() with parameterLimit option with extended: false should reject 0", "app.router methods should include GET", "express.static() extensions should support fallbacks", "exports should expose raw middleware", "Router .param should call param function when routing middleware", "express.urlencoded() encoding should be case-insensitive", "app.router decode params should not accept params in malformed paths", "express.json() should handle Content-Length: 0", "Router should handle missing URL", "markdown GET / should respond with html", "express.static() fallthrough when false should 403 when traversing past root", "req .query should default to parse complex keys", "app.router methods should reject numbers for app.acl", "middleware .next() should behave like connect", "resource DELETE /users/1 should delete user 1", "utils.setCharset(type, charset) should return type if not given charset", "express.text() with type option when a function should parse when truthy value returned", "req .fresh should return false without response headers", "req .route should be the executed Route", "express.static() when index file serving disabled should redirect to trailing slash mount point", "res .cookie(name, string, options) maxAge should throw an error with invalid maxAge", "express.static() when traversing past root should catch urlencoded ../", "req.is() when given an extension should lookup the mime type", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "express.text() with verify option should error from verify", "express.text() with limit option should 413 when over limit with Content-Length", "res .jsonp(object) \"json escape\" setting should not break undefined escape", "express.static() acceptRanges when true should obey Rage request header", "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/html\"", "res .json(object) when given primitives should respond with json for null", "express.static() setHeaders should not get called on 404", "res when accepting html should escape the url", "express.json() with type option when \"application/vnd.api+json\" should parse JSON for custom type", "app.route promise support error handling should ignore resolved promise", "express.urlencoded() with type option when a function should parse when truthy value returned", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "utils.wetag(body, encoding) should support buffer", "app.all() should add a router per method", "express.raw() with limit option should 413 when over limit with Content-Length", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "utils.etag(body, encoding) should support strings", "app.listen() should wrap with an HTTP server", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should reject numbers for app.proppatch", "Router FQDN should not obscure FQDNs", "express.text() encoding should parse without encoding", "res .set(field, values) should set multiple response header fields", "res .jsonp(object) should not escape utf whitespace for json fallback", "app .use(app) should set the child's .parent", "express.static() redirect should respond with default Content-Security-Policy", "res .json(object) should not support jsonp callbacks", "req .baseUrl should be empty for top-level route", "app.router methods should include PROPFIND", "res .jsonp(object) should escape utf whitespace", "app .render(name, options, fn) should give precedence to app.render() locals", "res .jsonp(object) when given a string should invoke callback with a string", "express.urlencoded() with extended option when true should parse fully-encoded extended syntax", "express.static() basic operations should support conditional requests", "config .disabled() should return false when set", "app.router methods should include ACL", "express.urlencoded() with parameterLimit option with extended: false should work if number is floating point", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "express.text() with type option when [\"text/html\", \"text/plain\"] should ignore \"text/xml\"", "req .accepts(types) should return the first when Accept is not present", "req .subdomains with no host should return an empty array", "Route .all should handle VERBS", "mvc GET /user/:id/edit should display the edit form", "res .sendFile(path, fn) should invoke the callback when complete", "req.is() when given type/* should return the full type when matching", "express.json() when JSON is invalid should error with type = \"entity.parse.failed\"", "app.router should allow rewriting of the url", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "express.json() with inflate option when true should accept content-encoding", "express.static() redirect should redirect directories with query string", "req .secure when X-Forwarded-Proto is missing should return false when http", "app.router params should merge numeric indices req.params when more in parent", "req .hostname should return the Host when present", "res .format(obj) given .default should work when only .default is provided", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "express.json() encoding should be case-insensitive", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "app.router methods should include POST", "express.text() should handle duplicated middleware", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app.router params should merge numeric indices req.params", "express.json() with strict option when true should not parse primitives", "res .format(obj) with extnames should Vary: Accept", "res should not perform freshness check unless 2xx or 304", "error GET / should respond with 500", "express.urlencoded() with verify option should error from verify", "res when accepting text should respond with text", "res .render(name) when \"view engine\" is given should render the template", "res \"etag\" setting when \"strong\" should send strong ETag", "app should 404 without routes", "express.raw() encoding should support gzip encoding", "app.router methods should reject numbers for app.post", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should reject numbers for app.merge", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app .render(name, fn) should support absolute paths with \"view engine\"", "config .set() should return the app", "express.text() should 400 when invalid content-length", "mvc GET /pet/0 should get pet", "res .attachment() should Content-Disposition to attachment", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "vhost foo.example.com GET / should redirect to /foo", "res \"etag\" setting when enabled should send ETag in response to POST request", "express.static() basic operations should set Content-Type", "res .set(field, values) should throw when Content-Type is an array", "app .use(path, middleware) should support array of paths with middleware array", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "cookies GET / should have a form", "req .query when \"query parser\" is extended should parse complex keys", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res on failure should remove Content-Disposition", "express.json() with limit option should 413 when over limit with chunked encoding", "express.static() redirect should ensure redirect URL is properly encoded", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .send(String) should override charset in Content-Type", "app.router promise support should pass rejected promise without value", "app.router :name? should populate the capture group", "express.raw() encoding should be case-insensitive", "req .fresh should return false when the resource is modified", "req .range(size, options) with \"combine: true\" option should return combined ranges", "res .jsonp(object) should respond with jsonp", "express.json() should handle duplicated middleware", "express.json() with limit option should accept number of bytes", "Route errors should handle throwing inside error handlers", "express.static() extensions should be not be enabled by default", "exports should permit modifying the .request prototype", "express.json() with verify option should work with different charsets", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "auth GET / should redirect to /login", "route-separation GET /users should list users", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "exports should permit modifying the .response prototype", "app.route should all .VERB after .all", "express.static() when mounted should not choke on auth-looking URL", "express.static() when traversing past root should not allow root path disclosure", "OPTIONS should forward requests down the middleware chain", "Router FQDN should adjust FQDN req.url", "express.static() setHeaders should get called when sending file", "req .accepts(types) should return the first acceptable type with canonical mime types", "app.router methods should reject numbers for app.put", "express.json() when JSON is invalid should 400 for bad token", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "res .render(name, option) should give precedence to res.render() locals over res.locals", "res should be chainable", "app.router methods should include UNSUBSCRIBE", "web-service GET /api/users with a valid api key should respond users json", "express.static() basic operations should require root path to be string", "express.text() with verify option should allow custom codes", "req .accepts(type) should return true when present", "express.json() with verify option should allow custom codes", "app.router methods should include SEARCH", "app.router should be .use()able", "Router should not stack overflow with many registered routes", "app.router methods should reject numbers for app.trace", "app.router params should ignore invalid incoming req.params", "express.urlencoded() charset should fail on unknown charset", "config .set() should set a value", "app.router methods should include PUT", "express.static() basic operations should support precondition checks", "req .acceptsLanguages should be false if language not accepted", "res .sendFile(path) should error missing path", "app.router methods should include SOURCE", "auth GET /restricted should redirect to /login without cookie", "req.is() when given */subtype should ignore charset", "res .clearCookie(name, options) should set the given params", "res .download(path, filename, fn) should invoke the callback", "req .query when \"query parser\" an unknown value should throw", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "downloads GET /files/amazing.txt should have a download header", "app .use(app) should support dynamic routes", "express.json() should handle empty message-body", "express.raw() with limit option should 413 when over limit with chunked encoding", "express.urlencoded() with type option when a function should work without content-type", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "Router error should handle throwing inside routes with params", "express.static() setHeaders should reject non-functions", "res .send(Buffer) should set ETag", "res \"etag\" setting when enabled should not override ETag when manually set", "app.router methods should include REBIND", "express.static() basic operations should serve static files", "exports should expose static middleware", "mvc GET / should redirect to /users", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "express.urlencoded() with parameterLimit option with extended: true should work with large limit"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 1086, "failed_count": 1, "skipped_count": 0, "passed_tests": ["app.router when next(\"route\") is called should jump to next route", "express.json() with strict option when true should not parse primitives with leading whitespaces", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router :name? should denote an optional capture group", "resource GET / should respond with instructions", "req .xhr should return true when X-Requested-With is xmlhttprequest", "res .send(Buffer) should send as octet-stream", "res when accepting text should encode the url", "res should always check regardless of length", "express.static() acceptRanges when true should include Accept-Ranges", "res .jsonp(object) when given an object should invoke callback with an object", "app.router methods should reject numbers for app.unlock", "multi-router GET /api/v2/users should respond with users from APIv2", "app.all() should run the callback for a method just once", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "req .acceptsCharsets(type) when Accept-Charset is present should return false otherwise", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "vhost bar.example.com GET / should redirect to /bar", "express.json() with type option when a function should not invoke without a body", "express.static() fallthrough when false should 404 when URL too long", "express.urlencoded() with parameterLimit option with extended: true should work when at the limit", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "Router .multiple callbacks should throw if a callback is null", "express.urlencoded() with verify option should 415 on unknown charset prior to verify", "res .jsonp(object) when given a number should invoke callback with a number", "app .engine(ext, fn) should map a template engine", "res .append(field, val) should work with cookies", "exports should expose Router", "app.router :name should work following a partial capture group", "markdown GET /fail should respond with an error", "auth POST /login should fail without proper username", "res .jsonp(object) should include security header and prologue", "express.json() with limit option should not change when options altered", "resource DELETE /users/9 should fail", "express.raw() encoding should support deflate encoding", "req.is() when given */subtype should return the full type when matching", "app.router :name+ should not match zero segments", "express.urlencoded() with limit option should not change when options altered", "req .subdomains when present should work with IPv6 address", "express.raw() should handle empty message-body", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "content-negotiation GET / should accept to application/json", "error-pages Accept: text/plain GET /403 should respond with 403", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "express.urlencoded() should not parse extended syntax", "req .fresh should return true when the resource is not modified", "res .cookie(name, string) should allow multiple calls", "res \"etag\" setting when enabled should send ETag in response to LINK request", "app .param(name, fn) should only call once per request", "express.json() encoding should support gzip encoding", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "Router should support dynamic routes", "express.urlencoded() with inflate option when false should not accept content-encoding", "app.router methods should include MKCOL", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "Router .param should call when values differ", "req .hostname should work with IPv6 Host and port", "res .links(obj) should set Link header field", "app .render(name, fn) should expose app.locals", "express.text() charset should parse utf-8", "express.urlencoded() with extended option when false should not parse extended syntax", "app.router methods should include TRACE", "res \"etag\" setting when \"weak\" should send weak ETag", "express.static() lastModified when true should include Last-Modified", "app.router should restore req.params after leaving router", "req.is() when given type/* should return false when not matching", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored", "req .acceptsLanguages when Accept-Language is not present should always return true", "app.router methods should include NOTIFY", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "express.raw() with type option when a function should not invoke without a body", "express.text() encoding should support gzip encoding", "express.text() encoding should be case-insensitive", "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should ignore standard type", "config .enabled() should return true when set", "res .send(Object) should send as application/json", "res .set(field, value) should coerce to a string", "req .subdomains when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "express.static() redirect should include HTML link", "express.raw() should handle duplicated middleware", "express.static() when request has \"Range\" header should support n-", "express.urlencoded() charset should default to utf-8", "req.is() when content-type is not present should return false", "res .cookie(name, string, options) signed without secret should throw an error", "app.router :name+ should match many segments", "app .param(names, fn) should map the array", "express.static() fallthrough when false with redirect: true should 404 when directory", "express.urlencoded() with verify option should allow pass-through", "res .send(null) should set body to \"\"", "app.router methods should reject numbers for app.copy", "express.json() charset should parse when content-length != char length", "express.static() fallthrough when true should fall-through when URL malformed", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "downloads GET / should have a link to amazing.txt", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "route-separation GET /user/:id should get a user", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "res .set(object) should set multiple fields", "app.router :name* should match zero segments", "express.static() extensions should support disabling extensions", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "error-pages GET / should respond with page list", "route-separation GET /user/:id/view should get a user", "req .query when \"query parser\" is a function should parse using function", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app .use(middleware) should accept multiple arrays of middleware", "express.static() basic operations should support HEAD", "app.parent should return the parent when mounted", "express.json() with verify option should include original body on error object", "params GET /users/foo-bar should fail integer parsing", "exports should permit modifying the .application prototype", "express.urlencoded() with extended option when true should parse parameters with dots", "app.router methods should include DELETE", "express.text() with type option when \"text/html\" should parse for custom type", "express.json() with verify option should 415 on unknown charset prior to verify", "res .sendFile(path) should transfer a file", "app .render(name, fn) when the file does not exist should provide a helpful error", "app .render(name, fn) should handle render error throws", "res .format(obj) with extnames should set the correct charset for the Content-Type", "params GET /users/0-2 should respond with three users", "Route .VERB should allow fallthrough", "res .json(object) should not override previous Content-Types", "app .VERB() should not get invoked without error handler on error", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "res .type(str) should set the Content-Type based on a filename", "express.json() with limit option should error with type = \"entity.too.large\"", "app.router methods should include LINK", "express.urlencoded() with verify option should allow custom codes", "res .send(Buffer) should not override Content-Type", "app.router :name+ should match one segment", "app.router when next(err) is called should call handler in same route, if exists", "app should emit \"mount\" when mounted", "config .enable() should set the value to true", "Router should return a function with router methods", "express.static() lastModified when false should not include Last-Modified", "app.route promise support error handling should pass rejected promise value", "express.static() redirect should not redirect to protocol-relative locations", "res .jsonp(object) should use first callback parameter with jsonp", "route-map GET /users/:id should get a user", "app.router promise support error handling should pass rejected promise value", "express.raw() with type option when a function should parse when truthy value returned", "app.router should allow literal \".\"", "app.router params should merge numeric indices req.params when parent has same number", "route-separation GET /user/:id/edit should get a user to edit", "req .acceptsEncodings should be false if encoding not accepted", "req .path should return the parsed pathname", "app .render(name, fn) caching should always lookup view without cache", "Router .param should call param function when routing VERBS", "config .get() should otherwise return the value", "mvc GET /user/:id when present should display the users pets", "express.text() should parse text/plain", "error-pages Accept: application/json GET /500 should respond with 500", "res .append(field, val) should append multiple headers", "express.urlencoded() should handle Content-Length: 0", "error GET /next should respond with 500", "Router .multiple callbacks should not throw if all callbacks are functions", "express.json() encoding should support identity encoding", "req .host should return undefined otherwise", "app should be callable", "res .send() should set body to \"\"", "res should not override previous Content-Types", "express.raw() with verify option should assert value is function", "utils.wetag(body, encoding) should support strings", "express.static() basic operations should not choke on auth-looking URL", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "utils.setCharset(type, charset) should do anything without type", "res \"etag\" setting when enabled should send ETag in response to ACL request", "Router .all should support using .all to capture all http verbs", "express.static() fallthrough when true with redirect: true should redirect when directory without slash", "utils.setCharset(type, charset) should override charset", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/vnd.api+json\"", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app should inherit from event emitter", "express.static() redirect when false should disable redirect", "resource GET /users/1..3 should respond with users 1 through 3", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "Router .use should be called for any URL", "res .append(field, val) should accept array of values", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router case sensitivity should be disabled by default", "utils.etag(body, encoding) should support empty string", "mvc POST /user/:id/pet should create a pet for user", "express.json() with verify option should error from verify", "res .status(code) should set the response .statusCode", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "cookies GET / should respond with no cookies", "app.route promise support error handling should pass rejected promise without value", "without NODE_ENV should default to development", "express.json() when JSON is invalid should 400 for incomplete", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "req .secure when X-Forwarded-Proto is present should return false when http", "express.urlencoded() should handle empty message-body", "res .render(name, option) should give precedence to res.locals over app.locals", "express.static() when request has \"Range\" header should respond with 206 \"Partial Content\"", "app.options() should override the default behavior", "app.router promise support error handling should pass rejected promise without value", "res .format(obj) with extnames should utilize qvalues in negotiation", "utils.setCharset(type, charset) should set charset", "app .locals.settings should expose app settings", "app.router methods should reject numbers for app.options", "app.router decode params should decode correct params", "req.is() when given a mime type should ignore charset", "res .cookie(name, string, options) should set params", "res .render(name, option) should give precedence to res.render() locals over app.locals", "req .subdomains with trusted X-Forwarded-Host should return an array", "express.raw() with limit option should accept number of bytes", "express.text() encoding should support identity encoding", "app.router params should restore req.params", "app.router :name should allow several capture groups", "express.static() basic operations should skip POST requests", "express.raw() with verify option should error from verify", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "express.text() with inflate option when true should accept content-encoding", "config .get() when mounted should given precedence to the child", "res .set(field, value) should set the response header field", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "config .get() when mounted should inherit \"trust proxy\" setting", "app.router methods should reject numbers for app.mkcol", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "express.urlencoded() with extended option when true should parse extended syntax", "express.static() when mounted \"root\" as a file should load the file when on trailing slash", "res .jsonp(object) when given undefined should invoke callback with no arguments", "express.json() with verify option should assert value if function", "res \"etag\" setting when enabled should send ETag in response to COPY request", "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should parse for custom type", "express.static() cacheControl when false should ignore maxAge", "res \"etag\" setting when enabled should not send ETag for res.send()", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "Route errors should handle errors via arity 4 functions", "app.router methods should reject numbers for app.mkcalendar", "express.text() with type option when a function should work without content-type", "res .attachment(utf8filename) should add the filename and filename* params", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "app.router methods should reject numbers for app.unbind", "res .format(obj) with parameters should default the Content-Type", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/vnd+octets\"", "express.static() when request has \"Range\" header should set Content-Length to the # of octets transferred", "req .subdomains when present should work with IPv4 address", "route-separation GET / should respond with index", "express.text() with type option when \"text/html\" should ignore standard type", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "res .json(object) when given an object should respond with json", "express.static() basic operations should support index.html", "res .sendFile(path) should 404 for directory", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "req .stale should return false when the resource is not modified", "res should not support jsonp callbacks", "res .sendFile(path, fn) should invoke the callback without error when 304", "express.text() with inflate option when false should not accept content-encoding", "express.json() with inflate option when false should not accept content-encoding", "res .render(name) should error without \"view engine\" set and no file extension", "Router .use should accept array of middleware", "error-pages Accept: text/html GET /403 should respond with 403", "multi-router GET /api/v2/ should respond with APIv2 root handler", "express.text() with defaultCharset option should honor content-type charset", "error-pages Accept: text/html GET /404 should respond with 404", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "error-pages Accept: text/html GET /500 should respond with 500", "app.router params should use params from router", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.link", "express.json() encoding should 400 on malformed encoding", "res .get(field) should get the response header field", "req .accepts(type) should return true when Accept is not present", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "exports should expose json middleware", "res .send(Number) should send as application/json", "app .use(path, middleware) should strip path from req.url", "Router error should skip non error middleware", "app.router decode params should not decode spaces", "express.urlencoded() with extended option when true should parse array index notation with large array", "express.urlencoded() encoding should fail on unknown encoding", "app.router promise support should ignore resolved promise", "req .baseUrl should travel through routers correctly", "res .cookie(name, string, options) maxAge should not mutate the options object", "Router .param should reject non-function", "res .type(str) should set the Content-Type with type/subtype", "app.router methods should reject numbers for app.rebind", "res when accepting neither text or html should respond with an empty body", "req.is() when given */subtype should return false when not matching", "app.router params should overwrite existing req.params by default", "app.router methods should reject numbers for app.mkactivity", "error-pages Accept: text/plain GET /404 should respond with 404", "exports should expose the response prototype", "express.urlencoded() encoding should parse without encoding", "app .request should extend the request prototype", "app.router :name* should match one segment", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "req .range(size) should cap to the given size when open-ended", "req .xhr should return false when not present", "express.json() charset should fail on unknown charset", "req .get(field) should special-case Referer", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "app .use(app) should support mount-points", "route-map GET /users/:id/pets should get a users pets", "utils.wetag(body, encoding) should support utf8 strings", "app .use(path, middleware) should reject string as middleware", "req .host should work with IPv6 Host and port", "res .render(name) when an error occurs should next(err)", "req.is() when given a mime type should return the type when matching", "express.json() with strict option when true should error with type = \"entity.parse.failed\"", "res .json(object) when given primitives should respond with json for Number", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number", "app.router methods should include OPTIONS", "app .render(name, fn) when \"view engine\" is given should render the template", "Router .use should reject number as middleware", "Router .param should require function", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "res.vary() with an array should set the values", "in production should enable \"view cache\"", "express.json() with strict option when true should include correct message in stack trace", "app .engine(ext, fn) should work without leading \".\"", "app .use(app) should support mounted app anywhere", "express.json() should 400 when invalid content-length", "express.text() encoding should support deflate encoding", "req .subdomains when subdomain offset is set otherwise should return an empty array", "res .cookie(name, string, options) maxAge should set max-age", "OPTIONS when error occurs in response handler should pass error to callback", "res .render(name) should expose app.locals with `name` property", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "content-negotiation GET /users should accept to text/plain", "req .baseUrl should contain full lower path", "express.raw() encoding should fail on unknown encoding", "req .query when \"query parser\" disabled should not parse query", "app.router methods should include LOCK", "app.router :name should work inside literal parenthesis", "error GET /missing should respond with 404", "res .json(object) when given primitives should respond with json for String", "app.route should return a new route", "exports should expose the application prototype", "Route should work without handlers", "app .use(middleware) should accept multiple arguments", "express.text() with limit option should not change when options altered", "req .accepts(type) should return false otherwise", "app.router methods should reject numbers for app.notify", "res .set(field, values) should coerce to an array of strings", "app.head() should override", "OPTIONS should only include each method once", "app.router methods should reject numbers for app.head", "req .hostname should strip port number", "res .format(obj) with canonicalized mime types should Vary: Accept", "res .render(name, option) should expose res.locals", "auth GET /login should render login form", "Router .use should reject string as middleware", "cookies GET /forget should clear cookie", "res .jsonp(object) should ignore object callback parameter with jsonp", "res .links(obj) should set Link header field for multiple calls", "OPTIONS should not be affected by app.all", "Router .use should reject null as middleware", "express.static() redirect should redirect directories", "express.static() basic operations should support urlencoded pathnames", "cookie-sessions GET / should display 1 view on revisit", "req .protocol should return the protocol string", "res .append(field, val) should work with res.set(field, val) first", "downloads GET /files/notes/groceries.txt should have a download header", "config .enabled() should default to false", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "app .param(name, fn) should call when values differ when using \"next\"", "express.static() when request has \"Range\" header should support byte ranges", "express.urlencoded() with extended option when true should parse multiple key instances", "res .download(path) should transfer as an attachment", "express.urlencoded() with extended option when false should parse multiple key instances", "app .param(name, fn) should defer all the param routes", "req .get(field) should throw missing header name", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .format(obj) in router when Accept is not present should invoke the first callback", "res .jsonp(object) when given null should invoke callback with null", "app .render(name, fn) when an error occurs should invoke the callback", "Route errors should handle throw in .all", "app .response should not be influenced by other app protos", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include HEAD", "req .hostname when \"trust proxy\" is enabled should default to Host", "resource GET /users/1 should respond with user 1", "res .format(obj) in router should utilize qvalues in negotiation", "app.router .:name should denote a format", "app.router :name should match a single segment only", "req .signedCookies should return a signed JSON cookie", "app.router when given a regexp should populate req.params with the captures", "route-separation PUT /user/:id/edit should edit a user", "res on failure should invoke the callback", "express.static() fallthrough when false with redirect: false should 404 when directory without slash", "auth GET /restricted should succeed with proper cookie", "config .set() \"etag\" should throw on bad value", "req .hostname should return undefined otherwise", "Router .multiple callbacks should throw if a callback is undefined", "express.static() when mounted should redirect relative to the originalUrl", "express.static() fallthrough when false should 400 when URL malformed", "app .use(path, middleware) should work if path has trailing slash", "app .param(name, fn) should work with encoded values", "req .acceptsLanguages should be true if language accepted", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "express.urlencoded() with parameterLimit option with extended: false should work with large limit", "express.raw() with inflate option when true should accept content-encoding", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.checkout", "express.text() with limit option should 413 when over limit with chunked encoding", "app.router when next(err) is called should break out of app.router", "Router FQDN should ignore FQDN in path", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value", "app.router methods should reject numbers for app.m-search", "res .render(name) should expose app.locals", "app .engine(ext, fn) should throw when the callback is missing", "res .sendFile(path) should include ETag", "Router FQDN should ignore FQDN in search", "app .use(path, middleware) should support regexp path", "express.urlencoded() with extended option when true should parse array index notation", "res \"etag\" setting when enabled should send ETag in response to GET request", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "express.json() should handle no message-body", "express.static() extensions should be configurable", "res .attachment(filename) should set the Content-Type", "res .render(name) should support absolute paths with \"view engine\"", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .render(name) should support index.<engine>", "mvc GET /user/:id when present should display the user", "app.router methods should reject numbers for app.patch", "express.static() extensions should 404 if nothing found", "express.text() charset should default to utf-8", "app.router methods should include COPY", "req .stale should return true without response headers", "app .param(name, fn) should catch thrown error", "express.json() with verify option should error with type = \"entity.verify.failed\"", "res .sendFile(path) should not error if the client aborts", "res .set(field, values) should not set a charset of one is already set", "utils.wetag(body, encoding) should support empty string", "error-pages Accept: text/plain GET /500 should respond with 500", "app.router methods should reject numbers for app.subscribe", "express.text() encoding should fail on unknown encoding", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "mvc GET /pet/0/edit should get pet edit page", "express.urlencoded() with extended option when true should parse array of objects syntax", "res .redirect(url) should encode \"url\"", "express.raw() with type option when \"application/vnd+octets\" should ignore standard type", "Router .param should only call once per request", "multi-router GET / should respond with root handler", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "app.router methods should include BIND", "req.is() when given a mime type should return false when not matching", "req .host should strip port number", "error-pages Accept: application/json GET /403 should respond with 403", "app.mountpath should return the mounted path", "config .get() when mounted should prefer child \"trust proxy\" setting", "app .param(name, fn) should defer to next route", "express.raw() with limit option should not hang response", "app.path() should return the canonical", "req .stale should return true when the resource is modified", "res .send(String) should set ETag", "app .use(path, middleware) should accept multiple arrays of middleware", "express.urlencoded() with inflate option when true should accept content-encoding", "express.text() with verify option should allow pass-through", "express.urlencoded() with parameterLimit option with extended: true should work with Infinity limit", "req .get(field) should throw for non-string header name", "Route .all should stack", "express.json() with limit option should 413 when over limit with Content-Length", "res .location(url) should set the header", "res .location(url) should encode \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "res .sendFile(path, fn) should invoke the callback when client aborts", "res when the request method is HEAD should ignore the body", "express.json() charset should parse utf-8", "app .render(name, options, fn) should render the template", "express.raw() with verify option should allow pass-through", "app .use(middleware) should accept nested arrays of middleware", "express.static() immutable should default to false", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "express.static() cacheControl when true should include Cache-Control", "res .download(path, filename) should provide an alternate filename", "res .render(name, option) should expose app.locals", "app .use(path, middleware) should support array of paths", "Route .VERB should limit to just .VERB", "express.static() acceptRanges when false should not include Accept-Ranges", "express.urlencoded() with parameterLimit option with extended: false should 413 if over limit", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should ignore \"application/x-json\"", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "res .sendFile(path) should not override manual content-types", "express.json() when JSON is invalid should include original body on error object", "config .set() \"etag\" should set \"etag fn\"", "res .send(undefined) should set body to \"\"", "res .format(obj) in router should Vary: Accept", "app .use(path, middleware) should reject Date as middleware", "Router .multiple callbacks should throw if a callback is not a function", "cookies GET / should respond to cookie", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res \"etag\" setting when disabled should send no ETag", "res .cookie(name, string, options) maxAge should set relative expires", "app .use(middleware) should invoke middleware for all requests", "express.urlencoded() with type option when a function should not invoke without a body", "express.static() fallthrough when true should fall-through when OPTIONS request", "express.json() with verify option should allow custom type", "res \"etag\" setting when enabled should send ETag for long response", "res .sendStatus(statusCode) should work with unknown code", "req .host when \"trust proxy\" is enabled should default to Host", "app .use(path, middleware) should accept multiple arguments", "express.static() maxAge should be reasonable when infinite", "app.router methods should include M-SEARCH", "app.router methods should include MKCALENDAR", "app.router when given a regexp should match the pathname only", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "res .sendFile(path) with \"root\" option should not transfer relative with without", "req .ip when X-Forwarded-For is not present should return the remote address", "express.urlencoded() with parameterLimit option with extended: false should reject string", "res \"etag\" setting when a function should not send falsy ETag", "express.json() with strict option when undefined should 400 on primitives", "app.router :name should work in array of paths", "app.router methods should reject numbers for app.unsubscribe", "express.urlencoded() with parameterLimit option with extended: false should work with Infinity limit", "HEAD should output the same headers as GET requests", "express.json() encoding should 415 on unknown encoding", "express.urlencoded() with limit option should accept number of bytes", "res .render(name, fn) when an error occurs should pass it to the callback", "req .range(size) should cap to the given size", "req .hostname should work with IPv6 Host", "res .sendFile(path) should 404 when not found", "utils.setCharset(type, charset) should keep charset if not given charset", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "express.static() fallthrough when true should fall-through when traversing past root", "app.route promise support should pass rejected promise value", "res .sendFile(path) should 304 when ETag matches", "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length is taken to be equal to one less than the current length", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored case-insensitively", "res .redirect(url) should default to a 302 redirect", "express.raw() with verify option should allow custom codes", "throw after .end() should fail gracefully", "app.router methods should reject numbers for app.purge", "req .range(size) should return undefined if no range", "res .cookie(name, string) should set a cookie", "app .use(path, middleware) should accept nested arrays of middleware", "app.router methods should reject numbers for app.bind", "app.router methods should reject numbers for app.propfind", "app.router methods should reject numbers for app.report", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-www-form-urlencoded\"", "app.router methods should reject numbers for app.get", "req .host should return the Host when present", "multi-router GET /api/v1/ should respond with APIv1 root handler", "app.router methods should reject numbers for app.source", "res .json(object) \"json escape\" setting should not break undefined escape", "express.static() current dir should be served with \".\"", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "auth GET /login should display login error", "express.static() when request has \"Range\" header should set Content-Range", "content-negotiation GET / should accept to text/plain", "res .jsonp(object) should override previous Content-Types with callback", "app.router should run in order added", "app.router methods should include REPORT", "req .query when \"query parser\" is extended should parse parameters with dots", "res \"etag\" setting when disabled should send ETag when manually set", "express.static() when index file serving disabled should next() on directory", "app .param(name, fn) should catch thrown secondary error", "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should include a Content-Range header of complete length", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length should adapt the Content-Length accordingly", "res .render(name) should support absolute paths", "cookies POST / should no set cookie w/o reminder", "res .sendFile(path, fn) should invoke the callback on 404", "express.text() charset should 415 on unknown charset", "res .format(obj) with parameters should allow wildcard type/subtypes", "express.text() with type option when a function should not invoke without a body", "app.router trailing slashes should be optional by default", "app .param(name, fn) should not invoke without route handler", "vhost example.com GET /foo should say foo", "res.vary() when the value is present should not add it again", "express.text() with limit option should not hang response", "express.json() with strict option when false should parse primitives", "express.urlencoded() charset should parse utf-8", "express.urlencoded() with verify option should assert value if function", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "app .VERB() should only call an error handling routing callback when an error is propagated", "express.text() with limit option should accept number of bytes", "app.router :name should denote a capture group", "config .disable() should set the value to false", "app.router methods should include MKACTIVITY", "app.router methods should include SUBSCRIBE", "express.urlencoded() with parameterLimit option with extended: true should reject string", "web-service GET /api/users without an api key should respond with 400 bad request", "config .disabled() should default to true", "express.json() encoding should support deflate encoding", "express.static() basic operations should ignore hidden files", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "Route errors should handle throw", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "res when accepting html should include the redirect type", "app.router decode params should work with unicode", "express.urlencoded() with parameterLimit option with extended: false should error with type = \"parameters.too.many\"", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "req .xhr should case-insensitive", "res .sendFile(path, options) should pass options to send module", "content-negotiation GET / should default to text/html", "mvc GET /user/:id when not present should 404", "app .use(path, middleware) should invoke middleware for all requests starting with path", "express.static() fallthrough when true with redirect: false should fall-through when directory without slash", "OPTIONS should not respond if the path is not defined", "res .jsonp(object) should not override previous Content-Types with no callback", "Router should support .use of other routers", "app.router :name* should match many segments", "express.urlencoded() with verify option should allow custom type", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "express.raw() charset should ignore charset", "auth POST /login should succeed with proper credentials", "req .query when \"query parser\" enabled should not parse complex keys", "req .xhr should return false otherwise", "app .render(name, fn) should support index.<engine>", "app.route should support dynamic routes", "res .jsonp(object) should disallow arbitrary js", "express.json() encoding should parse without encoding", "express.urlencoded() with verify option should error with type = \"entity.verify.failed\"", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-pairs\"", "express.json() encoding should error with type = \"encoding.unsupported\"", "Router .handle should dispatch", "res should work when mounted", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "params GET /user/0 should respond with a user", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/json\"", "express.raw() should parse application/octet-stream", "app .engine(ext, fn) should work \"view engine\" setting", "express.text() with verify option should 415 on unknown charset prior to verify", "mvc PUT /user/:id should 500 on error", "express.urlencoded() should parse x-www-form-urlencoded", "req.is() when given type/* should ignore charset", "req .range(size) should have a .type", "express.raw() with limit option should not change when options altered", "res .jsonp(object) should allow renaming callback", "res .render(name) when \"views\" is given should lookup the file in the path", "Route .all should add handler", "res .set(object) should coerce to a string", "res .sendFile(path) should transfer a file with special characters in string", "express.json() charset should default to utf-8", "res .format(obj) with parameters should Vary: Accept", "express.static() fallthrough when false with redirect: true should redirect when directory without slash", "res \"etag\" setting when enabled should send ETag in response to PUT request", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "req .baseUrl should contain lower path", "express.json() with strict option when true should allow leading whitespaces in JSON", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "express.urlencoded() with limit option should 413 when over limit with Content-Length", "req should accept an argument list of type names", "res .cookie(name, object) should generate a JSON cookie", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "app.router methods should include UNLOCK", "express.static() basic operations should support nesting", "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/plain\"", "express.urlencoded() should handle duplicated middleware", "res .clearCookie(name) should set a cookie passed expiry", "res .send(String) should keep charset in Content-Type for Buffers", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "express.static() when responding non-2xx or 304 should not alter the status", "express.urlencoded() with extended option when true should parse deep object", "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should respond with 416", "res.vary() with an empty array should not set Vary", "multi-router GET /api/v1/users should respond with users from APIv1", "express.static() hidden files should be served when dotfiles: \"allow\" is given", "req .acceptsEncodings should be true if encoding accepted", "mvc PUT /user/:id should update the user", "app.router methods should include CHECKOUT", "Router error should handle throwing in handler after async param", "express.raw() encoding should parse without encoding", "app.router methods should reject numbers for app.search", "app .use(path, middleware) should accept array of middleware", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .format(obj) with extnames should allow wildcard type/subtypes", "res \"etag\" setting when enabled should send ETag for empty string response", "ejs GET / should respond with html", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "express.static() when request has \"Range\" header should support -n", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "express.text() with verify option should assert value is function", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "exports should expose the request prototype", "app.router when given a regexp should ensure regexp matches path prefix", "res .format(obj) in router should set the correct charset for the Content-Type", "res .render(name, options, fn) should pass the resulting string", "web-service GET /api/repos with a valid api key should respond repos json", "express.static() basic operations should support ../", "route-map GET /users/:id/pets/:pid should get a users pet", "express.static() fallthrough when true with redirect: true should fall-through when directory", "app.router methods should include MERGE", "app.router when next(\"router\") is called should jump out of router", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "resource GET /users should respond with all users", "res .json(object) \"json spaces\" setting should be undefined by default", "express.text() charset should parse codepage charsets", "req .ips when X-Forwarded-For is not present should return []", "express.json() with type option when \"application/vnd.api+json\" should ignore standard type", "express.static() fallthrough should default to true", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/octet-stream\"", "app .use(path, middleware) should require middleware", "res .format(obj) with parameters should set the correct charset for the Content-Type", "express.static() basic operations should serve zero-length files", "mvc PUT /pet/2 should update the pet", "res .send(String) should not override Content-Type", "route-separation GET /posts should get a list of posts", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "express.json() charset should parse utf-16", "app.router .:name? should denote an optional format", "auth GET /logout should redirect to /", "req .acceptsCharsets(type) when Accept-Charset is present should return true", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res .render(name, fn) should pass the resulting string", "utils.etag(body, encoding) should support buffer", "app.route promise support should pass rejected promise without value", "express.static() setHeaders should not get called on redirect", "res should respond with 304 Not Modified when fresh", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app.router promise support error handling should ignore resolved promise", "res .jsonp(object) should allow []", "express.static() when index file serving disabled should redirect to trailing slash", "res .location(url) should not touch already-encoded sequences in \"url\"", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "app.router methods should reject numbers for app.delete", "express.urlencoded() charset should parse when content-length != char length", "express.raw() with type option when \"application/vnd+octets\" should parse for custom type", "route-map GET /users should respond with users", "res .format(obj) with extnames should default the Content-Type", "res .locals should be empty by default", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains when subdomain offset is set when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "exports should expose urlencoded middleware", "express.text() charset should parse when content-length != char length", "res .type(str) should default to application/octet-stream", "express.raw() with inflate option when false should not accept content-encoding", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "express.static() basic operations should default max-age=0", "app.router params should allow merging existing req.params", "Router FQDN should adjust FQDN req.url with multiple handlers", "express.static() acceptRanges when false should ignore Rage request header", "cookie-sessions GET / should display no views", "express.text() should handle Content-Length: 0", "app.router methods should reject numbers for app.move", "res .sendFile(path) should error for non-string path", "route-map DELETE /users should delete users", "app.route promise support should ignore resolved promise", "error-pages Accept: application/json GET /404 should respond with 404", "app .render(name, fn) caching should cache with \"view cache\" setting", "res .attachment(utf8filename) should set the Content-Type", "res .json(object) when given an array should respond with json", "express.static() when mounted \"root\" as a file should 404 when trailing slash", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "app.router methods should include UNBIND", "express.urlencoded() should 400 when invalid content-length", "express.urlencoded() with limit option should 413 when over limit with chunked encoding", "res .render(name, option) should render the template", "cookies POST / should set a cookie", "express.urlencoded() with parameterLimit option with extended: true should work if number is floating point", "app .use(middleware) should accept array of middleware", "web-service when requesting an invalid route should respond with 404 json", "Router error should handle throwing inside error handlers", "app.route should not error on empty routes", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "auth POST /login should fail without proper password", "express.raw() with type option when a function should work without content-type", "app.router methods should include MOVE", "express.static() basic operations should require root path", "express.urlencoded() encoding should support deflate encoding", "res .format(obj) given .default should be invoked instead of auto-responding", "express.urlencoded() with parameterLimit option with extended: false should work when at the limit", "express.json() with limit option should not hang response", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should ignore \"application/x-foo\"", "express.static() redirect should not redirect incorrectly", "res .download(path, fn) should invoke the callback", "res .download(path, filename, options, fn) should invoke the callback", "params GET / should respond with instructions", "app .use(path, middleware) should reject number as middleware", "res .format(obj) in router should default the Content-Type", "app .param(name, fn) should call when values differ", "express.json() encoding should 413 when inflated value exceeds limit", "express.urlencoded() with parameterLimit option with extended: true should reject 0", "express.urlencoded() with parameterLimit option with extended: true should 413 if over limit", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "express.static() fallthrough when false with redirect: false should 404 when directory", "res when accepting html should respond with html", "express.static() cacheControl when false should not include Cache-Control", "exports should expose text middleware", "config .get() should return undefined when unset", "res .attachment(filename) should add the filename param", "req .accepts(types) should take quality into account", "Router .use should require middleware", "app .use(path, middleware) should support empty string path", "express.static() fallthrough when false should 405 when OPTIONS request", "Router parallel requests should not mix requests", "vhost example.com GET / should say hello", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "req .get(field) should return the header field value", "express.static() immutable should set immutable directive in Cache-Control", "res \"etag\" setting when a function should send custom ETag", "res .sendStatus(statusCode) should send the status code and message as body", "app .use(app) should mount the app", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "res .jsonp(object) when given an array should invoke callback with an array", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "app .render(name, fn) when an extension is given should render the template", "app.router methods should include PATCH", "express.raw() encoding should support identity encoding", "Router .use should reject Date as middleware", "app.router methods should re-route when method is altered", "express.urlencoded() with parameterLimit option with extended: true should error with type = \"parameters.too.many\"", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app.router methods should reject numbers for app.unlink", "req .accepts(types) should return false when no match is made", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "res .format(obj) with parameters should utilize qvalues in negotiation", "params GET /user/9 should fail to find user", "route-separation GET /user/:id should 404 on missing user", "express.json() with type option when a function should parse when truthy value returned", "res \"etag\" setting when enabled should send ETag", "app .render(name, fn) should support absolute paths", "Router should handle blank URL", "in development should disable \"view cache\"", "res .redirect(status, url) should set the response status", "express.static() when index file serving disabled should next() on mount point", "express.static() when index at mount point should redirect correctly", "req .host should work with IPv6 Host", "express.static() basic operations should set Last-Modified", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "express.static() when request has \"Range\" header should be inclusive", "route-separation GET /user/:id/view should 404 on missing user", "res .sendFile(path) with \"headers\" option should accept headers option", "app.router when next() is called should continue lookup", "express.urlencoded() encoding should support gzip encoding", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "res .json(object) \"json escape\" setting should be undefined by default", "express.json() charset should error with type = \"charset.unsupported\"", "express.text() with defaultCharset option should change default charset", "req .range(size) should return parsed ranges", "app .response should extend the response prototype", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "app.router should be chainable", "express.json() with type option when a function should work without content-type", "express.raw() should 400 when invalid content-length", "express.static() fallthrough when true should fall-through when URL too long", "express.text() should handle empty message-body", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "utils.etag(body, encoding) should support utf8 strings", "app .locals(obj) should merge locals", "res.vary() with a string should set the value", "express.json() with verify option should allow pass-through", "res.vary() with no arguments should throw error", "content-negotiation GET /users should default to text/html", "res when accepting text should include the redirect type", "HEAD should default to GET", "app .param(name, fn) should not call when values differ on error", "Route errors should handle single error handler", "app .param(name, fn) should map logic for a single param", "app.router methods should reject numbers for app.lock", "app.router methods should include PURGE", "res .send(String) should send as html", "downloads GET /files/missing.txt should respond with 404", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "app.router methods should include PROPPATCH", "res .send(Buffer) should not override ETag", "req .query should default to {}", "res \"etag\" setting when enabled should send ETag in response to BIND request", "cookie-sessions GET / should set a session cookie", "app .use(path, middleware) should reject null as middleware", "app.router methods should include UNLINK", "content-negotiation GET /users should accept to application/json", "Route .VERB should support .get", "req .subdomains otherwise should return an empty array", "app.router promise support should pass rejected promise value", "express.raw() should handle Content-Length: 0", "res .format(obj) in router should allow wildcard type/subtypes", "express.static() maxAge should accept string", "res .sendFile(path, fn) should invoke the callback when client already aborted", "express.json() should parse JSON", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "resource GET /users/9 should respond with error", "express.static() when request has \"Range\" header when syntactically invalid should respond with 200 and the entire contents", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should ignore application/x-foo", "express.static() fallthrough when true with redirect: false should fall-through when directory", "req .accepts(types) should return the first acceptable type", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "config .set() should return the app when undefined", "mvc GET /users should display a list of users", "app .param(name, fn) should support altering req.params across routes", "config .get() when mounted should default to the parent app", "res .jsonp(object) \"json escape\" setting should be undefined by default", "express.urlencoded() with limit option should not hang response", "express.urlencoded() encoding should support identity encoding", "res .append(field, val) should get reset by res.set(field, val)", "req .range(size) should accept any type", "express.urlencoded() with parameterLimit option with extended: false should reject 0", "app.router methods should include GET", "express.static() extensions should support fallbacks", "exports should expose raw middleware", "Router .param should call param function when routing middleware", "express.urlencoded() encoding should be case-insensitive", "app.router decode params should not accept params in malformed paths", "express.json() should handle Content-Length: 0", "Router should handle missing URL", "markdown GET / should respond with html", "express.static() fallthrough when false should 403 when traversing past root", "app.router methods should reject numbers for app.acl", "middleware .next() should behave like connect", "resource DELETE /users/1 should delete user 1", "utils.setCharset(type, charset) should return type if not given charset", "express.text() with type option when a function should parse when truthy value returned", "req .fresh should return false without response headers", "req .route should be the executed Route", "express.static() when index file serving disabled should redirect to trailing slash mount point", "res .cookie(name, string, options) maxAge should throw an error with invalid maxAge", "express.static() when traversing past root should catch urlencoded ../", "req.is() when given an extension should lookup the mime type", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "express.text() with verify option should error from verify", "express.text() with limit option should 413 when over limit with Content-Length", "res .jsonp(object) \"json escape\" setting should not break undefined escape", "express.static() acceptRanges when true should obey Rage request header", "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/html\"", "res .json(object) when given primitives should respond with json for null", "express.static() setHeaders should not get called on 404", "res when accepting html should escape the url", "express.json() with type option when \"application/vnd.api+json\" should parse JSON for custom type", "app.route promise support error handling should ignore resolved promise", "express.urlencoded() with type option when a function should parse when truthy value returned", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "utils.wetag(body, encoding) should support buffer", "app.all() should add a router per method", "express.raw() with limit option should 413 when over limit with Content-Length", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "utils.etag(body, encoding) should support strings", "app.listen() should wrap with an HTTP server", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should reject numbers for app.proppatch", "Router FQDN should not obscure FQDNs", "express.text() encoding should parse without encoding", "res .set(field, values) should set multiple response header fields", "res .jsonp(object) should not escape utf whitespace for json fallback", "app .use(app) should set the child's .parent", "express.static() redirect should respond with default Content-Security-Policy", "res .json(object) should not support jsonp callbacks", "req .baseUrl should be empty for top-level route", "app.router methods should include PROPFIND", "res .jsonp(object) should escape utf whitespace", "app .render(name, options, fn) should give precedence to app.render() locals", "res .jsonp(object) when given a string should invoke callback with a string", "express.urlencoded() with extended option when true should parse fully-encoded extended syntax", "express.static() basic operations should support conditional requests", "config .disabled() should return false when set", "app.router methods should include ACL", "express.urlencoded() with parameterLimit option with extended: false should work if number is floating point", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "express.text() with type option when [\"text/html\", \"text/plain\"] should ignore \"text/xml\"", "req .accepts(types) should return the first when Accept is not present", "req .subdomains with no host should return an empty array", "Route .all should handle VERBS", "mvc GET /user/:id/edit should display the edit form", "res .sendFile(path, fn) should invoke the callback when complete", "req.is() when given type/* should return the full type when matching", "express.json() when JSON is invalid should error with type = \"entity.parse.failed\"", "app.router should allow rewriting of the url", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "express.json() with inflate option when true should accept content-encoding", "express.static() redirect should redirect directories with query string", "req .secure when X-Forwarded-Proto is missing should return false when http", "app.router params should merge numeric indices req.params when more in parent", "req .hostname should return the Host when present", "res .format(obj) given .default should work when only .default is provided", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "express.json() encoding should be case-insensitive", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "app.router methods should include POST", "express.text() should handle duplicated middleware", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app.router params should merge numeric indices req.params", "express.json() with strict option when true should not parse primitives", "res .format(obj) with extnames should Vary: Accept", "res should not perform freshness check unless 2xx or 304", "error GET / should respond with 500", "express.urlencoded() with verify option should error from verify", "res when accepting text should respond with text", "res .render(name) when \"view engine\" is given should render the template", "res \"etag\" setting when \"strong\" should send strong ETag", "app should 404 without routes", "express.raw() encoding should support gzip encoding", "app.router methods should reject numbers for app.post", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should reject numbers for app.merge", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app .render(name, fn) should support absolute paths with \"view engine\"", "config .set() should return the app", "express.text() should 400 when invalid content-length", "mvc GET /pet/0 should get pet", "res .attachment() should Content-Disposition to attachment", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "vhost foo.example.com GET / should redirect to /foo", "res \"etag\" setting when enabled should send ETag in response to POST request", "express.static() basic operations should set Content-Type", "res .set(field, values) should throw when Content-Type is an array", "app .use(path, middleware) should support array of paths with middleware array", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "cookies GET / should have a form", "req .query when \"query parser\" is extended should parse complex keys", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res on failure should remove Content-Disposition", "express.json() with limit option should 413 when over limit with chunked encoding", "express.static() redirect should ensure redirect URL is properly encoded", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .send(String) should override charset in Content-Type", "app.router promise support should pass rejected promise without value", "app.router :name? should populate the capture group", "express.raw() encoding should be case-insensitive", "req .fresh should return false when the resource is modified", "req .range(size, options) with \"combine: true\" option should return combined ranges", "res .jsonp(object) should respond with jsonp", "express.json() should handle duplicated middleware", "express.json() with limit option should accept number of bytes", "Route errors should handle throwing inside error handlers", "express.static() extensions should be not be enabled by default", "exports should permit modifying the .request prototype", "express.json() with verify option should work with different charsets", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "auth GET / should redirect to /login", "route-separation GET /users should list users", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "exports should permit modifying the .response prototype", "app.route should all .VERB after .all", "express.static() when mounted should not choke on auth-looking URL", "express.static() when traversing past root should not allow root path disclosure", "OPTIONS should forward requests down the middleware chain", "Router FQDN should adjust FQDN req.url", "express.static() setHeaders should get called when sending file", "req .accepts(types) should return the first acceptable type with canonical mime types", "app.router methods should reject numbers for app.put", "express.json() when JSON is invalid should 400 for bad token", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "res .render(name, option) should give precedence to res.render() locals over res.locals", "res should be chainable", "app.router methods should include UNSUBSCRIBE", "web-service GET /api/users with a valid api key should respond users json", "express.static() basic operations should require root path to be string", "express.text() with verify option should allow custom codes", "req .accepts(type) should return true when present", "express.json() with verify option should allow custom codes", "app.router methods should include SEARCH", "app.router should be .use()able", "Router should not stack overflow with many registered routes", "app.router methods should reject numbers for app.trace", "app.router params should ignore invalid incoming req.params", "express.urlencoded() charset should fail on unknown charset", "config .set() should set a value", "app.router methods should include PUT", "express.static() basic operations should support precondition checks", "req .acceptsLanguages should be false if language not accepted", "res .sendFile(path) should error missing path", "app.router methods should include SOURCE", "auth GET /restricted should redirect to /login without cookie", "req.is() when given */subtype should ignore charset", "res .clearCookie(name, options) should set the given params", "res .download(path, filename, fn) should invoke the callback", "req .query when \"query parser\" an unknown value should throw", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "downloads GET /files/amazing.txt should have a download header", "app .use(app) should support dynamic routes", "express.json() should handle empty message-body", "express.raw() with limit option should 413 when over limit with chunked encoding", "express.urlencoded() with type option when a function should work without content-type", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "Router error should handle throwing inside routes with params", "express.static() setHeaders should reject non-functions", "res .send(Buffer) should set ETag", "res \"etag\" setting when enabled should not override ETag when manually set", "app.router methods should include REBIND", "express.static() basic operations should serve static files", "exports should expose static middleware", "mvc GET / should redirect to /users", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "express.urlencoded() with parameterLimit option with extended: true should work with large limit"], "failed_tests": ["req .query should default to parse simple keys"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 1087, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app.router when next(\"route\") is called should jump to next route", "express.json() with strict option when true should not parse primitives with leading whitespaces", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "app.router :name? should denote an optional capture group", "resource GET / should respond with instructions", "req .xhr should return true when X-Requested-With is xmlhttprequest", "res .send(Buffer) should send as octet-stream", "res when accepting text should encode the url", "res should always check regardless of length", "express.static() acceptRanges when true should include Accept-Ranges", "res .jsonp(object) when given an object should invoke callback with an object", "app.router methods should reject numbers for app.unlock", "multi-router GET /api/v2/users should respond with users from APIv2", "app.all() should run the callback for a method just once", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "req .acceptsCharsets(type) when Accept-Charset is present should return false otherwise", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "vhost bar.example.com GET / should redirect to /bar", "express.json() with type option when a function should not invoke without a body", "express.static() fallthrough when false should 404 when URL too long", "express.urlencoded() with parameterLimit option with extended: true should work when at the limit", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "Router .multiple callbacks should throw if a callback is null", "express.urlencoded() with verify option should 415 on unknown charset prior to verify", "res .jsonp(object) when given a number should invoke callback with a number", "app .engine(ext, fn) should map a template engine", "res .append(field, val) should work with cookies", "exports should expose Router", "app.router :name should work following a partial capture group", "markdown GET /fail should respond with an error", "auth POST /login should fail without proper username", "res .jsonp(object) should include security header and prologue", "express.json() with limit option should not change when options altered", "resource DELETE /users/9 should fail", "express.raw() encoding should support deflate encoding", "req.is() when given */subtype should return the full type when matching", "app.router :name+ should not match zero segments", "express.urlencoded() with limit option should not change when options altered", "req .subdomains when present should work with IPv6 address", "express.raw() should handle empty message-body", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "content-negotiation GET / should accept to application/json", "error-pages Accept: text/plain GET /403 should respond with 403", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "express.urlencoded() should not parse extended syntax", "req .fresh should return true when the resource is not modified", "res .cookie(name, string) should allow multiple calls", "res \"etag\" setting when enabled should send ETag in response to LINK request", "app .param(name, fn) should only call once per request", "express.json() encoding should support gzip encoding", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "Router should support dynamic routes", "express.urlencoded() with inflate option when false should not accept content-encoding", "app.router methods should include MKCOL", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "Router .param should call when values differ", "req .hostname should work with IPv6 Host and port", "res .links(obj) should set Link header field", "app .render(name, fn) should expose app.locals", "express.text() charset should parse utf-8", "express.urlencoded() with extended option when false should not parse extended syntax", "app.router methods should include TRACE", "res \"etag\" setting when \"weak\" should send weak ETag", "express.static() lastModified when true should include Last-Modified", "app.router should restore req.params after leaving router", "req.is() when given type/* should return false when not matching", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored", "req .acceptsLanguages when Accept-Language is not present should always return true", "app.router methods should include NOTIFY", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "express.raw() with type option when a function should not invoke without a body", "express.text() encoding should support gzip encoding", "express.text() encoding should be case-insensitive", "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should ignore standard type", "config .enabled() should return true when set", "res .send(Object) should send as application/json", "res .set(field, value) should coerce to a string", "req .subdomains when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "express.static() redirect should include HTML link", "express.raw() should handle duplicated middleware", "express.static() when request has \"Range\" header should support n-", "express.urlencoded() charset should default to utf-8", "req.is() when content-type is not present should return false", "res .cookie(name, string, options) signed without secret should throw an error", "app.router :name+ should match many segments", "app .param(names, fn) should map the array", "express.static() fallthrough when false with redirect: true should 404 when directory", "express.urlencoded() with verify option should allow pass-through", "res .send(null) should set body to \"\"", "app.router methods should reject numbers for app.copy", "express.json() charset should parse when content-length != char length", "express.static() fallthrough when true should fall-through when URL malformed", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "downloads GET / should have a link to amazing.txt", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "route-separation GET /user/:id should get a user", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "res .set(object) should set multiple fields", "app.router :name* should match zero segments", "express.static() extensions should support disabling extensions", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "error-pages GET / should respond with page list", "route-separation GET /user/:id/view should get a user", "req .query when \"query parser\" is a function should parse using function", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app .use(middleware) should accept multiple arrays of middleware", "express.static() basic operations should support HEAD", "app.parent should return the parent when mounted", "express.json() with verify option should include original body on error object", "params GET /users/foo-bar should fail integer parsing", "exports should permit modifying the .application prototype", "express.urlencoded() with extended option when true should parse parameters with dots", "app.router methods should include DELETE", "express.text() with type option when \"text/html\" should parse for custom type", "express.json() with verify option should 415 on unknown charset prior to verify", "res .sendFile(path) should transfer a file", "app .render(name, fn) when the file does not exist should provide a helpful error", "app .render(name, fn) should handle render error throws", "res .format(obj) with extnames should set the correct charset for the Content-Type", "params GET /users/0-2 should respond with three users", "Route .VERB should allow fallthrough", "res .json(object) should not override previous Content-Types", "app .VERB() should not get invoked without error handler on error", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "res .type(str) should set the Content-Type based on a filename", "express.json() with limit option should error with type = \"entity.too.large\"", "app.router methods should include LINK", "express.urlencoded() with verify option should allow custom codes", "res .send(Buffer) should not override Content-Type", "app.router :name+ should match one segment", "app.router when next(err) is called should call handler in same route, if exists", "app should emit \"mount\" when mounted", "config .enable() should set the value to true", "Router should return a function with router methods", "express.static() lastModified when false should not include Last-Modified", "app.route promise support error handling should pass rejected promise value", "express.static() redirect should not redirect to protocol-relative locations", "res .jsonp(object) should use first callback parameter with jsonp", "route-map GET /users/:id should get a user", "app.router promise support error handling should pass rejected promise value", "express.raw() with type option when a function should parse when truthy value returned", "app.router should allow literal \".\"", "app.router params should merge numeric indices req.params when parent has same number", "route-separation GET /user/:id/edit should get a user to edit", "req .acceptsEncodings should be false if encoding not accepted", "req .path should return the parsed pathname", "app .render(name, fn) caching should always lookup view without cache", "Router .param should call param function when routing VERBS", "config .get() should otherwise return the value", "mvc GET /user/:id when present should display the users pets", "express.text() should parse text/plain", "error-pages Accept: application/json GET /500 should respond with 500", "res .append(field, val) should append multiple headers", "express.urlencoded() should handle Content-Length: 0", "error GET /next should respond with 500", "Router .multiple callbacks should not throw if all callbacks are functions", "express.json() encoding should support identity encoding", "req .host should return undefined otherwise", "app should be callable", "res .send() should set body to \"\"", "res should not override previous Content-Types", "express.raw() with verify option should assert value is function", "utils.wetag(body, encoding) should support strings", "express.static() basic operations should not choke on auth-looking URL", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "utils.setCharset(type, charset) should do anything without type", "res \"etag\" setting when enabled should send ETag in response to ACL request", "Router .all should support using .all to capture all http verbs", "express.static() fallthrough when true with redirect: true should redirect when directory without slash", "utils.setCharset(type, charset) should override charset", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/vnd.api+json\"", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app should inherit from event emitter", "express.static() redirect when false should disable redirect", "resource GET /users/1..3 should respond with users 1 through 3", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "Router .use should be called for any URL", "res .append(field, val) should accept array of values", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router case sensitivity should be disabled by default", "utils.etag(body, encoding) should support empty string", "mvc POST /user/:id/pet should create a pet for user", "express.json() with verify option should error from verify", "res .status(code) should set the response .statusCode", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "cookies GET / should respond with no cookies", "app.route promise support error handling should pass rejected promise without value", "without NODE_ENV should default to development", "express.json() when JSON is invalid should 400 for incomplete", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "req .secure when X-Forwarded-Proto is present should return false when http", "express.urlencoded() should handle empty message-body", "res .render(name, option) should give precedence to res.locals over app.locals", "express.static() when request has \"Range\" header should respond with 206 \"Partial Content\"", "app.options() should override the default behavior", "app.router promise support error handling should pass rejected promise without value", "res .format(obj) with extnames should utilize qvalues in negotiation", "utils.setCharset(type, charset) should set charset", "app .locals.settings should expose app settings", "app.router methods should reject numbers for app.options", "app.router decode params should decode correct params", "req.is() when given a mime type should ignore charset", "res .cookie(name, string, options) should set params", "res .render(name, option) should give precedence to res.render() locals over app.locals", "req .subdomains with trusted X-Forwarded-Host should return an array", "express.raw() with limit option should accept number of bytes", "express.text() encoding should support identity encoding", "app.router params should restore req.params", "app.router :name should allow several capture groups", "express.static() basic operations should skip POST requests", "express.raw() with verify option should error from verify", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "express.text() with inflate option when true should accept content-encoding", "config .get() when mounted should given precedence to the child", "res .set(field, value) should set the response header field", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "config .get() when mounted should inherit \"trust proxy\" setting", "app.router methods should reject numbers for app.mkcol", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "express.urlencoded() with extended option when true should parse extended syntax", "express.static() when mounted \"root\" as a file should load the file when on trailing slash", "res .jsonp(object) when given undefined should invoke callback with no arguments", "express.json() with verify option should assert value if function", "res \"etag\" setting when enabled should send ETag in response to COPY request", "express.urlencoded() with type option when \"application/vnd.x-www-form-urlencoded\" should parse for custom type", "express.static() cacheControl when false should ignore maxAge", "res \"etag\" setting when enabled should not send ETag for res.send()", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "Route errors should handle errors via arity 4 functions", "app.router methods should reject numbers for app.mkcalendar", "express.text() with type option when a function should work without content-type", "res .attachment(utf8filename) should add the filename and filename* params", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "app.router methods should reject numbers for app.unbind", "res .format(obj) with parameters should default the Content-Type", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/vnd+octets\"", "express.static() when request has \"Range\" header should set Content-Length to the # of octets transferred", "req .subdomains when present should work with IPv4 address", "route-separation GET / should respond with index", "express.text() with type option when \"text/html\" should ignore standard type", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "res .json(object) when given an object should respond with json", "express.static() basic operations should support index.html", "res .sendFile(path) should 404 for directory", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "req .stale should return false when the resource is not modified", "res should not support jsonp callbacks", "res .sendFile(path, fn) should invoke the callback without error when 304", "express.text() with inflate option when false should not accept content-encoding", "express.json() with inflate option when false should not accept content-encoding", "res .render(name) should error without \"view engine\" set and no file extension", "Router .use should accept array of middleware", "error-pages Accept: text/html GET /403 should respond with 403", "multi-router GET /api/v2/ should respond with APIv2 root handler", "express.text() with defaultCharset option should honor content-type charset", "error-pages Accept: text/html GET /404 should respond with 404", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "error-pages Accept: text/html GET /500 should respond with 500", "app.router params should use params from router", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.link", "express.json() encoding should 400 on malformed encoding", "res .get(field) should get the response header field", "req .accepts(type) should return true when Accept is not present", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "exports should expose json middleware", "res .send(Number) should send as application/json", "app .use(path, middleware) should strip path from req.url", "Router error should skip non error middleware", "app.router decode params should not decode spaces", "express.urlencoded() with extended option when true should parse array index notation with large array", "express.urlencoded() encoding should fail on unknown encoding", "app.router promise support should ignore resolved promise", "req .baseUrl should travel through routers correctly", "res .cookie(name, string, options) maxAge should not mutate the options object", "Router .param should reject non-function", "res .type(str) should set the Content-Type with type/subtype", "app.router methods should reject numbers for app.rebind", "res when accepting neither text or html should respond with an empty body", "req.is() when given */subtype should return false when not matching", "app.router params should overwrite existing req.params by default", "app.router methods should reject numbers for app.mkactivity", "error-pages Accept: text/plain GET /404 should respond with 404", "exports should expose the response prototype", "express.urlencoded() encoding should parse without encoding", "app .request should extend the request prototype", "app.router :name* should match one segment", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "req .range(size) should cap to the given size when open-ended", "req .xhr should return false when not present", "express.json() charset should fail on unknown charset", "req .get(field) should special-case Referer", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "app .use(app) should support mount-points", "route-map GET /users/:id/pets should get a users pets", "utils.wetag(body, encoding) should support utf8 strings", "app .use(path, middleware) should reject string as middleware", "req .host should work with IPv6 Host and port", "res .render(name) when an error occurs should next(err)", "req.is() when given a mime type should return the type when matching", "express.json() with strict option when true should error with type = \"entity.parse.failed\"", "res .json(object) when given primitives should respond with json for Number", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number", "app.router methods should include OPTIONS", "app .render(name, fn) when \"view engine\" is given should render the template", "Router .use should reject number as middleware", "Router .param should require function", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "res.vary() with an array should set the values", "in production should enable \"view cache\"", "express.json() with strict option when true should include correct message in stack trace", "app .engine(ext, fn) should work without leading \".\"", "app .use(app) should support mounted app anywhere", "express.json() should 400 when invalid content-length", "express.text() encoding should support deflate encoding", "req .subdomains when subdomain offset is set otherwise should return an empty array", "res .cookie(name, string, options) maxAge should set max-age", "OPTIONS when error occurs in response handler should pass error to callback", "res .render(name) should expose app.locals with `name` property", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "content-negotiation GET /users should accept to text/plain", "req .baseUrl should contain full lower path", "express.raw() encoding should fail on unknown encoding", "req .query when \"query parser\" disabled should not parse query", "app.router methods should include LOCK", "app.router :name should work inside literal parenthesis", "error GET /missing should respond with 404", "res .json(object) when given primitives should respond with json for String", "app.route should return a new route", "exports should expose the application prototype", "Route should work without handlers", "app .use(middleware) should accept multiple arguments", "express.text() with limit option should not change when options altered", "req .accepts(type) should return false otherwise", "app.router methods should reject numbers for app.notify", "res .set(field, values) should coerce to an array of strings", "app.head() should override", "OPTIONS should only include each method once", "app.router methods should reject numbers for app.head", "req .hostname should strip port number", "res .format(obj) with canonicalized mime types should Vary: Accept", "res .render(name, option) should expose res.locals", "auth GET /login should render login form", "Router .use should reject string as middleware", "cookies GET /forget should clear cookie", "res .jsonp(object) should ignore object callback parameter with jsonp", "res .links(obj) should set Link header field for multiple calls", "OPTIONS should not be affected by app.all", "Router .use should reject null as middleware", "express.static() redirect should redirect directories", "express.static() basic operations should support urlencoded pathnames", "cookie-sessions GET / should display 1 view on revisit", "req .protocol should return the protocol string", "res .append(field, val) should work with res.set(field, val) first", "downloads GET /files/notes/groceries.txt should have a download header", "config .enabled() should default to false", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "app .param(name, fn) should call when values differ when using \"next\"", "express.static() when request has \"Range\" header should support byte ranges", "express.urlencoded() with extended option when true should parse multiple key instances", "res .download(path) should transfer as an attachment", "express.urlencoded() with extended option when false should parse multiple key instances", "app .param(name, fn) should defer all the param routes", "req .get(field) should throw missing header name", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .format(obj) in router when Accept is not present should invoke the first callback", "res .jsonp(object) when given null should invoke callback with null", "app .render(name, fn) when an error occurs should invoke the callback", "Route errors should handle throw in .all", "app .response should not be influenced by other app protos", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include HEAD", "req .hostname when \"trust proxy\" is enabled should default to Host", "resource GET /users/1 should respond with user 1", "res .format(obj) in router should utilize qvalues in negotiation", "app.router .:name should denote a format", "app.router :name should match a single segment only", "req .signedCookies should return a signed JSON cookie", "app.router when given a regexp should populate req.params with the captures", "route-separation PUT /user/:id/edit should edit a user", "res on failure should invoke the callback", "express.static() fallthrough when false with redirect: false should 404 when directory without slash", "auth GET /restricted should succeed with proper cookie", "config .set() \"etag\" should throw on bad value", "req .hostname should return undefined otherwise", "Router .multiple callbacks should throw if a callback is undefined", "express.static() when mounted should redirect relative to the originalUrl", "express.static() fallthrough when false should 400 when URL malformed", "req .query should default to parse simple keys", "app .use(path, middleware) should work if path has trailing slash", "app .param(name, fn) should work with encoded values", "req .acceptsLanguages should be true if language accepted", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "express.urlencoded() with parameterLimit option with extended: false should work with large limit", "express.raw() with inflate option when true should accept content-encoding", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.checkout", "express.text() with limit option should 413 when over limit with chunked encoding", "app.router when next(err) is called should break out of app.router", "Router FQDN should ignore FQDN in path", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value", "app.router methods should reject numbers for app.m-search", "res .render(name) should expose app.locals", "app .engine(ext, fn) should throw when the callback is missing", "res .sendFile(path) should include ETag", "Router FQDN should ignore FQDN in search", "app .use(path, middleware) should support regexp path", "express.urlencoded() with extended option when true should parse array index notation", "res \"etag\" setting when enabled should send ETag in response to GET request", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "express.json() should handle no message-body", "express.static() extensions should be configurable", "res .attachment(filename) should set the Content-Type", "res .render(name) should support absolute paths with \"view engine\"", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .render(name) should support index.<engine>", "mvc GET /user/:id when present should display the user", "app.router methods should reject numbers for app.patch", "express.static() extensions should 404 if nothing found", "express.text() charset should default to utf-8", "app.router methods should include COPY", "req .stale should return true without response headers", "app .param(name, fn) should catch thrown error", "express.json() with verify option should error with type = \"entity.verify.failed\"", "res .sendFile(path) should not error if the client aborts", "res .set(field, values) should not set a charset of one is already set", "utils.wetag(body, encoding) should support empty string", "error-pages Accept: text/plain GET /500 should respond with 500", "app.router methods should reject numbers for app.subscribe", "express.text() encoding should fail on unknown encoding", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "mvc GET /pet/0/edit should get pet edit page", "express.urlencoded() with extended option when true should parse array of objects syntax", "res .redirect(url) should encode \"url\"", "express.raw() with type option when \"application/vnd+octets\" should ignore standard type", "Router .param should only call once per request", "multi-router GET / should respond with root handler", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "app.router methods should include BIND", "req.is() when given a mime type should return false when not matching", "req .host should strip port number", "error-pages Accept: application/json GET /403 should respond with 403", "app.mountpath should return the mounted path", "config .get() when mounted should prefer child \"trust proxy\" setting", "app .param(name, fn) should defer to next route", "express.raw() with limit option should not hang response", "app.path() should return the canonical", "req .stale should return true when the resource is modified", "res .send(String) should set ETag", "app .use(path, middleware) should accept multiple arrays of middleware", "express.urlencoded() with inflate option when true should accept content-encoding", "express.text() with verify option should allow pass-through", "express.urlencoded() with parameterLimit option with extended: true should work with Infinity limit", "req .get(field) should throw for non-string header name", "Route .all should stack", "express.json() with limit option should 413 when over limit with Content-Length", "res .location(url) should set the header", "res .location(url) should encode \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "res .sendFile(path, fn) should invoke the callback when client aborts", "res when the request method is HEAD should ignore the body", "express.json() charset should parse utf-8", "app .render(name, options, fn) should render the template", "express.raw() with verify option should allow pass-through", "app .use(middleware) should accept nested arrays of middleware", "express.static() immutable should default to false", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "express.static() cacheControl when true should include Cache-Control", "res .download(path, filename) should provide an alternate filename", "res .render(name, option) should expose app.locals", "app .use(path, middleware) should support array of paths", "Route .VERB should limit to just .VERB", "express.static() acceptRanges when false should not include Accept-Ranges", "express.urlencoded() with parameterLimit option with extended: false should 413 if over limit", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should ignore \"application/x-json\"", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "res .sendFile(path) should not override manual content-types", "express.json() when JSON is invalid should include original body on error object", "config .set() \"etag\" should set \"etag fn\"", "res .send(undefined) should set body to \"\"", "res .format(obj) in router should Vary: Accept", "app .use(path, middleware) should reject Date as middleware", "Router .multiple callbacks should throw if a callback is not a function", "cookies GET / should respond to cookie", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res \"etag\" setting when disabled should send no ETag", "res .cookie(name, string, options) maxAge should set relative expires", "app .use(middleware) should invoke middleware for all requests", "express.urlencoded() with type option when a function should not invoke without a body", "express.static() fallthrough when true should fall-through when OPTIONS request", "express.json() with verify option should allow custom type", "res \"etag\" setting when enabled should send ETag for long response", "res .sendStatus(statusCode) should work with unknown code", "req .host when \"trust proxy\" is enabled should default to Host", "app .use(path, middleware) should accept multiple arguments", "express.static() maxAge should be reasonable when infinite", "app.router methods should include M-SEARCH", "app.router methods should include MKCALENDAR", "app.router when given a regexp should match the pathname only", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "res .sendFile(path) with \"root\" option should not transfer relative with without", "req .ip when X-Forwarded-For is not present should return the remote address", "express.urlencoded() with parameterLimit option with extended: false should reject string", "res \"etag\" setting when a function should not send falsy ETag", "express.json() with strict option when undefined should 400 on primitives", "app.router :name should work in array of paths", "app.router methods should reject numbers for app.unsubscribe", "express.urlencoded() with parameterLimit option with extended: false should work with Infinity limit", "HEAD should output the same headers as GET requests", "express.json() encoding should 415 on unknown encoding", "express.urlencoded() with limit option should accept number of bytes", "res .render(name, fn) when an error occurs should pass it to the callback", "req .range(size) should cap to the given size", "req .hostname should work with IPv6 Host", "res .sendFile(path) should 404 when not found", "utils.setCharset(type, charset) should keep charset if not given charset", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "express.static() fallthrough when true should fall-through when traversing past root", "app.route promise support should pass rejected promise value", "res .sendFile(path) should 304 when ETag matches", "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length is taken to be equal to one less than the current length", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should be ignored case-insensitively", "res .redirect(url) should default to a 302 redirect", "express.raw() with verify option should allow custom codes", "throw after .end() should fail gracefully", "app.router methods should reject numbers for app.purge", "req .range(size) should return undefined if no range", "res .cookie(name, string) should set a cookie", "app .use(path, middleware) should accept nested arrays of middleware", "app.router methods should reject numbers for app.bind", "app.router methods should reject numbers for app.propfind", "app.router methods should reject numbers for app.report", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-www-form-urlencoded\"", "app.router methods should reject numbers for app.get", "req .host should return the Host when present", "multi-router GET /api/v1/ should respond with APIv1 root handler", "app.router methods should reject numbers for app.source", "res .json(object) \"json escape\" setting should not break undefined escape", "express.static() current dir should be served with \".\"", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "auth GET /login should display login error", "express.static() when request has \"Range\" header should set Content-Range", "content-negotiation GET / should accept to text/plain", "res .jsonp(object) should override previous Content-Types with callback", "app.router should run in order added", "app.router methods should include REPORT", "req .query when \"query parser\" is extended should parse parameters with dots", "res \"etag\" setting when disabled should send ETag when manually set", "express.static() when index file serving disabled should next() on directory", "app .param(name, fn) should catch thrown secondary error", "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should include a Content-Range header of complete length", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "express.static() when request has \"Range\" header when last-byte-pos of the range is greater than current length should adapt the Content-Length accordingly", "res .render(name) should support absolute paths", "cookies POST / should no set cookie w/o reminder", "res .sendFile(path, fn) should invoke the callback on 404", "express.text() charset should 415 on unknown charset", "res .format(obj) with parameters should allow wildcard type/subtypes", "express.text() with type option when a function should not invoke without a body", "app.router trailing slashes should be optional by default", "app .param(name, fn) should not invoke without route handler", "vhost example.com GET /foo should say foo", "res.vary() when the value is present should not add it again", "express.text() with limit option should not hang response", "express.json() with strict option when false should parse primitives", "express.urlencoded() charset should parse utf-8", "express.urlencoded() with verify option should assert value if function", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "app .VERB() should only call an error handling routing callback when an error is propagated", "express.text() with limit option should accept number of bytes", "app.router :name should denote a capture group", "config .disable() should set the value to false", "app.router methods should include MKACTIVITY", "app.router methods should include SUBSCRIBE", "express.urlencoded() with parameterLimit option with extended: true should reject string", "web-service GET /api/users without an api key should respond with 400 bad request", "config .disabled() should default to true", "express.json() encoding should support deflate encoding", "express.static() basic operations should ignore hidden files", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "Route errors should handle throw", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "res when accepting html should include the redirect type", "app.router decode params should work with unicode", "express.urlencoded() with parameterLimit option with extended: false should error with type = \"parameters.too.many\"", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "req .xhr should case-insensitive", "res .sendFile(path, options) should pass options to send module", "content-negotiation GET / should default to text/html", "mvc GET /user/:id when not present should 404", "app .use(path, middleware) should invoke middleware for all requests starting with path", "express.static() fallthrough when true with redirect: false should fall-through when directory without slash", "OPTIONS should not respond if the path is not defined", "res .jsonp(object) should not override previous Content-Types with no callback", "Router should support .use of other routers", "app.router :name* should match many segments", "express.urlencoded() with verify option should allow custom type", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "express.raw() charset should ignore charset", "auth POST /login should succeed with proper credentials", "req .query when \"query parser\" enabled should not parse complex keys", "req .xhr should return false otherwise", "app .render(name, fn) should support index.<engine>", "app.route should support dynamic routes", "res .jsonp(object) should disallow arbitrary js", "express.json() encoding should parse without encoding", "express.urlencoded() with verify option should error with type = \"entity.verify.failed\"", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should parse \"application/x-pairs\"", "express.json() encoding should error with type = \"encoding.unsupported\"", "Router .handle should dispatch", "res should work when mounted", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "params GET /user/0 should respond with a user", "express.json() with type option when [\"application/json\", \"application/vnd.api+json\"] should parse JSON for \"application/json\"", "express.raw() should parse application/octet-stream", "app .engine(ext, fn) should work \"view engine\" setting", "express.text() with verify option should 415 on unknown charset prior to verify", "mvc PUT /user/:id should 500 on error", "express.urlencoded() should parse x-www-form-urlencoded", "req.is() when given type/* should ignore charset", "req .range(size) should have a .type", "express.raw() with limit option should not change when options altered", "res .jsonp(object) should allow renaming callback", "res .render(name) when \"views\" is given should lookup the file in the path", "Route .all should add handler", "res .set(object) should coerce to a string", "res .sendFile(path) should transfer a file with special characters in string", "express.json() charset should default to utf-8", "res .format(obj) with parameters should Vary: Accept", "express.static() fallthrough when false with redirect: true should redirect when directory without slash", "res \"etag\" setting when enabled should send ETag in response to PUT request", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "req .baseUrl should contain lower path", "express.json() with strict option when true should allow leading whitespaces in JSON", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "express.urlencoded() with limit option should 413 when over limit with Content-Length", "req should accept an argument list of type names", "res .cookie(name, object) should generate a JSON cookie", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "app.router methods should include UNLOCK", "express.static() basic operations should support nesting", "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/plain\"", "express.urlencoded() should handle duplicated middleware", "res .clearCookie(name) should set a cookie passed expiry", "res .send(String) should keep charset in Content-Type for Buffers", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "express.static() when responding non-2xx or 304 should not alter the status", "express.urlencoded() with extended option when true should parse deep object", "express.static() when request has \"Range\" header when the first- byte-pos of the range is greater than the current length should respond with 416", "res.vary() with an empty array should not set Vary", "multi-router GET /api/v1/users should respond with users from APIv1", "express.static() hidden files should be served when dotfiles: \"allow\" is given", "req .acceptsEncodings should be true if encoding accepted", "mvc PUT /user/:id should update the user", "app.router methods should include CHECKOUT", "Router error should handle throwing in handler after async param", "express.raw() encoding should parse without encoding", "app.router methods should reject numbers for app.search", "app .use(path, middleware) should accept array of middleware", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .format(obj) with extnames should allow wildcard type/subtypes", "res \"etag\" setting when enabled should send ETag for empty string response", "ejs GET / should respond with html", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "express.static() when request has \"Range\" header should support -n", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "express.text() with verify option should assert value is function", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "exports should expose the request prototype", "app.router when given a regexp should ensure regexp matches path prefix", "res .format(obj) in router should set the correct charset for the Content-Type", "res .render(name, options, fn) should pass the resulting string", "web-service GET /api/repos with a valid api key should respond repos json", "express.static() basic operations should support ../", "route-map GET /users/:id/pets/:pid should get a users pet", "express.static() fallthrough when true with redirect: true should fall-through when directory", "app.router methods should include MERGE", "app.router when next(\"router\") is called should jump out of router", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "resource GET /users should respond with all users", "res .json(object) \"json spaces\" setting should be undefined by default", "express.text() charset should parse codepage charsets", "req .ips when X-Forwarded-For is not present should return []", "express.json() with type option when \"application/vnd.api+json\" should ignore standard type", "express.static() fallthrough should default to true", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should parse \"application/octet-stream\"", "app .use(path, middleware) should require middleware", "res .format(obj) with parameters should set the correct charset for the Content-Type", "express.static() basic operations should serve zero-length files", "mvc PUT /pet/2 should update the pet", "res .send(String) should not override Content-Type", "route-separation GET /posts should get a list of posts", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "express.json() charset should parse utf-16", "app.router .:name? should denote an optional format", "auth GET /logout should redirect to /", "req .acceptsCharsets(type) when Accept-Charset is present should return true", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res .render(name, fn) should pass the resulting string", "utils.etag(body, encoding) should support buffer", "app.route promise support should pass rejected promise without value", "express.static() setHeaders should not get called on redirect", "res should respond with 304 Not Modified when fresh", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app.router promise support error handling should ignore resolved promise", "res .jsonp(object) should allow []", "express.static() when index file serving disabled should redirect to trailing slash", "res .location(url) should not touch already-encoded sequences in \"url\"", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "app.router methods should reject numbers for app.delete", "express.urlencoded() charset should parse when content-length != char length", "express.raw() with type option when \"application/vnd+octets\" should parse for custom type", "route-map GET /users should respond with users", "res .format(obj) with extnames should default the Content-Type", "res .locals should be empty by default", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains when subdomain offset is set when present should return an array", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "exports should expose urlencoded middleware", "express.text() charset should parse when content-length != char length", "res .type(str) should default to application/octet-stream", "express.raw() with inflate option when false should not accept content-encoding", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "express.static() basic operations should default max-age=0", "app.router params should allow merging existing req.params", "Router FQDN should adjust FQDN req.url with multiple handlers", "express.static() acceptRanges when false should ignore Rage request header", "cookie-sessions GET / should display no views", "express.text() should handle Content-Length: 0", "app.router methods should reject numbers for app.move", "res .sendFile(path) should error for non-string path", "route-map DELETE /users should delete users", "app.route promise support should ignore resolved promise", "error-pages Accept: application/json GET /404 should respond with 404", "app .render(name, fn) caching should cache with \"view cache\" setting", "res .attachment(utf8filename) should set the Content-Type", "res .json(object) when given an array should respond with json", "express.static() when mounted \"root\" as a file should 404 when trailing slash", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "app.router methods should include UNBIND", "express.urlencoded() should 400 when invalid content-length", "express.urlencoded() with limit option should 413 when over limit with chunked encoding", "res .render(name, option) should render the template", "cookies POST / should set a cookie", "express.urlencoded() with parameterLimit option with extended: true should work if number is floating point", "app .use(middleware) should accept array of middleware", "web-service when requesting an invalid route should respond with 404 json", "Router error should handle throwing inside error handlers", "app.route should not error on empty routes", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "auth POST /login should fail without proper password", "express.raw() with type option when a function should work without content-type", "app.router methods should include MOVE", "express.static() basic operations should require root path", "express.urlencoded() encoding should support deflate encoding", "res .format(obj) given .default should be invoked instead of auto-responding", "express.urlencoded() with parameterLimit option with extended: false should work when at the limit", "express.json() with limit option should not hang response", "express.raw() with type option when [\"application/octet-stream\", \"application/vnd+octets\"] should ignore \"application/x-foo\"", "express.static() redirect should not redirect incorrectly", "res .download(path, fn) should invoke the callback", "res .download(path, filename, options, fn) should invoke the callback", "params GET / should respond with instructions", "app .use(path, middleware) should reject number as middleware", "res .format(obj) in router should default the Content-Type", "app .param(name, fn) should call when values differ", "express.json() encoding should 413 when inflated value exceeds limit", "express.urlencoded() with parameterLimit option with extended: true should reject 0", "express.urlencoded() with parameterLimit option with extended: true should 413 if over limit", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "express.static() fallthrough when false with redirect: false should 404 when directory", "res when accepting html should respond with html", "express.static() cacheControl when false should not include Cache-Control", "exports should expose text middleware", "config .get() should return undefined when unset", "res .attachment(filename) should add the filename param", "req .accepts(types) should take quality into account", "Router .use should require middleware", "app .use(path, middleware) should support empty string path", "express.static() fallthrough when false should 405 when OPTIONS request", "Router parallel requests should not mix requests", "vhost example.com GET / should say hello", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "req .get(field) should return the header field value", "express.static() immutable should set immutable directive in Cache-Control", "res \"etag\" setting when a function should send custom ETag", "res .sendStatus(statusCode) should send the status code and message as body", "app .use(app) should mount the app", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "res .jsonp(object) when given an array should invoke callback with an array", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "app .render(name, fn) when an extension is given should render the template", "app.router methods should include PATCH", "express.raw() encoding should support identity encoding", "Router .use should reject Date as middleware", "app.router methods should re-route when method is altered", "express.urlencoded() with parameterLimit option with extended: true should error with type = \"parameters.too.many\"", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app.router methods should reject numbers for app.unlink", "req .accepts(types) should return false when no match is made", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "res .format(obj) with parameters should utilize qvalues in negotiation", "params GET /user/9 should fail to find user", "route-separation GET /user/:id should 404 on missing user", "express.json() with type option when a function should parse when truthy value returned", "res \"etag\" setting when enabled should send ETag", "app .render(name, fn) should support absolute paths", "Router should handle blank URL", "in development should disable \"view cache\"", "res .redirect(status, url) should set the response status", "express.static() when index file serving disabled should next() on mount point", "express.static() when index at mount point should redirect correctly", "req .host should work with IPv6 Host", "express.static() basic operations should set Last-Modified", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "express.static() when request has \"Range\" header should be inclusive", "route-separation GET /user/:id/view should 404 on missing user", "res .sendFile(path) with \"headers\" option should accept headers option", "app.router when next() is called should continue lookup", "express.urlencoded() encoding should support gzip encoding", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "res .json(object) \"json escape\" setting should be undefined by default", "express.json() charset should error with type = \"charset.unsupported\"", "express.text() with defaultCharset option should change default charset", "req .range(size) should return parsed ranges", "app .response should extend the response prototype", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "app.router should be chainable", "express.json() with type option when a function should work without content-type", "express.raw() should 400 when invalid content-length", "express.static() fallthrough when true should fall-through when URL too long", "express.text() should handle empty message-body", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "utils.etag(body, encoding) should support utf8 strings", "app .locals(obj) should merge locals", "res.vary() with a string should set the value", "express.json() with verify option should allow pass-through", "res.vary() with no arguments should throw error", "content-negotiation GET /users should default to text/html", "res when accepting text should include the redirect type", "HEAD should default to GET", "app .param(name, fn) should not call when values differ on error", "Route errors should handle single error handler", "app .param(name, fn) should map logic for a single param", "app.router methods should reject numbers for app.lock", "app.router methods should include PURGE", "res .send(String) should send as html", "downloads GET /files/missing.txt should respond with 404", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "app.router methods should include PROPPATCH", "res .send(Buffer) should not override ETag", "req .query should default to {}", "res \"etag\" setting when enabled should send ETag in response to BIND request", "cookie-sessions GET / should set a session cookie", "app .use(path, middleware) should reject null as middleware", "app.router methods should include UNLINK", "content-negotiation GET /users should accept to application/json", "Route .VERB should support .get", "req .subdomains otherwise should return an empty array", "app.router promise support should pass rejected promise value", "express.raw() should handle Content-Length: 0", "res .format(obj) in router should allow wildcard type/subtypes", "express.static() maxAge should accept string", "res .sendFile(path, fn) should invoke the callback when client already aborted", "express.json() should parse JSON", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "resource GET /users/9 should respond with error", "express.static() when request has \"Range\" header when syntactically invalid should respond with 200 and the entire contents", "express.urlencoded() with type option when [\"urlencoded\", \"application/x-pairs\"] should ignore application/x-foo", "express.static() fallthrough when true with redirect: false should fall-through when directory", "req .accepts(types) should return the first acceptable type", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "config .set() should return the app when undefined", "mvc GET /users should display a list of users", "app .param(name, fn) should support altering req.params across routes", "config .get() when mounted should default to the parent app", "res .jsonp(object) \"json escape\" setting should be undefined by default", "express.urlencoded() with limit option should not hang response", "express.urlencoded() encoding should support identity encoding", "res .append(field, val) should get reset by res.set(field, val)", "req .range(size) should accept any type", "express.urlencoded() with parameterLimit option with extended: false should reject 0", "app.router methods should include GET", "express.static() extensions should support fallbacks", "exports should expose raw middleware", "Router .param should call param function when routing middleware", "express.urlencoded() encoding should be case-insensitive", "app.router decode params should not accept params in malformed paths", "express.json() should handle Content-Length: 0", "Router should handle missing URL", "markdown GET / should respond with html", "express.static() fallthrough when false should 403 when traversing past root", "app.router methods should reject numbers for app.acl", "middleware .next() should behave like connect", "resource DELETE /users/1 should delete user 1", "utils.setCharset(type, charset) should return type if not given charset", "express.text() with type option when a function should parse when truthy value returned", "req .fresh should return false without response headers", "req .route should be the executed Route", "express.static() when index file serving disabled should redirect to trailing slash mount point", "res .cookie(name, string, options) maxAge should throw an error with invalid maxAge", "express.static() when traversing past root should catch urlencoded ../", "req.is() when given an extension should lookup the mime type", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "express.text() with verify option should error from verify", "express.text() with limit option should 413 when over limit with Content-Length", "res .jsonp(object) \"json escape\" setting should not break undefined escape", "express.static() acceptRanges when true should obey Rage request header", "express.text() with type option when [\"text/html\", \"text/plain\"] should parse \"text/html\"", "res .json(object) when given primitives should respond with json for null", "express.static() setHeaders should not get called on 404", "res when accepting html should escape the url", "express.json() with type option when \"application/vnd.api+json\" should parse JSON for custom type", "app.route promise support error handling should ignore resolved promise", "express.urlencoded() with type option when a function should parse when truthy value returned", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "utils.wetag(body, encoding) should support buffer", "app.all() should add a router per method", "express.raw() with limit option should 413 when over limit with Content-Length", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "utils.etag(body, encoding) should support strings", "app.listen() should wrap with an HTTP server", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should reject numbers for app.proppatch", "Router FQDN should not obscure FQDNs", "express.text() encoding should parse without encoding", "res .set(field, values) should set multiple response header fields", "res .jsonp(object) should not escape utf whitespace for json fallback", "app .use(app) should set the child's .parent", "express.static() redirect should respond with default Content-Security-Policy", "res .json(object) should not support jsonp callbacks", "req .baseUrl should be empty for top-level route", "app.router methods should include PROPFIND", "res .jsonp(object) should escape utf whitespace", "app .render(name, options, fn) should give precedence to app.render() locals", "res .jsonp(object) when given a string should invoke callback with a string", "express.urlencoded() with extended option when true should parse fully-encoded extended syntax", "express.static() basic operations should support conditional requests", "config .disabled() should return false when set", "app.router methods should include ACL", "express.urlencoded() with parameterLimit option with extended: false should work if number is floating point", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "express.text() with type option when [\"text/html\", \"text/plain\"] should ignore \"text/xml\"", "req .accepts(types) should return the first when Accept is not present", "req .subdomains with no host should return an empty array", "Route .all should handle VERBS", "mvc GET /user/:id/edit should display the edit form", "res .sendFile(path, fn) should invoke the callback when complete", "req.is() when given type/* should return the full type when matching", "express.json() when JSON is invalid should error with type = \"entity.parse.failed\"", "app.router should allow rewriting of the url", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "express.json() with inflate option when true should accept content-encoding", "express.static() redirect should redirect directories with query string", "req .secure when X-Forwarded-Proto is missing should return false when http", "app.router params should merge numeric indices req.params when more in parent", "req .hostname should return the Host when present", "res .format(obj) given .default should work when only .default is provided", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "express.json() encoding should be case-insensitive", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "app.router methods should include POST", "express.text() should handle duplicated middleware", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app.router params should merge numeric indices req.params", "express.json() with strict option when true should not parse primitives", "res .format(obj) with extnames should Vary: Accept", "res should not perform freshness check unless 2xx or 304", "error GET / should respond with 500", "express.urlencoded() with verify option should error from verify", "res when accepting text should respond with text", "res .render(name) when \"view engine\" is given should render the template", "res \"etag\" setting when \"strong\" should send strong ETag", "app should 404 without routes", "express.raw() encoding should support gzip encoding", "app.router methods should reject numbers for app.post", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should reject numbers for app.merge", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app .render(name, fn) should support absolute paths with \"view engine\"", "config .set() should return the app", "express.text() should 400 when invalid content-length", "mvc GET /pet/0 should get pet", "res .attachment() should Content-Disposition to attachment", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "vhost foo.example.com GET / should redirect to /foo", "res \"etag\" setting when enabled should send ETag in response to POST request", "express.static() basic operations should set Content-Type", "res .set(field, values) should throw when Content-Type is an array", "app .use(path, middleware) should support array of paths with middleware array", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "cookies GET / should have a form", "req .query when \"query parser\" is extended should parse complex keys", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res on failure should remove Content-Disposition", "express.json() with limit option should 413 when over limit with chunked encoding", "express.static() redirect should ensure redirect URL is properly encoded", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .send(String) should override charset in Content-Type", "app.router promise support should pass rejected promise without value", "app.router :name? should populate the capture group", "express.raw() encoding should be case-insensitive", "req .fresh should return false when the resource is modified", "req .range(size, options) with \"combine: true\" option should return combined ranges", "res .jsonp(object) should respond with jsonp", "express.json() should handle duplicated middleware", "express.json() with limit option should accept number of bytes", "Route errors should handle throwing inside error handlers", "express.static() extensions should be not be enabled by default", "exports should permit modifying the .request prototype", "express.json() with verify option should work with different charsets", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "auth GET / should redirect to /login", "route-separation GET /users should list users", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "exports should permit modifying the .response prototype", "app.route should all .VERB after .all", "express.static() when mounted should not choke on auth-looking URL", "express.static() when traversing past root should not allow root path disclosure", "OPTIONS should forward requests down the middleware chain", "Router FQDN should adjust FQDN req.url", "express.static() setHeaders should get called when sending file", "req .accepts(types) should return the first acceptable type with canonical mime types", "app.router methods should reject numbers for app.put", "express.json() when JSON is invalid should 400 for bad token", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "res .render(name, option) should give precedence to res.render() locals over res.locals", "res should be chainable", "app.router methods should include UNSUBSCRIBE", "web-service GET /api/users with a valid api key should respond users json", "express.static() basic operations should require root path to be string", "express.text() with verify option should allow custom codes", "req .accepts(type) should return true when present", "express.json() with verify option should allow custom codes", "app.router methods should include SEARCH", "app.router should be .use()able", "Router should not stack overflow with many registered routes", "app.router methods should reject numbers for app.trace", "app.router params should ignore invalid incoming req.params", "express.urlencoded() charset should fail on unknown charset", "config .set() should set a value", "app.router methods should include PUT", "express.static() basic operations should support precondition checks", "req .acceptsLanguages should be false if language not accepted", "res .sendFile(path) should error missing path", "app.router methods should include SOURCE", "auth GET /restricted should redirect to /login without cookie", "req.is() when given */subtype should ignore charset", "res .clearCookie(name, options) should set the given params", "res .download(path, filename, fn) should invoke the callback", "req .query when \"query parser\" an unknown value should throw", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "downloads GET /files/amazing.txt should have a download header", "app .use(app) should support dynamic routes", "express.json() should handle empty message-body", "express.raw() with limit option should 413 when over limit with chunked encoding", "express.urlencoded() with type option when a function should work without content-type", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "Router error should handle throwing inside routes with params", "express.static() setHeaders should reject non-functions", "res .send(Buffer) should set ETag", "res \"etag\" setting when enabled should not override ETag when manually set", "app.router methods should include REBIND", "express.static() basic operations should serve static files", "exports should expose static middleware", "mvc GET / should redirect to /users", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "express.urlencoded() with parameterLimit option with extended: true should work with large limit"], "failed_tests": [], "skipped_tests": []}}